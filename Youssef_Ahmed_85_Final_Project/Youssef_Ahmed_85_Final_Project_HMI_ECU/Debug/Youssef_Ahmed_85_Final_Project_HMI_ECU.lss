
Youssef_Ahmed_85_Final_Project_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003654  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000340  00800060  00003654  000036e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  008003a0  008003a0  00003a28  2**0
                  ALLOC
  3 .stab         00003b10  00000000  00000000  00003a28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000027e6  00000000  00000000  00007538  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bc17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000cb02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d8b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000da10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000dc9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e46b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3b       	cpi	r26, 0xBB	; 187
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <main>
      8a:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e7       	ldi	r26, 0x7F	; 127
     128:	b3 e0       	ldi	r27, 0x03	; 3
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c8 1a 	jmp	0x3590	; 0x3590 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e7       	ldi	r24, 0x7F	; 127
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c8 1a 	jmp	0x3590	; 0x3590 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <APP_init>:
 *	\brief	:	Iniitiate the application.
 *	\param	:	void.
 *	\return	:	void.
 **/
void APP_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	60 97       	sbiw	r28, 0x10	; 16
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/* Enter the first run system state, which will determine the following steps */
	g_current_hmi_state = FIRST_RUN;
     b5a:	10 92 b8 03 	sts	0x03B8, r1
	/* ====================================================================== */
	/*							 Timer1 configurations:						  */
	/* ====================================================================== */

	/* Holds the desired Timer1 mode */
	g_Timer1_mode_of_operation = TIMER1_MODE_OF_OPERATION;
     b5e:	84 e0       	ldi	r24, 0x04	; 4
     b60:	80 93 b9 03 	sts	0x03B9, r24

	/*
	 * Configure the callback functions for Timer1 ISRs, this
	 * enable flexibility in event handling and customization.
	 */
	Timer1_CallbackType	TimerCallback		= {APP_vTimer1NormalCallback, APP_vTimer1CTCCallback};
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	9b e0       	ldi	r25, 0x0B	; 11
     b68:	9a 83       	std	Y+2, r25	; 0x02
     b6a:	89 83       	std	Y+1, r24	; 0x01
     b6c:	8d e3       	ldi	r24, 0x3D	; 61
     b6e:	9c e0       	ldi	r25, 0x0C	; 12
     b70:	9c 83       	std	Y+4, r25	; 0x04
     b72:	8b 83       	std	Y+3, r24	; 0x03
	/* Select the callback functions that will be called in any of Timer1 ISRs occurrences */
	Timer1_setCallBack(&TimerCallback);
     b74:	ce 01       	movw	r24, r28
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	0e 94 96 18 	call	0x312c	; 0x312c <Timer1_setCallBack>
	/* ====================================================================== */
	/*						 Interrupt 2 configurations:					  */
	/* ====================================================================== */

	/* Initiate the parameters of INT2, which is responsible for RESET process */
	INT2_init();
     b7c:	0e 94 07 10 	call	0x200e	; 0x200e <INT2_init>
	/* Select the callback function that will be called in INT2 ISR occurrences */
	INT2_setCallBack(APP_vINT2softResetCallBack);
     b80:	8b e7       	ldi	r24, 0x7B	; 123
     b82:	9c e0       	ldi	r25, 0x0C	; 12
     b84:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <INT2_setCallBack>
	/* ====================================================================== */
	/* 							UART configurations:						  */
	/* ====================================================================== */

	/* Initial vlues: */
	g_RX_ready_flag		= FALSE;
     b88:	10 92 b6 03 	sts	0x03B6, r1
	g_bytes_recieved	= RX_FRAME_SIZE;
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	80 93 a9 03 	sts	0x03A9, r24
	/*
	 * Configuration struct members (in order):
	 * {character size, parity, stop bits, baud rate}
	 */
	UART_ConfigType		UART_configurations	= {DATA_8_BIT, EVEN_PARITY, STOP_BIT_1, UART_BAUD_RATE};
     b92:	ce 01       	movw	r24, r28
     b94:	05 96       	adiw	r24, 0x05	; 5
     b96:	9d 87       	std	Y+13, r25	; 0x0d
     b98:	8c 87       	std	Y+12, r24	; 0x0c
     b9a:	e7 e8       	ldi	r30, 0x87	; 135
     b9c:	f3 e0       	ldi	r31, 0x03	; 3
     b9e:	ff 87       	std	Y+15, r31	; 0x0f
     ba0:	ee 87       	std	Y+14, r30	; 0x0e
     ba2:	f7 e0       	ldi	r31, 0x07	; 7
     ba4:	f8 8b       	std	Y+16, r31	; 0x10
     ba6:	ee 85       	ldd	r30, Y+14	; 0x0e
     ba8:	ff 85       	ldd	r31, Y+15	; 0x0f
     baa:	00 80       	ld	r0, Z
     bac:	8e 85       	ldd	r24, Y+14	; 0x0e
     bae:	9f 85       	ldd	r25, Y+15	; 0x0f
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	9f 87       	std	Y+15, r25	; 0x0f
     bb4:	8e 87       	std	Y+14, r24	; 0x0e
     bb6:	ec 85       	ldd	r30, Y+12	; 0x0c
     bb8:	fd 85       	ldd	r31, Y+13	; 0x0d
     bba:	00 82       	st	Z, r0
     bbc:	8c 85       	ldd	r24, Y+12	; 0x0c
     bbe:	9d 85       	ldd	r25, Y+13	; 0x0d
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	9d 87       	std	Y+13, r25	; 0x0d
     bc4:	8c 87       	std	Y+12, r24	; 0x0c
     bc6:	98 89       	ldd	r25, Y+16	; 0x10
     bc8:	91 50       	subi	r25, 0x01	; 1
     bca:	98 8b       	std	Y+16, r25	; 0x10
     bcc:	e8 89       	ldd	r30, Y+16	; 0x10
     bce:	ee 23       	and	r30, r30
     bd0:	51 f7       	brne	.-44     	; 0xba6 <APP_init+0x60>
	UART_Init(&UART_configurations);
     bd2:	ce 01       	movw	r24, r28
     bd4:	05 96       	adiw	r24, 0x05	; 5
     bd6:	0e 94 f7 18 	call	0x31ee	; 0x31ee <UART_Init>

	/* Select the callback function that will be called in UART_RXC ISR occurrences */
	UARTRX_setCallBack(APP_vUartRxCallback);
     bda:	8f e4       	ldi	r24, 0x4F	; 79
     bdc:	9c e0       	ldi	r25, 0x0C	; 12
     bde:	0e 94 e5 18 	call	0x31ca	; 0x31ca <UARTRX_setCallBack>
	/* ====================================================================== */
	/* 						Components initializations:						  */
	/* ====================================================================== */

	/* GPIO is a static configurable in lcd.h */
	LCD_init();
     be2:	0e 94 51 11 	call	0x22a2	; 0x22a2 <LCD_init>

	/* ====================================================================== */
	/*							Enable global interrupt						  */
	/* ====================================================================== */
	sei();
     be6:	78 94       	sei
}
     be8:	60 96       	adiw	r28, 0x10	; 16
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <APP_vFirstRunState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = FIRST_RUN.
 **/
void APP_vFirstRunState(void)
{
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
	 * the next state after FIRST_RUN state.
	 *
	 * If ERROR byte received, redo this state to keep synced with CONTROL_ECU state.
	 * =========================================================================
	 */
	APP_vCheckSuccessSyncTwoStates(CTRL_GET_NEW_PASSWORD, NEW_PASSWORD, ENTER_PASSWORD, FIRST_RUN);
     c02:	82 e0       	ldi	r24, 0x02	; 2
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	45 e0       	ldi	r20, 0x05	; 5
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	0e 94 0b 07 	call	0xe16	; 0xe16 <APP_vCheckSuccessSyncTwoStates>
	 * =========================================================================
	 * Only in case if it was really the 1st time to run the program, display
	 * these messages on the LCD.
	 * =========================================================================
	 */
	if (g_current_hmi_state == NEW_PASSWORD)
     c0e:	80 91 b8 03 	lds	r24, 0x03B8
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	31 f4       	brne	.+12     	; 0xc22 <APP_vFirstRunState+0x28>
	{
		/*LCD: Hi! This is Your First Time Here! It's a Door Lock Security System. */
		APP_displayMessage(MSG_FIRST_RUN);
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	0e 94 f9 07 	call	0xff2	; 0xff2 <APP_displayMessage>

		/* Start timer1 seconds counter to make the message readable */
		TIMER1_vStartTimer(TIMER1_DOOR_HOLD_AND_LCD_MESSAGES);
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <TIMER1_vStartTimer>
	}
}
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <APP_vNewPasswordState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = NEW_PASSWORD.
 **/
void APP_vNewPasswordState(void)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
	/*LCD: ** Your Password Should be Ranged in (10000-99999) and be 5-digits. */
	APP_displayMessage(MSG_PSWRD_INFO);
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	0e 94 f9 07 	call	0xff2	; 0xff2 <APP_displayMessage>

	/* Start timer1 seconds counter to make the message readable */
	TIMER1_vStartTimer(TIMER1_DOOR_HOLD_AND_LCD_MESSAGES);
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <TIMER1_vStartTimer>

	/*LCD: ** Here We Go ** Now, Use the Key Pad to Enter the Password:        */
	APP_displayMessage(MSG_NEW_PSWRD);
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	0e 94 f9 07 	call	0xff2	; 0xff2 <APP_displayMessage>
	 *
	 * Note that unless this function be completed, the CONTROL_ECU is in
	 * polling state awaiting for the CTRL byte from the HMI.
	 * =========================================================================
	 */
	APP_vGetPasswordFromUserThenSendUART(CTRL_GET_NEW_PASSWORD);
     c42:	82 e0       	ldi	r24, 0x02	; 2
     c44:	0e 94 97 07 	call	0xf2e	; 0xf2e <APP_vGetPasswordFromUserThenSendUART>
	 * Set system state to CONFIRM_PASSWORD state.
	 *
	 * If ERROR byte received, redo this state to keep synced with CONTROL_ECU state.
	 * =========================================================================
	 */
	APP_vCheckSuccessSyncOneState(CONFIRM_PASSWORD, NEW_PASSWORD);
     c48:	82 e0       	ldi	r24, 0x02	; 2
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <APP_vCheckSuccessSyncOneState>
}
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	08 95       	ret

00000c56 <APP_vConfirmNewPasswordState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = CONFIRM_PASSWORD.
 **/
void APP_vConfirmNewPasswordState(void)
{
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
	/*LCD:   Now, confirm    Your Password!                   Password:        */
	APP_displayMessage(MSG_CFRM_PSWRD);
     c5e:	83 e0       	ldi	r24, 0x03	; 3
     c60:	0e 94 f9 07 	call	0xff2	; 0xff2 <APP_displayMessage>
	 * to the CONTROL_ECU though UART with confirm new password CTRL byte.
	 *
	 * Note that unless this function be completed, the CONTROL_ECU is in
	 * polling state awaiting for the CTRL byte from the HMI.
	 */
	APP_vGetPasswordFromUserThenSendUART(CTRL_CONFIRM_NEW_PASSWORD);
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	0e 94 97 07 	call	0xf2e	; 0xf2e <APP_vGetPasswordFromUserThenSendUART>
	 * See APP_vConfirmNewPasswordState in CONTROL_ECU to understand the mechanism
	 * of deciding the next state after CONFIRM_PASSWORD state.
	 *
	 * If ERROR byte received, redo this state to keep synced with CONTROL_ECU state.
	 */
	APP_vCheckSuccessSyncTwoStates(CTRL_PASSWORD_MATCHED, MATCHED_PASSWORD, MISMACHTED_PASSWORD, CONFIRM_PASSWORD);
     c6a:	84 e0       	ldi	r24, 0x04	; 4
     c6c:	63 e0       	ldi	r22, 0x03	; 3
     c6e:	44 e0       	ldi	r20, 0x04	; 4
     c70:	22 e0       	ldi	r18, 0x02	; 2
     c72:	0e 94 0b 07 	call	0xe16	; 0xe16 <APP_vCheckSuccessSyncTwoStates>
}
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <APP_vMatchedPasswordState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = MATCHED_PASSWORD.
 **/
void APP_vMatchedPasswordState(void)
{
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
	/* LCD: ** Succussed ***   Your door is     Secured with     the password   */
	APP_displayMessage(MSG_MTCH_PSWRD);
     c84:	84 e0       	ldi	r24, 0x04	; 4
     c86:	0e 94 f9 07 	call	0xff2	; 0xff2 <APP_displayMessage>

	/* Start timer1 seconds counter to make the message readable */
	TIMER1_vStartTimer(TIMER1_DOOR_HOLD_AND_LCD_MESSAGES);
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <TIMER1_vStartTimer>
	/*
	 * Set system state to ENTER_PASSWORD state.
	 *
	 * If ERROR byte received, redo this state to keep synced with CONTROL_ECU state.
	 */
	APP_vCheckSuccessSyncOneState(ENTER_PASSWORD, MATCHED_PASSWORD);
     c90:	85 e0       	ldi	r24, 0x05	; 5
     c92:	63 e0       	ldi	r22, 0x03	; 3
     c94:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <APP_vCheckSuccessSyncOneState>
}
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <APP_vMisMacthedPasswordState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = MISMACHTED_PASSWORD.
 **/
void APP_vMisMacthedPasswordState(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/* LCD: ***  Failed  *** Passwords aren't Matching! Retype The Password ... */
	APP_displayMessage(MSG_MSMT_PSWRD);
     ca6:	85 e0       	ldi	r24, 0x05	; 5
     ca8:	0e 94 f9 07 	call	0xff2	; 0xff2 <APP_displayMessage>

	/* Start timer1 seconds counter to make the message readable */
	TIMER1_vStartTimer(TIMER1_DOOR_HOLD_AND_LCD_MESSAGES);
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <TIMER1_vStartTimer>
	 *
	 * Note that unless this function be completed, the CONTROL_ECU is in
	 * polling state awaiting for the CTRL byte from the HMI.
	 * =========================================================================
	 */
	APP_vSendCurrentHMIStateUART(CTRL_PASSWORD_MISMATCHED);
     cb2:	85 e0       	ldi	r24, 0x05	; 5
     cb4:	0e 94 7b 07 	call	0xef6	; 0xef6 <APP_vSendCurrentHMIStateUART>
	 * See APP_vMisMacthedPasswordState in CONTROL_ECU to understand the mechanism
	 * of deciding the next state after MISMACHTED_PASSWORD state.
	 *
	 * If ERROR byte received, redo this state to keep synced with CONTROL_ECU state.
	 */
	APP_vCheckSuccessSyncTwoStates(CTRL_CONFIRM_NEW_PASSWORD, CONFIRM_PASSWORD, NEW_PASSWORD, MISMACHTED_PASSWORD);
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	62 e0       	ldi	r22, 0x02	; 2
     cbc:	41 e0       	ldi	r20, 0x01	; 1
     cbe:	24 e0       	ldi	r18, 0x04	; 4
     cc0:	0e 94 0b 07 	call	0xe16	; 0xe16 <APP_vCheckSuccessSyncTwoStates>
}
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <APP_vEnterThePasswordState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = ENTER_PASSWORD.
 **/
void APP_vEnterThePasswordState(void)
{
     cca:	ef 92       	push	r14
     ccc:	0f 93       	push	r16
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
	/* LCD: Welcome Back! To Open the Door,   Please Enter the Password:        */
	APP_displayMessage(MSG_ENTR_PSWRD);
     cd6:	86 e0       	ldi	r24, 0x06	; 6
     cd8:	0e 94 f9 07 	call	0xff2	; 0xff2 <APP_displayMessage>
	 * to the CONTROL_ECU though UART with enter password CTRL byte.
	 *
	 * Note that unless this function be completed, the CONTROL_ECU is in
	 * polling state awaiting for the CTRL byte from the HMI.
	 */
	APP_vGetPasswordFromUserThenSendUART(CTRL_ENTER_PASSWORD);
     cdc:	87 e0       	ldi	r24, 0x07	; 7
     cde:	0e 94 97 07 	call	0xf2e	; 0xf2e <APP_vGetPasswordFromUserThenSendUART>
	 * of deciding the next state after ENTER_PASSWORD state.
	 *
	 * If ERROR byte received, redo this state to keep synced with CONTROL_ECU state.
	 * =========================================================================
	 */
	APP_vCheckSuccessSyncThreeStates(CTRL_MAIN_MENU, CTRL_WRONG_PASSWORD,\
     ce2:	88 e0       	ldi	r24, 0x08	; 8
     ce4:	6c e0       	ldi	r22, 0x0C	; 12
     ce6:	46 e0       	ldi	r20, 0x06	; 6
     ce8:	2a e0       	ldi	r18, 0x0A	; 10
     cea:	0b e0       	ldi	r16, 0x0B	; 11
     cec:	0f 2e       	mov	r0, r31
     cee:	f5 e0       	ldi	r31, 0x05	; 5
     cf0:	ef 2e       	mov	r14, r31
     cf2:	f0 2d       	mov	r31, r0
     cf4:	0e 94 39 07 	call	0xe72	; 0xe72 <APP_vCheckSuccessSyncThreeStates>
					MAIN_MENU, WRONG_PASSWORD, LOCK_SYSTEM, ENTER_PASSWORD);
}
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	0f 91       	pop	r16
     cfe:	ef 90       	pop	r14
     d00:	08 95       	ret

00000d02 <APP_vMainMenuState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = MAIN_MENU.
 **/
void APP_vMainMenuState(void)
{
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
	/* LCD: Press ( + ) to:  Open the Door    Press ( - ) to:  Change Password  */
	APP_displayMessage(MSG_MAIN_MENU);
     d0a:	87 e0       	ldi	r24, 0x07	; 7
     d0c:	0e 94 f9 07 	call	0xff2	; 0xff2 <APP_displayMessage>
	 *
	 * Note that unless this function be completed, the CONTROL_ECU is in
	 * polling state awaiting for the CTRL byte from the HMI.
	 * =========================================================================
	 */
	APP_vGetCommandFromUserThenSendUART();
     d10:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <APP_vGetCommandFromUserThenSendUART>
	 * See APP_vMainMenuState in CONTROL_ECU to understand the mechanism
	 * of deciding the next state after MAIN_MENU state.
	 *
	 * If ERROR byte received, redo this state to keep synced with CONTROL_ECU state.
	 */
	APP_vCheckSuccessSyncTwoStates(CTRL_DOOR_OPEN, DOOR_OPEN, NEW_PASSWORD, MAIN_MENU);
     d14:	89 e0       	ldi	r24, 0x09	; 9
     d16:	67 e0       	ldi	r22, 0x07	; 7
     d18:	41 e0       	ldi	r20, 0x01	; 1
     d1a:	26 e0       	ldi	r18, 0x06	; 6
     d1c:	0e 94 0b 07 	call	0xe16	; 0xe16 <APP_vCheckSuccessSyncTwoStates>
}
     d20:	cf 91       	pop	r28
     d22:	df 91       	pop	r29
     d24:	08 95       	ret

00000d26 <APP_vDoorOpenState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = DOOR_OPEN.
 **/
void APP_vDoorOpenState(void)
{
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
	/* LCD:  Sure, The Door   Is Opening Now   for 15 Seconds                   */
	APP_displayMessage(MSG_DOOR_OPEN);
     d2e:	88 e0       	ldi	r24, 0x08	; 8
     d30:	0e 94 f9 07 	call	0xff2	; 0xff2 <APP_displayMessage>
	 * Send a CTRL byte to inform the CONTROL_ECU that door open message displayed.
	 *
	 * Note that unless this function be completed, the CONTROL_ECU is in
	 * polling state awaiting for the CTRL byte from the HMI.
	 */
	APP_vSendCurrentHMIStateUART(CTRL_DOOR_OPEN);
     d34:	89 e0       	ldi	r24, 0x09	; 9
     d36:	0e 94 7b 07 	call	0xef6	; 0xef6 <APP_vSendCurrentHMIStateUART>
	/*
	 * Set system state to DOOR_HOLD state.
	 *
	 * If ERROR byte received, redo this state to keep synced with CONTROL_ECU state.
	 */
	APP_vCheckSuccessSyncOneState(DOOR_HOLD, DOOR_OPEN);
     d3a:	88 e0       	ldi	r24, 0x08	; 8
     d3c:	67 e0       	ldi	r22, 0x07	; 7
     d3e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <APP_vCheckSuccessSyncOneState>
}
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <APP_vDoorHoldState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = DOOR_HOLD.
 **/
void APP_vDoorHoldState(void)
{
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
	/* LCD:  *The Door Will   Keep Open Mode    for 3 Seconds      Hurry Up!    */
	APP_displayMessage(MSG_DOOR_HOLD);
     d50:	89 e0       	ldi	r24, 0x09	; 9
     d52:	0e 94 f9 07 	call	0xff2	; 0xff2 <APP_displayMessage>
	 * Send a CTRL byte to inform the CONTROL_ECU that door hold message displayed.
	 *
	 * Note that unless this function be completed, the CONTROL_ECU is in
	 * polling state awaiting for the CTRL byte from the HMI.
	 */
	APP_vSendCurrentHMIStateUART(CTRL_DOOR_HOLD);
     d56:	8a e0       	ldi	r24, 0x0A	; 10
     d58:	0e 94 7b 07 	call	0xef6	; 0xef6 <APP_vSendCurrentHMIStateUART>
	/*
	 * Set system state to DOOR_HOLD state.
	 *
	 * If ERROR byte received, redo this state to keep synced with CONTROL_ECU state.
	 */
	APP_vCheckSuccessSyncOneState(DOOR_CLOSE, DOOR_HOLD);
     d5c:	89 e0       	ldi	r24, 0x09	; 9
     d5e:	68 e0       	ldi	r22, 0x08	; 8
     d60:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <APP_vCheckSuccessSyncOneState>
}
     d64:	cf 91       	pop	r28
     d66:	df 91       	pop	r29
     d68:	08 95       	ret

00000d6a <APP_vDoorCloseState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = DOOR_CLOSE.
 **/
void APP_vDoorCloseState(void)
{
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
	/* LCD:  Oops, The Door   is Closing Now   for 15 Seconds                   */
	APP_displayMessage(MSG_DOOR_CLOS);
     d72:	8a e0       	ldi	r24, 0x0A	; 10
     d74:	0e 94 f9 07 	call	0xff2	; 0xff2 <APP_displayMessage>
	 * Send a CTRL byte to inform the CONTROL_ECU that door close message displayed.
	 *
	 * Note that unless this function be completed, the CONTROL_ECU is in
	 * polling state awaiting for the CTRL byte from the HMI.
	 */
	APP_vSendCurrentHMIStateUART(CTRL_DOOR_CLOSE);
     d78:	8b e0       	ldi	r24, 0x0B	; 11
     d7a:	0e 94 7b 07 	call	0xef6	; 0xef6 <APP_vSendCurrentHMIStateUART>
	/*
	 * Re-set system state to ENTER_PASSWORD state.
	 *
	 * If ERROR byte received, redo this state to keep synced with CONTROL_ECU state.
	 */
	APP_vCheckSuccessSyncOneState(ENTER_PASSWORD, DOOR_CLOSE);
     d7e:	85 e0       	ldi	r24, 0x05	; 5
     d80:	69 e0       	ldi	r22, 0x09	; 9
     d82:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <APP_vCheckSuccessSyncOneState>
}
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <APP_vWrongPasswordState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = WRONG_PASSWORD.
 **/
void APP_vWrongPasswordState(void)
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
	/* LCD: Invalid Password Please Focus and Enter the Right  Password Again ! */
	APP_displayMessage(MSG_WRNG_PSWRD);
     d94:	8b e0       	ldi	r24, 0x0B	; 11
     d96:	0e 94 f9 07 	call	0xff2	; 0xff2 <APP_displayMessage>

	/* Start timer1 seconds counter to make the message readable */
	TIMER1_vStartTimer(TIMER1_DOOR_HOLD_AND_LCD_MESSAGES);
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <TIMER1_vStartTimer>
	 * Send a CTRL byte to inform the CONTROL_ECU that wrong password message displayed.
	 *
	 * Note that unless this function be completed, the CONTROL_ECU is in
	 * polling state awaiting for the CTRL byte from the HMI.
	 */
	APP_vSendCurrentHMIStateUART(CTRL_WRONG_PASSWORD);
     da0:	8c e0       	ldi	r24, 0x0C	; 12
     da2:	0e 94 7b 07 	call	0xef6	; 0xef6 <APP_vSendCurrentHMIStateUART>
	/*
	 * Set system state to ENTER_PASSWORD state.
	 *
	 * If ERROR byte received, redo this state to keep synced with CONTROL_ECU state.
	 */
	APP_vCheckSuccessSyncOneState(ENTER_PASSWORD, WRONG_PASSWORD);
     da6:	85 e0       	ldi	r24, 0x05	; 5
     da8:	6a e0       	ldi	r22, 0x0A	; 10
     daa:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <APP_vCheckSuccessSyncOneState>
}
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <APP_vLockSystemState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = LOCK_SYSTEM.
 **/
void APP_vLockSystemState(void)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
	/* LCD: Suspected Trials ================ The Door will be Locked for 1 Min */
	APP_displayMessage(MSG_LOCK_SYS);
     dbc:	8c e0       	ldi	r24, 0x0C	; 12
     dbe:	0e 94 f9 07 	call	0xff2	; 0xff2 <APP_displayMessage>
	 * Send a CTRL byte to inform the CONTROL_ECU that system locked message displayed.
	 *
	 * Note that unless this function be completed, the CONTROL_ECU is in
	 * polling state awaiting for the CTRL byte from the HMI.
	 */
	APP_vSendCurrentHMIStateUART(CTRL_LOCK_SYSTEM);
     dc2:	8d e0       	ldi	r24, 0x0D	; 13
     dc4:	0e 94 7b 07 	call	0xef6	; 0xef6 <APP_vSendCurrentHMIStateUART>
	/*
	 * Re-set system state to ENTER_PASSWORD state.
	 *
	 * If ERROR byte received, redo this state to keep synced with CONTROL_ECU state.
	 */
	APP_vCheckSuccessSyncOneState(ENTER_PASSWORD, LOCK_SYSTEM);
     dc8:	85 e0       	ldi	r24, 0x05	; 5
     dca:	6b e0       	ldi	r22, 0x0B	; 11
     dcc:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <APP_vCheckSuccessSyncOneState>
}
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <APP_vCheckSuccessSyncOneState>:
 *	\param 1:	state will be navigated if CTRL_SUCCESS.
 *	\param 2:	state will be repeated if CTRL_ERROR.
 *	\return	:	void.
 **/
void APP_vCheckSuccessSyncOneState(systemStateType_ if_success, systemStateType_ if_fail)
{
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	00 d0       	rcall	.+0      	; 0xddc <APP_vCheckSuccessSyncOneState+0x6>
     ddc:	0f 92       	push	r0
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	6a 83       	std	Y+2, r22	; 0x02
	/* Polling until receive a UART frame */
	while(g_RX_ready_flag == FALSE);
     de6:	80 91 b6 03 	lds	r24, 0x03B6
     dea:	88 23       	and	r24, r24
     dec:	e1 f3       	breq	.-8      	; 0xde6 <APP_vCheckSuccessSyncOneState+0x10>

	/* Assign the next state according to CTRL byte0 value, to go, or to repeat! */
	g_current_hmi_state = ((g_RX_frame[BYTE_0_CONTROL] == CTRL_SUCCESS) ? if_success : if_fail);
     dee:	80 91 b4 03 	lds	r24, 0x03B4
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	19 f4       	brne	.+6      	; 0xdfc <APP_vCheckSuccessSyncOneState+0x26>
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	8b 83       	std	Y+3, r24	; 0x03
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <APP_vCheckSuccessSyncOneState+0x2a>
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	8b 83       	std	Y+3, r24	; 0x03
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	80 93 b8 03 	sts	0x03B8, r24

	/* Reset the RX flag to be reusable in the next process */
	g_RX_ready_flag = FALSE;
     e06:	10 92 b6 03 	sts	0x03B6, r1
}
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <APP_vCheckSuccessSyncTwoStates>:
 **/
void APP_vCheckSuccessSyncTwoStates(	UART_ControlByteType	CTRL_if_success1	,\
										systemStateType_		if_success1		  	,\
										systemStateType_		if_success2			,\
										systemStateType_		if_fail				)
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <APP_vCheckSuccessSyncTwoStates+0x6>
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <APP_vCheckSuccessSyncTwoStates+0x8>
     e1e:	0f 92       	push	r0
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	6a 83       	std	Y+2, r22	; 0x02
     e28:	4b 83       	std	Y+3, r20	; 0x03
     e2a:	2c 83       	std	Y+4, r18	; 0x04
	/* Polling until receive a UART frame */
	while(g_RX_ready_flag == FALSE);
     e2c:	80 91 b6 03 	lds	r24, 0x03B6
     e30:	88 23       	and	r24, r24
     e32:	e1 f3       	breq	.-8      	; 0xe2c <APP_vCheckSuccessSyncTwoStates+0x16>

	/* Check the CTRL byte0 to change the state if successed, or to repeat if error */
	if (g_RX_frame[BYTE_0_CONTROL] == CTRL_SUCCESS)
     e34:	80 91 b4 03 	lds	r24, 0x03B4
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	71 f4       	brne	.+28     	; 0xe58 <APP_vCheckSuccessSyncTwoStates+0x42>
	{
		/* Assign the next state according to CTRL byte1 value as desciped in \brief */
		g_current_hmi_state = ((g_RX_frame[BYTE_1_PASS0_OR_CMD] == CTRL_if_success1) ?	if_success1 :\
     e3c:	90 91 b5 03 	lds	r25, 0x03B5
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	98 17       	cp	r25, r24
     e44:	19 f4       	brne	.+6      	; 0xe4c <APP_vCheckSuccessSyncTwoStates+0x36>
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	8d 83       	std	Y+5, r24	; 0x05
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <APP_vCheckSuccessSyncTwoStates+0x3a>
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	8d 81       	ldd	r24, Y+5	; 0x05
     e52:	80 93 b8 03 	sts	0x03B8, r24
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <APP_vCheckSuccessSyncTwoStates+0x48>
																						if_success2);
	}
	/* Repeat the state if CTRL byte0 is error */
	else
	{
		g_current_hmi_state = if_fail;
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	80 93 b8 03 	sts	0x03B8, r24
	}

	/* Reset the RX flag to be reusable in the next process */
	g_RX_ready_flag = FALSE;
     e5e:	10 92 b6 03 	sts	0x03B6, r1
}
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <APP_vCheckSuccessSyncThreeStates>:
										UART_ControlByteType	CTRL_if_success2	,\
										systemStateType_		if_success1		  	,\
										systemStateType_		if_success2			,\
										systemStateType_		if_success3			,\
										systemStateType_		if_fail				)
{
     e72:	ef 92       	push	r14
     e74:	0f 93       	push	r16
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	28 97       	sbiw	r28, 0x08	; 8
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	89 83       	std	Y+1, r24	; 0x01
     e8c:	6a 83       	std	Y+2, r22	; 0x02
     e8e:	4b 83       	std	Y+3, r20	; 0x03
     e90:	2c 83       	std	Y+4, r18	; 0x04
     e92:	0d 83       	std	Y+5, r16	; 0x05
     e94:	ee 82       	std	Y+6, r14	; 0x06
	/* Polling until receive a UART frame */
	while(g_RX_ready_flag == FALSE);
     e96:	80 91 b6 03 	lds	r24, 0x03B6
     e9a:	88 23       	and	r24, r24
     e9c:	e1 f3       	breq	.-8      	; 0xe96 <APP_vCheckSuccessSyncThreeStates+0x24>

	/* Check the CTRL byte0 to change the state if successed, or to repeat if error */
	if (g_RX_frame[BYTE_0_CONTROL] == CTRL_SUCCESS)
     e9e:	80 91 b4 03 	lds	r24, 0x03B4
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	c1 f4       	brne	.+48     	; 0xed6 <APP_vCheckSuccessSyncThreeStates+0x64>
	{
		/* Assign the next state according to CTRL byte1 value as desciped in \brief */
		g_current_hmi_state =	((g_RX_frame[BYTE_1_PASS0_OR_CMD] == CTRL_if_success1) ? if_success1 :\
     ea6:	90 91 b5 03 	lds	r25, 0x03B5
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	98 17       	cp	r25, r24
     eae:	69 f0       	breq	.+26     	; 0xeca <APP_vCheckSuccessSyncThreeStates+0x58>
     eb0:	90 91 b5 03 	lds	r25, 0x03B5
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	98 17       	cp	r25, r24
     eb8:	19 f4       	brne	.+6      	; 0xec0 <APP_vCheckSuccessSyncThreeStates+0x4e>
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	8f 83       	std	Y+7, r24	; 0x07
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <APP_vCheckSuccessSyncThreeStates+0x52>
     ec0:	8d 81       	ldd	r24, Y+5	; 0x05
     ec2:	8f 83       	std	Y+7, r24	; 0x07
     ec4:	8f 81       	ldd	r24, Y+7	; 0x07
     ec6:	88 87       	std	Y+8, r24	; 0x08
     ec8:	02 c0       	rjmp	.+4      	; 0xece <APP_vCheckSuccessSyncThreeStates+0x5c>
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	88 87       	std	Y+8, r24	; 0x08
     ece:	88 85       	ldd	r24, Y+8	; 0x08
     ed0:	80 93 b8 03 	sts	0x03B8, r24
     ed4:	03 c0       	rjmp	.+6      	; 0xedc <APP_vCheckSuccessSyncThreeStates+0x6a>
																						if_success3));
	}
	/* Repeat the state if CTRL byte0 is error */
	else
	{
		g_current_hmi_state = if_fail;
     ed6:	8e 81       	ldd	r24, Y+6	; 0x06
     ed8:	80 93 b8 03 	sts	0x03B8, r24
	}

	/* Reset the RX flag to be reusable in the next process */
	g_RX_ready_flag = FALSE;
     edc:	10 92 b6 03 	sts	0x03B6, r1
}
     ee0:	28 96       	adiw	r28, 0x08	; 8
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	0f 91       	pop	r16
     ef2:	ef 90       	pop	r14
     ef4:	08 95       	ret

00000ef6 <APP_vSendCurrentHMIStateUART>:
 *				until get a full 5-bytes- frame from the HMI_ECU.
 *	\param 1:	The current state of HMI_ECU.
 *	\return	:	void.
 **/
void APP_vSendCurrentHMIStateUART(frameType byte_0)
{
     ef6:	0f 93       	push	r16
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	0f 92       	push	r0
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	89 83       	std	Y+1, r24	; 0x01
	/* Check if the entered current state is main menu */
	switch(byte_0)
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	88 2f       	mov	r24, r24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	88 30       	cpi	r24, 0x08	; 8
     f0c:	91 05       	cpc	r25, r1
     f0e:	19 f4       	brne	.+6      	; 0xf16 <APP_vSendCurrentHMIStateUART+0x20>
		 * Use the independent function of handling user command.
		 * =========================================================================
		 */
		case CTRL_MAIN_MENU	:
		{
			APP_vGetCommandFromUserThenSendUART();
     f10:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <APP_vGetCommandFromUserThenSendUART>
     f14:	07 c0       	rjmp	.+14     	; 0xf24 <APP_vSendCurrentHMIStateUART+0x2e>
		 * At any other state, just update the TX frame with the current CTRL byte.
		 * =========================================================================
		 */
		default				:
		{
			APP_vUpdateTXFrameThenSendUART(byte_0, CTRL_EMPTY, CTRL_EMPTY, CTRL_EMPTY, CTRL_EMPTY);
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	6e ee       	ldi	r22, 0xEE	; 238
     f1a:	4e ee       	ldi	r20, 0xEE	; 238
     f1c:	2e ee       	ldi	r18, 0xEE	; 238
     f1e:	0e ee       	ldi	r16, 0xEE	; 238
     f20:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <APP_vUpdateTXFrameThenSendUART>
			break;
		}
	}
}
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	0f 91       	pop	r16
     f2c:	08 95       	ret

00000f2e <APP_vGetPasswordFromUserThenSendUART>:
 *				function to transmit this updated frame.
 *	\param 1:	CTRL byte that indicates the current state.
 *	\return	:	void.
 **/
void APP_vGetPasswordFromUserThenSendUART(UART_ControlByteType control_byte)
{
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	00 d0       	rcall	.+0      	; 0xf38 <APP_vGetPasswordFromUserThenSendUART+0xa>
     f38:	0f 92       	push	r0
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	8b 83       	std	Y+3, r24	; 0x03
	 * NOTE: Check APP_vGetPasswordFromUser function description first.
	 * =========================================================================
	 * Polling until get a valid uin32 password from the user.
	 * =========================================================================
	 */
	APP_vGetPasswordFromUser();
     f40:	0e 94 13 0a 	call	0x1426	; 0x1426 <APP_vGetPasswordFromUser>

	/* Update byte0 of TX frame with a CTRL byte indicates the current system state. */
	g_TX_frame[BYTE_0_CONTROL] = control_byte;
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	80 93 af 03 	sts	0x03AF, r24

	/* Update bytes 1 to 5 with the 4 separated bytes of the uint32 g_password */
	for(byte_index = BYTE_1_PASS0_OR_CMD ; byte_index <= BYTE_4_PASS3 ; byte_index++)
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	8a 83       	std	Y+2, r24	; 0x02
     f4e:	2c c0       	rjmp	.+88     	; 0xfa8 <APP_vGetPasswordFromUserThenSendUART+0x7a>
		 * The bytes are extracted from a password using bitwise operations by
		 * shifting the password to the right by a calculated number of bits,
		 * which is determined by multiplying the byte index by the number of
		 * bits per byte. This operation isolates each byte within the password.
		 */
		byte = (uint8)(g_password >> ((BYTES_PER_UINT32 - byte_index) * BITS_PER_BYTE));
     f50:	40 91 ab 03 	lds	r20, 0x03AB
     f54:	50 91 ac 03 	lds	r21, 0x03AC
     f58:	60 91 ad 03 	lds	r22, 0x03AD
     f5c:	70 91 ae 03 	lds	r23, 0x03AE
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	84 e0       	ldi	r24, 0x04	; 4
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	82 1b       	sub	r24, r18
     f6c:	93 0b       	sbc	r25, r19
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	8a 01       	movw	r16, r20
     f7c:	9b 01       	movw	r18, r22
     f7e:	04 c0       	rjmp	.+8      	; 0xf88 <APP_vGetPasswordFromUserThenSendUART+0x5a>
     f80:	36 95       	lsr	r19
     f82:	27 95       	ror	r18
     f84:	17 95       	ror	r17
     f86:	07 95       	ror	r16
     f88:	8a 95       	dec	r24
     f8a:	d2 f7       	brpl	.-12     	; 0xf80 <APP_vGetPasswordFromUserThenSendUART+0x52>
     f8c:	d9 01       	movw	r26, r18
     f8e:	c8 01       	movw	r24, r16
     f90:	89 83       	std	Y+1, r24	; 0x01

		/* Assign bytes to frame */
		g_TX_frame[byte_index] = byte;
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	fc 01       	movw	r30, r24
     f9a:	e1 55       	subi	r30, 0x51	; 81
     f9c:	fc 4f       	sbci	r31, 0xFC	; 252
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	80 83       	st	Z, r24

	/* Update byte0 of TX frame with a CTRL byte indicates the current system state. */
	g_TX_frame[BYTE_0_CONTROL] = control_byte;

	/* Update bytes 1 to 5 with the 4 separated bytes of the uint32 g_password */
	for(byte_index = BYTE_1_PASS0_OR_CMD ; byte_index <= BYTE_4_PASS3 ; byte_index++)
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	8f 5f       	subi	r24, 0xFF	; 255
     fa6:	8a 83       	std	Y+2, r24	; 0x02
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	85 30       	cpi	r24, 0x05	; 5
     fac:	88 f2       	brcs	.-94     	; 0xf50 <APP_vGetPasswordFromUserThenSendUART+0x22>
	 * NOTE: Check UART_sendGolabalFrame function description first.
	 * =========================================================================
	 * TX frame is ready now, lets transmit it!
	 * =========================================================================
	 */
	UART_sendGolabalFrame(g_TX_frame, TX_FRAME_SIZE);
     fae:	8f ea       	ldi	r24, 0xAF	; 175
     fb0:	93 e0       	ldi	r25, 0x03	; 3
     fb2:	65 e0       	ldi	r22, 0x05	; 5
     fb4:	0e 94 3d 1a 	call	0x347a	; 0x347a <UART_sendGolabalFrame>
}
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	08 95       	ret

00000fc8 <APP_vGetCommandFromUserThenSendUART>:
 *				frame and send it, including the desired user command.
 *	\param :	void.
 *	\return	:	void.
 **/
void APP_vGetCommandFromUserThenSendUART(void)
{
     fc8:	0f 93       	push	r16
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	0f 92       	push	r0
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
	 * =========================================================================
	 * Polling until get a valid command from the user, then assign it to a temp
	 * variable.
	 * =========================================================================
	 */
	uint8 user_command = APP_u8GetCommandFromUser();
     fd4:	0e 94 c2 0b 	call	0x1784	; 0x1784 <APP_u8GetCommandFromUser>
     fd8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Update the TX frame with CTRL main menu byte0, and the assigned variable
	 * as byte1, then fill the TX frame with EMPTYs since there is no more data
	 * to transmit, then send the whole frame.
	 */
	APP_vUpdateTXFrameThenSendUART(CTRL_MAIN_MENU, user_command,\
     fda:	88 e0       	ldi	r24, 0x08	; 8
     fdc:	69 81       	ldd	r22, Y+1	; 0x01
     fde:	4e ee       	ldi	r20, 0xEE	; 238
     fe0:	2e ee       	ldi	r18, 0xEE	; 238
     fe2:	0e ee       	ldi	r16, 0xEE	; 238
     fe4:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <APP_vUpdateTXFrameThenSendUART>
							CTRL_EMPTY, CTRL_EMPTY, CTRL_EMPTY);
}
     fe8:	0f 90       	pop	r0
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <APP_displayMessage>:
 *				keep awaiting the CONTROL_ECU decisions with an empty screen!
 *	\param 1:	The desired message ID to display on the LCD.
 *	\return	:	void.
 **/
void APP_displayMessage(messagesType message_ID)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <APP_displayMessage+0x6>
     ff8:	0f 92       	push	r0
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	89 83       	std	Y+1, r24	; 0x01
	/* Maintain writing on a clear screen every time this function been called. */
	LCD_clearScreen();
    1000:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <LCD_clearScreen>
	/*
	 * Switch on the required message, each message is corresponding to a single
	 * system state. For each message, move cursor to the beginning of each line
	 * then write the desired line within this message.
	 */
	switch(message_ID)
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	3b 83       	std	Y+3, r19	; 0x03
    100c:	2a 83       	std	Y+2, r18	; 0x02
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	9b 81       	ldd	r25, Y+3	; 0x03
    1012:	86 30       	cpi	r24, 0x06	; 6
    1014:	91 05       	cpc	r25, r1
    1016:	09 f4       	brne	.+2      	; 0x101a <APP_displayMessage+0x28>
    1018:	1a c1       	rjmp	.+564    	; 0x124e <APP_displayMessage+0x25c>
    101a:	2a 81       	ldd	r18, Y+2	; 0x02
    101c:	3b 81       	ldd	r19, Y+3	; 0x03
    101e:	27 30       	cpi	r18, 0x07	; 7
    1020:	31 05       	cpc	r19, r1
    1022:	24 f5       	brge	.+72     	; 0x106c <APP_displayMessage+0x7a>
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	9b 81       	ldd	r25, Y+3	; 0x03
    1028:	82 30       	cpi	r24, 0x02	; 2
    102a:	91 05       	cpc	r25, r1
    102c:	09 f4       	brne	.+2      	; 0x1030 <APP_displayMessage+0x3e>
    102e:	8b c0       	rjmp	.+278    	; 0x1146 <APP_displayMessage+0x154>
    1030:	2a 81       	ldd	r18, Y+2	; 0x02
    1032:	3b 81       	ldd	r19, Y+3	; 0x03
    1034:	23 30       	cpi	r18, 0x03	; 3
    1036:	31 05       	cpc	r19, r1
    1038:	64 f4       	brge	.+24     	; 0x1052 <APP_displayMessage+0x60>
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	9b 81       	ldd	r25, Y+3	; 0x03
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	09 f4       	brne	.+2      	; 0x1044 <APP_displayMessage+0x52>
    1042:	3f c0       	rjmp	.+126    	; 0x10c2 <APP_displayMessage+0xd0>
    1044:	2a 81       	ldd	r18, Y+2	; 0x02
    1046:	3b 81       	ldd	r19, Y+3	; 0x03
    1048:	21 30       	cpi	r18, 0x01	; 1
    104a:	31 05       	cpc	r19, r1
    104c:	09 f4       	brne	.+2      	; 0x1050 <APP_displayMessage+0x5e>
    104e:	5a c0       	rjmp	.+180    	; 0x1104 <APP_displayMessage+0x112>
    1050:	e4 c1       	rjmp	.+968    	; 0x141a <APP_displayMessage+0x428>
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	9b 81       	ldd	r25, Y+3	; 0x03
    1056:	84 30       	cpi	r24, 0x04	; 4
    1058:	91 05       	cpc	r25, r1
    105a:	09 f4       	brne	.+2      	; 0x105e <APP_displayMessage+0x6c>
    105c:	b6 c0       	rjmp	.+364    	; 0x11ca <APP_displayMessage+0x1d8>
    105e:	2a 81       	ldd	r18, Y+2	; 0x02
    1060:	3b 81       	ldd	r19, Y+3	; 0x03
    1062:	25 30       	cpi	r18, 0x05	; 5
    1064:	31 05       	cpc	r19, r1
    1066:	0c f0       	brlt	.+2      	; 0x106a <APP_displayMessage+0x78>
    1068:	d1 c0       	rjmp	.+418    	; 0x120c <APP_displayMessage+0x21a>
    106a:	8e c0       	rjmp	.+284    	; 0x1188 <APP_displayMessage+0x196>
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	9b 81       	ldd	r25, Y+3	; 0x03
    1070:	89 30       	cpi	r24, 0x09	; 9
    1072:	91 05       	cpc	r25, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <APP_displayMessage+0x86>
    1076:	4e c1       	rjmp	.+668    	; 0x1314 <APP_displayMessage+0x322>
    1078:	2a 81       	ldd	r18, Y+2	; 0x02
    107a:	3b 81       	ldd	r19, Y+3	; 0x03
    107c:	2a 30       	cpi	r18, 0x0A	; 10
    107e:	31 05       	cpc	r19, r1
    1080:	6c f4       	brge	.+26     	; 0x109c <APP_displayMessage+0xaa>
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	9b 81       	ldd	r25, Y+3	; 0x03
    1086:	87 30       	cpi	r24, 0x07	; 7
    1088:	91 05       	cpc	r25, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <APP_displayMessage+0x9c>
    108c:	01 c1       	rjmp	.+514    	; 0x1290 <APP_displayMessage+0x29e>
    108e:	2a 81       	ldd	r18, Y+2	; 0x02
    1090:	3b 81       	ldd	r19, Y+3	; 0x03
    1092:	28 30       	cpi	r18, 0x08	; 8
    1094:	31 05       	cpc	r19, r1
    1096:	09 f4       	brne	.+2      	; 0x109a <APP_displayMessage+0xa8>
    1098:	1c c1       	rjmp	.+568    	; 0x12d2 <APP_displayMessage+0x2e0>
    109a:	bf c1       	rjmp	.+894    	; 0x141a <APP_displayMessage+0x428>
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	9b 81       	ldd	r25, Y+3	; 0x03
    10a0:	8b 30       	cpi	r24, 0x0B	; 11
    10a2:	91 05       	cpc	r25, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <APP_displayMessage+0xb6>
    10a6:	78 c1       	rjmp	.+752    	; 0x1398 <APP_displayMessage+0x3a6>
    10a8:	2a 81       	ldd	r18, Y+2	; 0x02
    10aa:	3b 81       	ldd	r19, Y+3	; 0x03
    10ac:	2b 30       	cpi	r18, 0x0B	; 11
    10ae:	31 05       	cpc	r19, r1
    10b0:	0c f4       	brge	.+2      	; 0x10b4 <APP_displayMessage+0xc2>
    10b2:	51 c1       	rjmp	.+674    	; 0x1356 <APP_displayMessage+0x364>
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	9b 81       	ldd	r25, Y+3	; 0x03
    10b8:	8c 30       	cpi	r24, 0x0C	; 12
    10ba:	91 05       	cpc	r25, r1
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <APP_displayMessage+0xce>
    10be:	8d c1       	rjmp	.+794    	; 0x13da <APP_displayMessage+0x3e8>
    10c0:	ac c1       	rjmp	.+856    	; 0x141a <APP_displayMessage+0x428>
	{
		case MSG_FIRST_RUN:
		{
			LCD_moveCursor(ROW_0, COL_0);
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Hi! This is Your");
    10ca:	80 e6       	ldi	r24, 0x60	; 96
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_1, COL_0);
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("First Time Here!");
    10da:	81 e7       	ldi	r24, 0x71	; 113
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_2, COL_0);
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("It's a Door Lock");
    10ea:	82 e8       	ldi	r24, 0x82	; 130
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_3, COL_0);
    10f2:	83 e0       	ldi	r24, 0x03	; 3
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Security System.");
    10fa:	83 e9       	ldi	r24, 0x93	; 147
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
    1102:	8b c1       	rjmp	.+790    	; 0x141a <APP_displayMessage+0x428>
			break;
		}

		case MSG_PSWRD_INFO:
		{
			LCD_moveCursor(ROW_0, COL_0);
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("** Your Password");
    110c:	84 ea       	ldi	r24, 0xA4	; 164
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_1, COL_0);
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Should be Ranged");
    111c:	85 eb       	ldi	r24, 0xB5	; 181
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_2, COL_0);
    1124:	82 e0       	ldi	r24, 0x02	; 2
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("in (10000-99999)");
    112c:	86 ec       	ldi	r24, 0xC6	; 198
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_3, COL_0);
    1134:	83 e0       	ldi	r24, 0x03	; 3
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("and be 5-digits.");
    113c:	87 ed       	ldi	r24, 0xD7	; 215
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
    1144:	6a c1       	rjmp	.+724    	; 0x141a <APP_displayMessage+0x428>
			break;
		}

		case MSG_NEW_PSWRD:
		{
			LCD_moveCursor(ROW_0, COL_0);
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("** Here We Go **");
    114e:	88 ee       	ldi	r24, 0xE8	; 232
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_1, COL_0);
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Now, Use the Key");
    115e:	89 ef       	ldi	r24, 0xF9	; 249
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_2, COL_0);
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Pad to Enter the");
    116e:	8a e0       	ldi	r24, 0x0A	; 10
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_3, COL_0);
    1176:	83 e0       	ldi	r24, 0x03	; 3
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Password:       ");
    117e:	8b e1       	ldi	r24, 0x1B	; 27
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
    1186:	49 c1       	rjmp	.+658    	; 0x141a <APP_displayMessage+0x428>
			break;
		}

		case MSG_CFRM_PSWRD:
		{
			LCD_moveCursor(ROW_0, COL_0);
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("  Now, confirm  ");
    1190:	8c e2       	ldi	r24, 0x2C	; 44
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_1, COL_0);
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString(" Your Password! ");
    11a0:	8d e3       	ldi	r24, 0x3D	; 61
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_2, COL_0);
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("                ");
    11b0:	8e e4       	ldi	r24, 0x4E	; 78
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_3, COL_0);
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Password:       ");
    11c0:	8b e1       	ldi	r24, 0x1B	; 27
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
    11c8:	28 c1       	rjmp	.+592    	; 0x141a <APP_displayMessage+0x428>
			break;
		}

		case MSG_MTCH_PSWRD:
		{
			LCD_moveCursor(ROW_0, COL_0);
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("** Succussed ***");
    11d2:	8f e5       	ldi	r24, 0x5F	; 95
    11d4:	91 e0       	ldi	r25, 0x01	; 1
    11d6:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_1, COL_0);
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("  Your door is  ");
    11e2:	80 e7       	ldi	r24, 0x70	; 112
    11e4:	91 e0       	ldi	r25, 0x01	; 1
    11e6:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_2, COL_0);
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("  Secured with  ");
    11f2:	81 e8       	ldi	r24, 0x81	; 129
    11f4:	91 e0       	ldi	r25, 0x01	; 1
    11f6:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_3, COL_0);
    11fa:	83 e0       	ldi	r24, 0x03	; 3
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("  the password  ");
    1202:	82 e9       	ldi	r24, 0x92	; 146
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
    120a:	07 c1       	rjmp	.+526    	; 0x141a <APP_displayMessage+0x428>
			break;
		}

		case MSG_MSMT_PSWRD:
		{
			LCD_moveCursor(ROW_0, COL_0);
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("***  Failed  ***");
    1214:	83 ea       	ldi	r24, 0xA3	; 163
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_1, COL_0);
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Passwords aren't");
    1224:	84 eb       	ldi	r24, 0xB4	; 180
    1226:	91 e0       	ldi	r25, 0x01	; 1
    1228:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_2, COL_0);
    122c:	82 e0       	ldi	r24, 0x02	; 2
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Matching! Retype");
    1234:	85 ec       	ldi	r24, 0xC5	; 197
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_3, COL_0);
    123c:	83 e0       	ldi	r24, 0x03	; 3
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("The Password ...");
    1244:	86 ed       	ldi	r24, 0xD6	; 214
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
    124c:	e6 c0       	rjmp	.+460    	; 0x141a <APP_displayMessage+0x428>
			break;
		}

		case MSG_ENTR_PSWRD:
		{
			LCD_moveCursor(ROW_0, COL_0);
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Welcome Back! To");
    1256:	87 ee       	ldi	r24, 0xE7	; 231
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_1, COL_0);
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Open the Door,  ");
    1266:	88 ef       	ldi	r24, 0xF8	; 248
    1268:	91 e0       	ldi	r25, 0x01	; 1
    126a:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_2, COL_0);
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Please Enter the");
    1276:	89 e0       	ldi	r24, 0x09	; 9
    1278:	92 e0       	ldi	r25, 0x02	; 2
    127a:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_3, COL_0);
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Password:       ");
    1286:	8b e1       	ldi	r24, 0x1B	; 27
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
    128e:	c5 c0       	rjmp	.+394    	; 0x141a <APP_displayMessage+0x428>
			break;
		}

		case MSG_MAIN_MENU:
		{
			LCD_moveCursor(ROW_0, COL_0);
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Press ( + ) to: ");
    1298:	8a e1       	ldi	r24, 0x1A	; 26
    129a:	92 e0       	ldi	r25, 0x02	; 2
    129c:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_1, COL_0);
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Open the Door   ");
    12a8:	8b e2       	ldi	r24, 0x2B	; 43
    12aa:	92 e0       	ldi	r25, 0x02	; 2
    12ac:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_2, COL_0);
    12b0:	82 e0       	ldi	r24, 0x02	; 2
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Press ( - ) to: ");
    12b8:	8c e3       	ldi	r24, 0x3C	; 60
    12ba:	92 e0       	ldi	r25, 0x02	; 2
    12bc:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_3, COL_0);
    12c0:	83 e0       	ldi	r24, 0x03	; 3
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Change Password ");
    12c8:	8d e4       	ldi	r24, 0x4D	; 77
    12ca:	92 e0       	ldi	r25, 0x02	; 2
    12cc:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
    12d0:	a4 c0       	rjmp	.+328    	; 0x141a <APP_displayMessage+0x428>
			break;
		}

		case MSG_DOOR_OPEN:
		{
			LCD_moveCursor(ROW_0, COL_0);
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString(" Sure, The Door ");
    12da:	8e e5       	ldi	r24, 0x5E	; 94
    12dc:	92 e0       	ldi	r25, 0x02	; 2
    12de:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_1, COL_0);
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString(" Is Opening Now ");
    12ea:	8f e6       	ldi	r24, 0x6F	; 111
    12ec:	92 e0       	ldi	r25, 0x02	; 2
    12ee:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_2, COL_0);
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString(" for 15 Seconds ");
    12fa:	80 e8       	ldi	r24, 0x80	; 128
    12fc:	92 e0       	ldi	r25, 0x02	; 2
    12fe:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_3, COL_0);
    1302:	83 e0       	ldi	r24, 0x03	; 3
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("                ");
    130a:	8e e4       	ldi	r24, 0x4E	; 78
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
    1312:	83 c0       	rjmp	.+262    	; 0x141a <APP_displayMessage+0x428>
			break;
		}

		case MSG_DOOR_HOLD:
		{
			LCD_moveCursor(ROW_0, COL_0);
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString(" *The Door Will ");
    131c:	81 e9       	ldi	r24, 0x91	; 145
    131e:	92 e0       	ldi	r25, 0x02	; 2
    1320:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_1, COL_0);
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString(" Keep Open Mode ");
    132c:	82 ea       	ldi	r24, 0xA2	; 162
    132e:	92 e0       	ldi	r25, 0x02	; 2
    1330:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_2, COL_0);
    1334:	82 e0       	ldi	r24, 0x02	; 2
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("  for 3 Seconds ");
    133c:	83 eb       	ldi	r24, 0xB3	; 179
    133e:	92 e0       	ldi	r25, 0x02	; 2
    1340:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_3, COL_0);
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("    Hurry Up!   ");
    134c:	84 ec       	ldi	r24, 0xC4	; 196
    134e:	92 e0       	ldi	r25, 0x02	; 2
    1350:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
    1354:	62 c0       	rjmp	.+196    	; 0x141a <APP_displayMessage+0x428>
			break;
		}

		case MSG_DOOR_CLOS:
		{
			LCD_moveCursor(ROW_0, COL_0);
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString(" Oops, The Door ");
    135e:	85 ed       	ldi	r24, 0xD5	; 213
    1360:	92 e0       	ldi	r25, 0x02	; 2
    1362:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_1, COL_0);
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString(" is Closing Now ");
    136e:	86 ee       	ldi	r24, 0xE6	; 230
    1370:	92 e0       	ldi	r25, 0x02	; 2
    1372:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_2, COL_0);
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString(" for 15 Seconds ");
    137e:	80 e8       	ldi	r24, 0x80	; 128
    1380:	92 e0       	ldi	r25, 0x02	; 2
    1382:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_3, COL_0);
    1386:	83 e0       	ldi	r24, 0x03	; 3
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("                ");
    138e:	8e e4       	ldi	r24, 0x4E	; 78
    1390:	91 e0       	ldi	r25, 0x01	; 1
    1392:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
    1396:	41 c0       	rjmp	.+130    	; 0x141a <APP_displayMessage+0x428>
			break;
		}

		case MSG_WRNG_PSWRD:
		{
			LCD_moveCursor(ROW_0, COL_0);
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Invalid Password");
    13a0:	87 ef       	ldi	r24, 0xF7	; 247
    13a2:	92 e0       	ldi	r25, 0x02	; 2
    13a4:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_1, COL_0);
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Please Focus and");
    13b0:	88 e0       	ldi	r24, 0x08	; 8
    13b2:	93 e0       	ldi	r25, 0x03	; 3
    13b4:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_2, COL_0);
    13b8:	82 e0       	ldi	r24, 0x02	; 2
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Enter the Right ");
    13c0:	89 e1       	ldi	r24, 0x19	; 25
    13c2:	93 e0       	ldi	r25, 0x03	; 3
    13c4:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_3, COL_0);
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    13cc:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Password Again !");
    13d0:	8a e2       	ldi	r24, 0x2A	; 42
    13d2:	93 e0       	ldi	r25, 0x03	; 3
    13d4:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
    13d8:	20 c0       	rjmp	.+64     	; 0x141a <APP_displayMessage+0x428>
			break;
		}

		case MSG_LOCK_SYS:
		{
			LCD_moveCursor(ROW_0, COL_0);
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Suspected Trials");
    13e2:	8b e3       	ldi	r24, 0x3B	; 59
    13e4:	93 e0       	ldi	r25, 0x03	; 3
    13e6:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_1, COL_0);
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("================");
    13f2:	8c e4       	ldi	r24, 0x4C	; 76
    13f4:	93 e0       	ldi	r25, 0x03	; 3
    13f6:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_2, COL_0);
    13fa:	82 e0       	ldi	r24, 0x02	; 2
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("The Door will be");
    1402:	8d e5       	ldi	r24, 0x5D	; 93
    1404:	93 e0       	ldi	r25, 0x03	; 3
    1406:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			LCD_moveCursor(ROW_3, COL_0);
    140a:	83 e0       	ldi	r24, 0x03	; 3
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayString("Locked for 1 Min");
    1412:	8e e6       	ldi	r24, 0x6E	; 110
    1414:	93 e0       	ldi	r25, 0x03	; 3
    1416:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
			break;
		}
	}
}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <APP_vGetPasswordFromUser>:
 *					2. Do not enter any special character.
 *	\param	:	void.
 *	\return	:	void.
 **/
void APP_vGetPasswordFromUser(void)
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	62 97       	sbiw	r28, 0x12	; 18
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
	KEYPAD_numbersType	pressed_key;
	/* Used as index of for loop */
	passwordDigitsType	password_digit;

	/* Assign a zero initial value to the g_password */
	g_password = ZERO;
    143a:	10 92 ab 03 	sts	0x03AB, r1
    143e:	10 92 ac 03 	sts	0x03AC, r1
    1442:	10 92 ad 03 	sts	0x03AD, r1
    1446:	10 92 ae 03 	sts	0x03AE, r1
	/*
	 * For loop of five iteraations to get a 5 digit password from the user. See
	 * the discription of the "if condition TRUE case" to understand why the
	 * index started from 1 not 0.
	 */
	for(password_digit = DIGIT_1 ; password_digit <= DIGIT_5 ; password_digit++)
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	8f 87       	std	Y+15, r24	; 0x0f
    144e:	8d c1       	rjmp	.+794    	; 0x176a <APP_vGetPasswordFromUser+0x344>
	{
		/* Use KEYPAD driver to get the user input (Polling) */
		pressed_key = KEYPAD_getPressedKey();
    1450:	0e 94 2a 10 	call	0x2054	; 0x2054 <KEYPAD_getPressedKey>
    1454:	88 8b       	std	Y+16, r24	; 0x10

		/* Validating user's input, if rules were violated: */
		if(	(password_digit == DIGIT_1 	&& pressed_key == KP_ZERO)	||\
    1456:	8f 85       	ldd	r24, Y+15	; 0x0f
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	19 f4       	brne	.+6      	; 0x1462 <APP_vGetPasswordFromUser+0x3c>
    145c:	88 89       	ldd	r24, Y+16	; 0x10
    145e:	88 23       	and	r24, r24
    1460:	f1 f0       	breq	.+60     	; 0x149e <APP_vGetPasswordFromUser+0x78>
    1462:	88 89       	ldd	r24, Y+16	; 0x10
    1464:	88 23       	and	r24, r24
    1466:	f9 f0       	breq	.+62     	; 0x14a6 <APP_vGetPasswordFromUser+0x80>
    1468:	88 89       	ldd	r24, Y+16	; 0x10
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	e1 f0       	breq	.+56     	; 0x14a6 <APP_vGetPasswordFromUser+0x80>
    146e:	88 89       	ldd	r24, Y+16	; 0x10
    1470:	82 30       	cpi	r24, 0x02	; 2
    1472:	c9 f0       	breq	.+50     	; 0x14a6 <APP_vGetPasswordFromUser+0x80>
    1474:	88 89       	ldd	r24, Y+16	; 0x10
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	b1 f0       	breq	.+44     	; 0x14a6 <APP_vGetPasswordFromUser+0x80>
    147a:	88 89       	ldd	r24, Y+16	; 0x10
    147c:	84 30       	cpi	r24, 0x04	; 4
    147e:	99 f0       	breq	.+38     	; 0x14a6 <APP_vGetPasswordFromUser+0x80>
    1480:	88 89       	ldd	r24, Y+16	; 0x10
    1482:	85 30       	cpi	r24, 0x05	; 5
    1484:	81 f0       	breq	.+32     	; 0x14a6 <APP_vGetPasswordFromUser+0x80>
    1486:	88 89       	ldd	r24, Y+16	; 0x10
    1488:	86 30       	cpi	r24, 0x06	; 6
    148a:	69 f0       	breq	.+26     	; 0x14a6 <APP_vGetPasswordFromUser+0x80>
    148c:	88 89       	ldd	r24, Y+16	; 0x10
    148e:	87 30       	cpi	r24, 0x07	; 7
    1490:	51 f0       	breq	.+20     	; 0x14a6 <APP_vGetPasswordFromUser+0x80>
    1492:	88 89       	ldd	r24, Y+16	; 0x10
    1494:	88 30       	cpi	r24, 0x08	; 8
    1496:	39 f0       	breq	.+14     	; 0x14a6 <APP_vGetPasswordFromUser+0x80>
    1498:	88 89       	ldd	r24, Y+16	; 0x10
    149a:	89 30       	cpi	r24, 0x09	; 9
    149c:	21 f0       	breq	.+8      	; 0x14a6 <APP_vGetPasswordFromUser+0x80>
			 * then it will decremented to 0, and quits this for loop iteration.
			 * When it quit the for loop, it will be automatically incremented by
			 * one (the increment factor of the for loop) so it will return to the
			 * real current digit.
			 */
			password_digit--;
    149e:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a0:	81 50       	subi	r24, 0x01	; 1
    14a2:	8f 87       	std	Y+15, r24	; 0x0f
    14a4:	5f c1       	rjmp	.+702    	; 0x1764 <APP_vGetPasswordFromUser+0x33e>
		}
		/* If correct digit entered: */
		else
		{
			/* Switch on the digit to update the g_password as described in \brief */
			switch(password_digit)
    14a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	3a 8b       	std	Y+18, r19	; 0x12
    14ae:	29 8b       	std	Y+17, r18	; 0x11
    14b0:	49 89       	ldd	r20, Y+17	; 0x11
    14b2:	5a 89       	ldd	r21, Y+18	; 0x12
    14b4:	42 30       	cpi	r20, 0x02	; 2
    14b6:	51 05       	cpc	r21, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <APP_vGetPasswordFromUser+0x96>
    14ba:	3e c0       	rjmp	.+124    	; 0x1538 <APP_vGetPasswordFromUser+0x112>
    14bc:	89 89       	ldd	r24, Y+17	; 0x11
    14be:	9a 89       	ldd	r25, Y+18	; 0x12
    14c0:	83 30       	cpi	r24, 0x03	; 3
    14c2:	91 05       	cpc	r25, r1
    14c4:	64 f4       	brge	.+24     	; 0x14de <APP_vGetPasswordFromUser+0xb8>
    14c6:	29 89       	ldd	r18, Y+17	; 0x11
    14c8:	3a 89       	ldd	r19, Y+18	; 0x12
    14ca:	21 15       	cp	r18, r1
    14cc:	31 05       	cpc	r19, r1
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <APP_vGetPasswordFromUser+0xac>
    14d0:	c1 c0       	rjmp	.+386    	; 0x1654 <APP_vGetPasswordFromUser+0x22e>
    14d2:	49 89       	ldd	r20, Y+17	; 0x11
    14d4:	5a 89       	ldd	r21, Y+18	; 0x12
    14d6:	41 30       	cpi	r20, 0x01	; 1
    14d8:	51 05       	cpc	r21, r1
    14da:	a1 f0       	breq	.+40     	; 0x1504 <APP_vGetPasswordFromUser+0xde>
    14dc:	bb c0       	rjmp	.+374    	; 0x1654 <APP_vGetPasswordFromUser+0x22e>
    14de:	89 89       	ldd	r24, Y+17	; 0x11
    14e0:	9a 89       	ldd	r25, Y+18	; 0x12
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	91 05       	cpc	r25, r1
    14e6:	09 f4       	brne	.+2      	; 0x14ea <APP_vGetPasswordFromUser+0xc4>
    14e8:	75 c0       	rjmp	.+234    	; 0x15d4 <APP_vGetPasswordFromUser+0x1ae>
    14ea:	29 89       	ldd	r18, Y+17	; 0x11
    14ec:	3a 89       	ldd	r19, Y+18	; 0x12
    14ee:	24 30       	cpi	r18, 0x04	; 4
    14f0:	31 05       	cpc	r19, r1
    14f2:	0c f4       	brge	.+2      	; 0x14f6 <APP_vGetPasswordFromUser+0xd0>
    14f4:	48 c0       	rjmp	.+144    	; 0x1586 <APP_vGetPasswordFromUser+0x160>
    14f6:	49 89       	ldd	r20, Y+17	; 0x11
    14f8:	5a 89       	ldd	r21, Y+18	; 0x12
    14fa:	45 30       	cpi	r20, 0x05	; 5
    14fc:	51 05       	cpc	r21, r1
    14fe:	09 f4       	brne	.+2      	; 0x1502 <APP_vGetPasswordFromUser+0xdc>
    1500:	90 c0       	rjmp	.+288    	; 0x1622 <APP_vGetPasswordFromUser+0x1fc>
    1502:	a8 c0       	rjmp	.+336    	; 0x1654 <APP_vGetPasswordFromUser+0x22e>
					/* DO NOTHING, anyway it will be incremented and restart from DIGIT_1 */
					break;
				}
				case DIGIT_1:
				{
					g_password  =  pressed_key * MULTIPLIER_10000;
    1504:	88 89       	ldd	r24, Y+16	; 0x10
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	80 e1       	ldi	r24, 0x10	; 16
    150c:	97 e2       	ldi	r25, 0x27	; 39
    150e:	ac 01       	movw	r20, r24
    1510:	24 9f       	mul	r18, r20
    1512:	c0 01       	movw	r24, r0
    1514:	25 9f       	mul	r18, r21
    1516:	90 0d       	add	r25, r0
    1518:	34 9f       	mul	r19, r20
    151a:	90 0d       	add	r25, r0
    151c:	11 24       	eor	r1, r1
    151e:	aa 27       	eor	r26, r26
    1520:	97 fd       	sbrc	r25, 7
    1522:	a0 95       	com	r26
    1524:	ba 2f       	mov	r27, r26
    1526:	80 93 ab 03 	sts	0x03AB, r24
    152a:	90 93 ac 03 	sts	0x03AC, r25
    152e:	a0 93 ad 03 	sts	0x03AD, r26
    1532:	b0 93 ae 03 	sts	0x03AE, r27
    1536:	8e c0       	rjmp	.+284    	; 0x1654 <APP_vGetPasswordFromUser+0x22e>
					break;
				}

				case DIGIT_2:
				{
					g_password +=  pressed_key * MULTIPLIER_1000;
    1538:	88 89       	ldd	r24, Y+16	; 0x10
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	88 ee       	ldi	r24, 0xE8	; 232
    1540:	93 e0       	ldi	r25, 0x03	; 3
    1542:	ac 01       	movw	r20, r24
    1544:	24 9f       	mul	r18, r20
    1546:	c0 01       	movw	r24, r0
    1548:	25 9f       	mul	r18, r21
    154a:	90 0d       	add	r25, r0
    154c:	34 9f       	mul	r19, r20
    154e:	90 0d       	add	r25, r0
    1550:	11 24       	eor	r1, r1
    1552:	9c 01       	movw	r18, r24
    1554:	44 27       	eor	r20, r20
    1556:	37 fd       	sbrc	r19, 7
    1558:	40 95       	com	r20
    155a:	54 2f       	mov	r21, r20
    155c:	80 91 ab 03 	lds	r24, 0x03AB
    1560:	90 91 ac 03 	lds	r25, 0x03AC
    1564:	a0 91 ad 03 	lds	r26, 0x03AD
    1568:	b0 91 ae 03 	lds	r27, 0x03AE
    156c:	82 0f       	add	r24, r18
    156e:	93 1f       	adc	r25, r19
    1570:	a4 1f       	adc	r26, r20
    1572:	b5 1f       	adc	r27, r21
    1574:	80 93 ab 03 	sts	0x03AB, r24
    1578:	90 93 ac 03 	sts	0x03AC, r25
    157c:	a0 93 ad 03 	sts	0x03AD, r26
    1580:	b0 93 ae 03 	sts	0x03AE, r27
    1584:	67 c0       	rjmp	.+206    	; 0x1654 <APP_vGetPasswordFromUser+0x22e>
					break;
				}

				case DIGIT_3:
				{
					g_password +=  pressed_key * MULTIPLIER_100;
    1586:	88 89       	ldd	r24, Y+16	; 0x10
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	84 e6       	ldi	r24, 0x64	; 100
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	ac 01       	movw	r20, r24
    1592:	24 9f       	mul	r18, r20
    1594:	c0 01       	movw	r24, r0
    1596:	25 9f       	mul	r18, r21
    1598:	90 0d       	add	r25, r0
    159a:	34 9f       	mul	r19, r20
    159c:	90 0d       	add	r25, r0
    159e:	11 24       	eor	r1, r1
    15a0:	9c 01       	movw	r18, r24
    15a2:	44 27       	eor	r20, r20
    15a4:	37 fd       	sbrc	r19, 7
    15a6:	40 95       	com	r20
    15a8:	54 2f       	mov	r21, r20
    15aa:	80 91 ab 03 	lds	r24, 0x03AB
    15ae:	90 91 ac 03 	lds	r25, 0x03AC
    15b2:	a0 91 ad 03 	lds	r26, 0x03AD
    15b6:	b0 91 ae 03 	lds	r27, 0x03AE
    15ba:	82 0f       	add	r24, r18
    15bc:	93 1f       	adc	r25, r19
    15be:	a4 1f       	adc	r26, r20
    15c0:	b5 1f       	adc	r27, r21
    15c2:	80 93 ab 03 	sts	0x03AB, r24
    15c6:	90 93 ac 03 	sts	0x03AC, r25
    15ca:	a0 93 ad 03 	sts	0x03AD, r26
    15ce:	b0 93 ae 03 	sts	0x03AE, r27
    15d2:	40 c0       	rjmp	.+128    	; 0x1654 <APP_vGetPasswordFromUser+0x22e>
					break;
				}

				case DIGIT_4:
				{
					g_password +=  pressed_key * MULTIPLIER_10;
    15d4:	88 89       	ldd	r24, Y+16	; 0x10
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	9c 01       	movw	r18, r24
    15dc:	22 0f       	add	r18, r18
    15de:	33 1f       	adc	r19, r19
    15e0:	c9 01       	movw	r24, r18
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	82 0f       	add	r24, r18
    15ec:	93 1f       	adc	r25, r19
    15ee:	9c 01       	movw	r18, r24
    15f0:	44 27       	eor	r20, r20
    15f2:	37 fd       	sbrc	r19, 7
    15f4:	40 95       	com	r20
    15f6:	54 2f       	mov	r21, r20
    15f8:	80 91 ab 03 	lds	r24, 0x03AB
    15fc:	90 91 ac 03 	lds	r25, 0x03AC
    1600:	a0 91 ad 03 	lds	r26, 0x03AD
    1604:	b0 91 ae 03 	lds	r27, 0x03AE
    1608:	82 0f       	add	r24, r18
    160a:	93 1f       	adc	r25, r19
    160c:	a4 1f       	adc	r26, r20
    160e:	b5 1f       	adc	r27, r21
    1610:	80 93 ab 03 	sts	0x03AB, r24
    1614:	90 93 ac 03 	sts	0x03AC, r25
    1618:	a0 93 ad 03 	sts	0x03AD, r26
    161c:	b0 93 ae 03 	sts	0x03AE, r27
    1620:	19 c0       	rjmp	.+50     	; 0x1654 <APP_vGetPasswordFromUser+0x22e>
					break;
				}

				case DIGIT_5:
				{
					g_password +=  pressed_key * MULTIPLIER_1;
    1622:	88 89       	ldd	r24, Y+16	; 0x10
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	40 e0       	ldi	r20, 0x00	; 0
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	80 91 ab 03 	lds	r24, 0x03AB
    1630:	90 91 ac 03 	lds	r25, 0x03AC
    1634:	a0 91 ad 03 	lds	r26, 0x03AD
    1638:	b0 91 ae 03 	lds	r27, 0x03AE
    163c:	82 0f       	add	r24, r18
    163e:	93 1f       	adc	r25, r19
    1640:	a4 1f       	adc	r26, r20
    1642:	b5 1f       	adc	r27, r21
    1644:	80 93 ab 03 	sts	0x03AB, r24
    1648:	90 93 ac 03 	sts	0x03AC, r25
    164c:	a0 93 ad 03 	sts	0x03AD, r26
    1650:	b0 93 ae 03 	sts	0x03AE, r27
			 * The password always have the same LCD location, a single row and
			 * a continous columns. Thus, we can simply display the asterisk and
			 * the entered digit on the 1st digit column location plus the current
			 * digit index as described in \brief.
			 */
			LCD_moveCursor(PASSWORD_ROW, (PASSWORD_COL + password_digit));
    1654:	8f 85       	ldd	r24, Y+15	; 0x0f
    1656:	98 2f       	mov	r25, r24
    1658:	96 5f       	subi	r25, 0xF6	; 246
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	69 2f       	mov	r22, r25
    165e:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_intgerToString(pressed_key);
    1662:	88 89       	ldd	r24, Y+16	; 0x10
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <LCD_intgerToString>
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a8 e4       	ldi	r26, 0x48	; 72
    1672:	b2 e4       	ldi	r27, 0x42	; 66
    1674:	8b 87       	std	Y+11, r24	; 0x0b
    1676:	9c 87       	std	Y+12, r25	; 0x0c
    1678:	ad 87       	std	Y+13, r26	; 0x0d
    167a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167c:	6b 85       	ldd	r22, Y+11	; 0x0b
    167e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1680:	8d 85       	ldd	r24, Y+13	; 0x0d
    1682:	9e 85       	ldd	r25, Y+14	; 0x0e
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	4a ef       	ldi	r20, 0xFA	; 250
    168a:	54 e4       	ldi	r21, 0x44	; 68
    168c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	8f 83       	std	Y+7, r24	; 0x07
    1696:	98 87       	std	Y+8, r25	; 0x08
    1698:	a9 87       	std	Y+9, r26	; 0x09
    169a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    169c:	6f 81       	ldd	r22, Y+7	; 0x07
    169e:	78 85       	ldd	r23, Y+8	; 0x08
    16a0:	89 85       	ldd	r24, Y+9	; 0x09
    16a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e8       	ldi	r20, 0x80	; 128
    16aa:	5f e3       	ldi	r21, 0x3F	; 63
    16ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b0:	88 23       	and	r24, r24
    16b2:	2c f4       	brge	.+10     	; 0x16be <APP_vGetPasswordFromUser+0x298>
		__ticks = 1;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9e 83       	std	Y+6, r25	; 0x06
    16ba:	8d 83       	std	Y+5, r24	; 0x05
    16bc:	3f c0       	rjmp	.+126    	; 0x173c <APP_vGetPasswordFromUser+0x316>
	else if (__tmp > 65535)
    16be:	6f 81       	ldd	r22, Y+7	; 0x07
    16c0:	78 85       	ldd	r23, Y+8	; 0x08
    16c2:	89 85       	ldd	r24, Y+9	; 0x09
    16c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	3f ef       	ldi	r19, 0xFF	; 255
    16ca:	4f e7       	ldi	r20, 0x7F	; 127
    16cc:	57 e4       	ldi	r21, 0x47	; 71
    16ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d2:	18 16       	cp	r1, r24
    16d4:	4c f5       	brge	.+82     	; 0x1728 <APP_vGetPasswordFromUser+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16da:	8d 85       	ldd	r24, Y+13	; 0x0d
    16dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e2       	ldi	r20, 0x20	; 32
    16e4:	51 e4       	ldi	r21, 0x41	; 65
    16e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	9e 83       	std	Y+6, r25	; 0x06
    16fc:	8d 83       	std	Y+5, r24	; 0x05
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <APP_vGetPasswordFromUser+0x2f8>
    1700:	88 ec       	ldi	r24, 0xC8	; 200
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	9c 83       	std	Y+4, r25	; 0x04
    1706:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	9c 81       	ldd	r25, Y+4	; 0x04
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <APP_vGetPasswordFromUser+0x2e6>
    1710:	9c 83       	std	Y+4, r25	; 0x04
    1712:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	9e 81       	ldd	r25, Y+6	; 0x06
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	9e 83       	std	Y+6, r25	; 0x06
    171c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	69 f7       	brne	.-38     	; 0x1700 <APP_vGetPasswordFromUser+0x2da>
    1726:	14 c0       	rjmp	.+40     	; 0x1750 <APP_vGetPasswordFromUser+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1728:	6f 81       	ldd	r22, Y+7	; 0x07
    172a:	78 85       	ldd	r23, Y+8	; 0x08
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9e 83       	std	Y+6, r25	; 0x06
    173a:	8d 83       	std	Y+5, r24	; 0x05
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	9a 83       	std	Y+2, r25	; 0x02
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <APP_vGetPasswordFromUser+0x322>
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	89 83       	std	Y+1, r24	; 0x01
			DELAY_FIFTY_MS;
			LCD_moveCursor(PASSWORD_ROW, (PASSWORD_COL + password_digit));
    1750:	8f 85       	ldd	r24, Y+15	; 0x0f
    1752:	98 2f       	mov	r25, r24
    1754:	96 5f       	subi	r25, 0xF6	; 246
    1756:	83 e0       	ldi	r24, 0x03	; 3
    1758:	69 2f       	mov	r22, r25
    175a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
			LCD_displayCharacter('*');
    175e:	8a e2       	ldi	r24, 0x2A	; 42
    1760:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_displayCharacter>
	/*
	 * For loop of five iteraations to get a 5 digit password from the user. See
	 * the discription of the "if condition TRUE case" to understand why the
	 * index started from 1 not 0.
	 */
	for(password_digit = DIGIT_1 ; password_digit <= DIGIT_5 ; password_digit++)
    1764:	8f 85       	ldd	r24, Y+15	; 0x0f
    1766:	8f 5f       	subi	r24, 0xFF	; 255
    1768:	8f 87       	std	Y+15, r24	; 0x0f
    176a:	8f 85       	ldd	r24, Y+15	; 0x0f
    176c:	86 30       	cpi	r24, 0x06	; 6
    176e:	08 f4       	brcc	.+2      	; 0x1772 <APP_vGetPasswordFromUser+0x34c>
    1770:	6f ce       	rjmp	.-802    	; 0x1450 <APP_vGetPasswordFromUser+0x2a>
			DELAY_FIFTY_MS;
			LCD_moveCursor(PASSWORD_ROW, (PASSWORD_COL + password_digit));
			LCD_displayCharacter('*');
		}
	}
}
    1772:	62 96       	adiw	r28, 0x12	; 18
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <APP_u8GetCommandFromUser>:
 *				change the password) and return this command to be used later.
 *	\param 	:	void.
 *	\return	:	The entered command by user.
 **/
uint8 APP_u8GetCommandFromUser(void)
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	0f 92       	push	r0
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
	uint8 user_command;

	/* Polling until get a valid input only using do while loop */
	do
	{
		user_command = KEYPAD_getPressedKey();
    178e:	0e 94 2a 10 	call	0x2054	; 0x2054 <KEYPAD_getPressedKey>
    1792:	89 83       	std	Y+1, r24	; 0x01
	} while ((user_command != CMD_OPN_DOOR) && (user_command != CMD_CHNG_PSWRD));
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	8b 32       	cpi	r24, 0x2B	; 43
    1798:	19 f0       	breq	.+6      	; 0x17a0 <APP_u8GetCommandFromUser+0x1c>
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	8d 32       	cpi	r24, 0x2D	; 45
    179e:	b9 f7       	brne	.-18     	; 0x178e <APP_u8GetCommandFromUser+0xa>

	/* Return the command */
	return user_command;
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <APP_vUpdateTXFrameThenSendUART>:
 *	\param 1-5	:	The elements of TX frame.
 *	\return		:	void.
 **/
void APP_vUpdateTXFrameThenSendUART(frameType byte_0, frameType byte_1, frameType byte_2,\
									frameType byte_3, frameType byte_4)
{
    17aa:	0f 93       	push	r16
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <APP_vUpdateTXFrameThenSendUART+0x8>
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <APP_vUpdateTXFrameThenSendUART+0xa>
    17b4:	0f 92       	push	r0
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	6a 83       	std	Y+2, r22	; 0x02
    17be:	4b 83       	std	Y+3, r20	; 0x03
    17c0:	2c 83       	std	Y+4, r18	; 0x04
    17c2:	0d 83       	std	Y+5, r16	; 0x05
    g_TX_frame[BYTE_0_CONTROL]		= byte_0;
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	80 93 af 03 	sts	0x03AF, r24
    g_TX_frame[BYTE_1_PASS0_OR_CMD]	= byte_1;
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	80 93 b0 03 	sts	0x03B0, r24
    g_TX_frame[BYTE_2_PASS1]		= byte_2;
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	80 93 b1 03 	sts	0x03B1, r24
    g_TX_frame[BYTE_3_PASS2]		= byte_3;
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	80 93 b2 03 	sts	0x03B2, r24
    g_TX_frame[BYTE_4_PASS3]		= byte_4;
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	80 93 b3 03 	sts	0x03B3, r24

    UART_sendGolabalFrame(g_TX_frame, TX_FRAME_SIZE);
    17e2:	8f ea       	ldi	r24, 0xAF	; 175
    17e4:	93 e0       	ldi	r25, 0x03	; 3
    17e6:	65 e0       	ldi	r22, 0x05	; 5
    17e8:	0e 94 3d 1a 	call	0x347a	; 0x347a <UART_sendGolabalFrame>
}
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	0f 91       	pop	r16
    17fc:	08 95       	ret

000017fe <APP_vTimer1NormalCallback>:
 *				desired time have been completed. \see timer1.c for more information.
 *	\param	:	void.
 *	\return	:	void.
 **/
void APP_vTimer1NormalCallback(void)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	2b 97       	sbiw	r28, 0x0b	; 11
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Every time ISR occurs, we should deInit the timer then reInit
	 * it with the same configuration.
	 */
	Timer1_deInit();
    1812:	0e 94 77 18 	call	0x30ee	; 0x30ee <Timer1_deInit>
	Timer1_ConfigType timer1_configurations = {NORMAL, F_CPU_256, PRELOAD, NOT_CTC};
    1816:	ce 01       	movw	r24, r28
    1818:	01 96       	adiw	r24, 0x01	; 1
    181a:	98 87       	std	Y+8, r25	; 0x08
    181c:	8f 83       	std	Y+7, r24	; 0x07
    181e:	ee e8       	ldi	r30, 0x8E	; 142
    1820:	f3 e0       	ldi	r31, 0x03	; 3
    1822:	fa 87       	std	Y+10, r31	; 0x0a
    1824:	e9 87       	std	Y+9, r30	; 0x09
    1826:	f6 e0       	ldi	r31, 0x06	; 6
    1828:	fb 87       	std	Y+11, r31	; 0x0b
    182a:	e9 85       	ldd	r30, Y+9	; 0x09
    182c:	fa 85       	ldd	r31, Y+10	; 0x0a
    182e:	00 80       	ld	r0, Z
    1830:	89 85       	ldd	r24, Y+9	; 0x09
    1832:	9a 85       	ldd	r25, Y+10	; 0x0a
    1834:	01 96       	adiw	r24, 0x01	; 1
    1836:	9a 87       	std	Y+10, r25	; 0x0a
    1838:	89 87       	std	Y+9, r24	; 0x09
    183a:	ef 81       	ldd	r30, Y+7	; 0x07
    183c:	f8 85       	ldd	r31, Y+8	; 0x08
    183e:	00 82       	st	Z, r0
    1840:	8f 81       	ldd	r24, Y+7	; 0x07
    1842:	98 85       	ldd	r25, Y+8	; 0x08
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	98 87       	std	Y+8, r25	; 0x08
    1848:	8f 83       	std	Y+7, r24	; 0x07
    184a:	9b 85       	ldd	r25, Y+11	; 0x0b
    184c:	91 50       	subi	r25, 0x01	; 1
    184e:	9b 87       	std	Y+11, r25	; 0x0b
    1850:	eb 85       	ldd	r30, Y+11	; 0x0b
    1852:	ee 23       	and	r30, r30
    1854:	51 f7       	brne	.-44     	; 0x182a <APP_vTimer1NormalCallback+0x2c>
	Timer1_init(&timer1_configurations);
    1856:	ce 01       	movw	r24, r28
    1858:	01 96       	adiw	r24, 0x01	; 1
    185a:	0e 94 05 18 	call	0x300a	; 0x300a <Timer1_init>

	/* Decrement the global timer seconds counter */
	timer1_counter--;
    185e:	80 91 ba 03 	lds	r24, 0x03BA
    1862:	81 50       	subi	r24, 0x01	; 1
    1864:	80 93 ba 03 	sts	0x03BA, r24
}
    1868:	2b 96       	adiw	r28, 0x0b	; 11
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <APP_vTimer1CTCCallback>:
 *				and de-init the timer. \see timer1.c for more information.
 *	\param	:	void.
 *	\return	:	void.
 **/
void APP_vTimer1CTCCallback(void)
{
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
	/* Decrement the timer counter until zero, then deinit the timer1 */
	if(--timer1_counter == ZERO)
    1882:	80 91 ba 03 	lds	r24, 0x03BA
    1886:	81 50       	subi	r24, 0x01	; 1
    1888:	80 93 ba 03 	sts	0x03BA, r24
    188c:	80 91 ba 03 	lds	r24, 0x03BA
    1890:	88 23       	and	r24, r24
    1892:	11 f4       	brne	.+4      	; 0x1898 <APP_vTimer1CTCCallback+0x1e>
	{
		Timer1_deInit();
    1894:	0e 94 77 18 	call	0x30ee	; 0x30ee <Timer1_deInit>
	}
}
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <APP_vUartRxCallback>:
 *					3: Raise up the RX flag.
 *	\param	:	void.
 *	\return	:	void.
 **/
void APP_vUartRxCallback(void)
{
    189e:	ff 92       	push	r15
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
	 * Assign each received byte to its corresponding index in RX frame.
	 * It increments the value of frame_index by 1 after its current
	 * value has been used. This means that the value of frame_index
	 * is increased after the assignment operation.
	 */
	g_RX_frame[frame_index++] = UART_recieveByte();
    18ac:	f0 90 a0 03 	lds	r15, 0x03A0
    18b0:	0f 2d       	mov	r16, r15
    18b2:	10 e0       	ldi	r17, 0x00	; 0
    18b4:	0e 94 c2 19 	call	0x3384	; 0x3384 <UART_recieveByte>
    18b8:	f8 01       	movw	r30, r16
    18ba:	ec 54       	subi	r30, 0x4C	; 76
    18bc:	fc 4f       	sbci	r31, 0xFC	; 252
    18be:	80 83       	st	Z, r24
    18c0:	8f 2d       	mov	r24, r15
    18c2:	8f 5f       	subi	r24, 0xFF	; 255
    18c4:	80 93 a0 03 	sts	0x03A0, r24

	/* Raise up RX flag when five bytes been completely recieved */
	if(--g_bytes_recieved == ZERO)
    18c8:	80 91 a9 03 	lds	r24, 0x03A9
    18cc:	81 50       	subi	r24, 0x01	; 1
    18ce:	80 93 a9 03 	sts	0x03A9, r24
    18d2:	80 91 a9 03 	lds	r24, 0x03A9
    18d6:	88 23       	and	r24, r24
    18d8:	41 f4       	brne	.+16     	; 0x18ea <APP_vUartRxCallback+0x4c>
	{
		g_RX_ready_flag = TRUE;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	80 93 b6 03 	sts	0x03B6, r24

		/* Reset the frame index */
		frame_index = ZERO;
    18e0:	10 92 a0 03 	sts	0x03A0, r1

		/* Reset to the initial value of number of bytes to recieve */
		g_bytes_recieved = RX_FRAME_SIZE;
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	80 93 a9 03 	sts	0x03A9, r24
	}
}
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	ff 90       	pop	r15
    18f4:	08 95       	ret

000018f6 <APP_vINT2softResetCallBack>:
 *				with the INT2 of CONTROL_ECU; thus, they will reset together.
 *	\param	:	void.
 *	\return	:	void.
 **/
void APP_vINT2softResetCallBack(void)
{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
	/* Use assembly instruction to jump to RESET address 0 */
	asm volatile("jmp 0");
    18fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
}
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	00 d0       	rcall	.+0      	; 0x190e <GPIO_setupPinDirection+0x6>
    190e:	00 d0       	rcall	.+0      	; 0x1910 <GPIO_setupPinDirection+0x8>
    1910:	0f 92       	push	r0
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	6a 83       	std	Y+2, r22	; 0x02
    191a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	88 30       	cpi	r24, 0x08	; 8
    1920:	08 f0       	brcs	.+2      	; 0x1924 <GPIO_setupPinDirection+0x1c>
    1922:	d5 c0       	rjmp	.+426    	; 0x1ace <GPIO_setupPinDirection+0x1c6>
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	84 30       	cpi	r24, 0x04	; 4
    1928:	08 f0       	brcs	.+2      	; 0x192c <GPIO_setupPinDirection+0x24>
    192a:	d1 c0       	rjmp	.+418    	; 0x1ace <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	3d 83       	std	Y+5, r19	; 0x05
    1934:	2c 83       	std	Y+4, r18	; 0x04
    1936:	8c 81       	ldd	r24, Y+4	; 0x04
    1938:	9d 81       	ldd	r25, Y+5	; 0x05
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	91 05       	cpc	r25, r1
    193e:	09 f4       	brne	.+2      	; 0x1942 <GPIO_setupPinDirection+0x3a>
    1940:	43 c0       	rjmp	.+134    	; 0x19c8 <GPIO_setupPinDirection+0xc0>
    1942:	2c 81       	ldd	r18, Y+4	; 0x04
    1944:	3d 81       	ldd	r19, Y+5	; 0x05
    1946:	22 30       	cpi	r18, 0x02	; 2
    1948:	31 05       	cpc	r19, r1
    194a:	2c f4       	brge	.+10     	; 0x1956 <GPIO_setupPinDirection+0x4e>
    194c:	8c 81       	ldd	r24, Y+4	; 0x04
    194e:	9d 81       	ldd	r25, Y+5	; 0x05
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	71 f0       	breq	.+28     	; 0x1970 <GPIO_setupPinDirection+0x68>
    1954:	bc c0       	rjmp	.+376    	; 0x1ace <GPIO_setupPinDirection+0x1c6>
    1956:	2c 81       	ldd	r18, Y+4	; 0x04
    1958:	3d 81       	ldd	r19, Y+5	; 0x05
    195a:	22 30       	cpi	r18, 0x02	; 2
    195c:	31 05       	cpc	r19, r1
    195e:	09 f4       	brne	.+2      	; 0x1962 <GPIO_setupPinDirection+0x5a>
    1960:	5f c0       	rjmp	.+190    	; 0x1a20 <GPIO_setupPinDirection+0x118>
    1962:	8c 81       	ldd	r24, Y+4	; 0x04
    1964:	9d 81       	ldd	r25, Y+5	; 0x05
    1966:	83 30       	cpi	r24, 0x03	; 3
    1968:	91 05       	cpc	r25, r1
    196a:	09 f4       	brne	.+2      	; 0x196e <GPIO_setupPinDirection+0x66>
    196c:	85 c0       	rjmp	.+266    	; 0x1a78 <GPIO_setupPinDirection+0x170>
    196e:	af c0       	rjmp	.+350    	; 0x1ace <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	81 30       	cpi	r24, 0x01	; 1
    1974:	a1 f4       	brne	.+40     	; 0x199e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1976:	aa e3       	ldi	r26, 0x3A	; 58
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	ea e3       	ldi	r30, 0x3A	; 58
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	48 2f       	mov	r20, r24
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	02 2e       	mov	r0, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <GPIO_setupPinDirection+0x8c>
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	0a 94       	dec	r0
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <GPIO_setupPinDirection+0x88>
    1998:	84 2b       	or	r24, r20
    199a:	8c 93       	st	X, r24
    199c:	98 c0       	rjmp	.+304    	; 0x1ace <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    199e:	aa e3       	ldi	r26, 0x3A	; 58
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	ea e3       	ldi	r30, 0x3A	; 58
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	48 2f       	mov	r20, r24
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 2e       	mov	r0, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <GPIO_setupPinDirection+0xb4>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <GPIO_setupPinDirection+0xb0>
    19c0:	80 95       	com	r24
    19c2:	84 23       	and	r24, r20
    19c4:	8c 93       	st	X, r24
    19c6:	83 c0       	rjmp	.+262    	; 0x1ace <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	a1 f4       	brne	.+40     	; 0x19f6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    19ce:	a7 e3       	ldi	r26, 0x37	; 55
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e7 e3       	ldi	r30, 0x37	; 55
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	48 2f       	mov	r20, r24
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	02 2e       	mov	r0, r18
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <GPIO_setupPinDirection+0xe4>
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	0a 94       	dec	r0
    19ee:	e2 f7       	brpl	.-8      	; 0x19e8 <GPIO_setupPinDirection+0xe0>
    19f0:	84 2b       	or	r24, r20
    19f2:	8c 93       	st	X, r24
    19f4:	6c c0       	rjmp	.+216    	; 0x1ace <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    19f6:	a7 e3       	ldi	r26, 0x37	; 55
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e7 e3       	ldi	r30, 0x37	; 55
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	48 2f       	mov	r20, r24
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 2e       	mov	r0, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <GPIO_setupPinDirection+0x10c>
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	0a 94       	dec	r0
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <GPIO_setupPinDirection+0x108>
    1a18:	80 95       	com	r24
    1a1a:	84 23       	and	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	57 c0       	rjmp	.+174    	; 0x1ace <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	81 30       	cpi	r24, 0x01	; 1
    1a24:	a1 f4       	brne	.+40     	; 0x1a4e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1a26:	a4 e3       	ldi	r26, 0x34	; 52
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e4 e3       	ldi	r30, 0x34	; 52
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	48 2f       	mov	r20, r24
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	02 2e       	mov	r0, r18
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <GPIO_setupPinDirection+0x13c>
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	0a 94       	dec	r0
    1a46:	e2 f7       	brpl	.-8      	; 0x1a40 <GPIO_setupPinDirection+0x138>
    1a48:	84 2b       	or	r24, r20
    1a4a:	8c 93       	st	X, r24
    1a4c:	40 c0       	rjmp	.+128    	; 0x1ace <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1a4e:	a4 e3       	ldi	r26, 0x34	; 52
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e4 e3       	ldi	r30, 0x34	; 52
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	48 2f       	mov	r20, r24
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	02 2e       	mov	r0, r18
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <GPIO_setupPinDirection+0x164>
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	0a 94       	dec	r0
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <GPIO_setupPinDirection+0x160>
    1a70:	80 95       	com	r24
    1a72:	84 23       	and	r24, r20
    1a74:	8c 93       	st	X, r24
    1a76:	2b c0       	rjmp	.+86     	; 0x1ace <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	a1 f4       	brne	.+40     	; 0x1aa6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a7e:	a1 e3       	ldi	r26, 0x31	; 49
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e1 e3       	ldi	r30, 0x31	; 49
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	48 2f       	mov	r20, r24
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	02 2e       	mov	r0, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <GPIO_setupPinDirection+0x194>
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	0a 94       	dec	r0
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <GPIO_setupPinDirection+0x190>
    1aa0:	84 2b       	or	r24, r20
    1aa2:	8c 93       	st	X, r24
    1aa4:	14 c0       	rjmp	.+40     	; 0x1ace <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1aa6:	a1 e3       	ldi	r26, 0x31	; 49
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e1 e3       	ldi	r30, 0x31	; 49
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	02 2e       	mov	r0, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <GPIO_setupPinDirection+0x1bc>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	0a 94       	dec	r0
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <GPIO_setupPinDirection+0x1b8>
    1ac8:	80 95       	com	r24
    1aca:	84 23       	and	r24, r20
    1acc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <GPIO_writePin+0x6>
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <GPIO_writePin+0x8>
    1ae6:	0f 92       	push	r0
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	6a 83       	std	Y+2, r22	; 0x02
    1af0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	88 30       	cpi	r24, 0x08	; 8
    1af6:	08 f0       	brcs	.+2      	; 0x1afa <GPIO_writePin+0x1c>
    1af8:	d5 c0       	rjmp	.+426    	; 0x1ca4 <GPIO_writePin+0x1c6>
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	84 30       	cpi	r24, 0x04	; 4
    1afe:	08 f0       	brcs	.+2      	; 0x1b02 <GPIO_writePin+0x24>
    1b00:	d1 c0       	rjmp	.+418    	; 0x1ca4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	3d 83       	std	Y+5, r19	; 0x05
    1b0a:	2c 83       	std	Y+4, r18	; 0x04
    1b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	91 05       	cpc	r25, r1
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <GPIO_writePin+0x3a>
    1b16:	43 c0       	rjmp	.+134    	; 0x1b9e <GPIO_writePin+0xc0>
    1b18:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1c:	22 30       	cpi	r18, 0x02	; 2
    1b1e:	31 05       	cpc	r19, r1
    1b20:	2c f4       	brge	.+10     	; 0x1b2c <GPIO_writePin+0x4e>
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	71 f0       	breq	.+28     	; 0x1b46 <GPIO_writePin+0x68>
    1b2a:	bc c0       	rjmp	.+376    	; 0x1ca4 <GPIO_writePin+0x1c6>
    1b2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b30:	22 30       	cpi	r18, 0x02	; 2
    1b32:	31 05       	cpc	r19, r1
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <GPIO_writePin+0x5a>
    1b36:	5f c0       	rjmp	.+190    	; 0x1bf6 <GPIO_writePin+0x118>
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3c:	83 30       	cpi	r24, 0x03	; 3
    1b3e:	91 05       	cpc	r25, r1
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <GPIO_writePin+0x66>
    1b42:	85 c0       	rjmp	.+266    	; 0x1c4e <GPIO_writePin+0x170>
    1b44:	af c0       	rjmp	.+350    	; 0x1ca4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	a1 f4       	brne	.+40     	; 0x1b74 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1b4c:	ab e3       	ldi	r26, 0x3B	; 59
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	eb e3       	ldi	r30, 0x3B	; 59
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	48 2f       	mov	r20, r24
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	02 2e       	mov	r0, r18
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <GPIO_writePin+0x8c>
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	0a 94       	dec	r0
    1b6c:	e2 f7       	brpl	.-8      	; 0x1b66 <GPIO_writePin+0x88>
    1b6e:	84 2b       	or	r24, r20
    1b70:	8c 93       	st	X, r24
    1b72:	98 c0       	rjmp	.+304    	; 0x1ca4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1b74:	ab e3       	ldi	r26, 0x3B	; 59
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	eb e3       	ldi	r30, 0x3B	; 59
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	48 2f       	mov	r20, r24
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	02 2e       	mov	r0, r18
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <GPIO_writePin+0xb4>
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	0a 94       	dec	r0
    1b94:	e2 f7       	brpl	.-8      	; 0x1b8e <GPIO_writePin+0xb0>
    1b96:	80 95       	com	r24
    1b98:	84 23       	and	r24, r20
    1b9a:	8c 93       	st	X, r24
    1b9c:	83 c0       	rjmp	.+262    	; 0x1ca4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	a1 f4       	brne	.+40     	; 0x1bcc <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1ba4:	a8 e3       	ldi	r26, 0x38	; 56
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e8 e3       	ldi	r30, 0x38	; 56
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	48 2f       	mov	r20, r24
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	02 2e       	mov	r0, r18
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <GPIO_writePin+0xe4>
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	0a 94       	dec	r0
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <GPIO_writePin+0xe0>
    1bc6:	84 2b       	or	r24, r20
    1bc8:	8c 93       	st	X, r24
    1bca:	6c c0       	rjmp	.+216    	; 0x1ca4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1bcc:	a8 e3       	ldi	r26, 0x38	; 56
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e8 e3       	ldi	r30, 0x38	; 56
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	48 2f       	mov	r20, r24
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	02 2e       	mov	r0, r18
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <GPIO_writePin+0x10c>
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	0a 94       	dec	r0
    1bec:	e2 f7       	brpl	.-8      	; 0x1be6 <GPIO_writePin+0x108>
    1bee:	80 95       	com	r24
    1bf0:	84 23       	and	r24, r20
    1bf2:	8c 93       	st	X, r24
    1bf4:	57 c0       	rjmp	.+174    	; 0x1ca4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	81 30       	cpi	r24, 0x01	; 1
    1bfa:	a1 f4       	brne	.+40     	; 0x1c24 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1bfc:	a5 e3       	ldi	r26, 0x35	; 53
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e5 e3       	ldi	r30, 0x35	; 53
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	48 2f       	mov	r20, r24
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	02 2e       	mov	r0, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <GPIO_writePin+0x13c>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	0a 94       	dec	r0
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <GPIO_writePin+0x138>
    1c1e:	84 2b       	or	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	40 c0       	rjmp	.+128    	; 0x1ca4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1c24:	a5 e3       	ldi	r26, 0x35	; 53
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e5 e3       	ldi	r30, 0x35	; 53
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <GPIO_writePin+0x164>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <GPIO_writePin+0x160>
    1c46:	80 95       	com	r24
    1c48:	84 23       	and	r24, r20
    1c4a:	8c 93       	st	X, r24
    1c4c:	2b c0       	rjmp	.+86     	; 0x1ca4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	a1 f4       	brne	.+40     	; 0x1c7c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1c54:	a2 e3       	ldi	r26, 0x32	; 50
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e2 e3       	ldi	r30, 0x32	; 50
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	48 2f       	mov	r20, r24
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	02 2e       	mov	r0, r18
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <GPIO_writePin+0x194>
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	0a 94       	dec	r0
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <GPIO_writePin+0x190>
    1c76:	84 2b       	or	r24, r20
    1c78:	8c 93       	st	X, r24
    1c7a:	14 c0       	rjmp	.+40     	; 0x1ca4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1c7c:	a2 e3       	ldi	r26, 0x32	; 50
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e2 e3       	ldi	r30, 0x32	; 50
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	48 2f       	mov	r20, r24
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	02 2e       	mov	r0, r18
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <GPIO_writePin+0x1bc>
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	0a 94       	dec	r0
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <GPIO_writePin+0x1b8>
    1c9e:	80 95       	com	r24
    1ca0:	84 23       	and	r24, r20
    1ca2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <GPIO_readPin+0x6>
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <GPIO_readPin+0x8>
    1cbc:	0f 92       	push	r0
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	8a 83       	std	Y+2, r24	; 0x02
    1cc4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1cc6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	88 30       	cpi	r24, 0x08	; 8
    1ccc:	08 f0       	brcs	.+2      	; 0x1cd0 <GPIO_readPin+0x1c>
    1cce:	84 c0       	rjmp	.+264    	; 0x1dd8 <GPIO_readPin+0x124>
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	84 30       	cpi	r24, 0x04	; 4
    1cd4:	08 f0       	brcs	.+2      	; 0x1cd8 <GPIO_readPin+0x24>
    1cd6:	80 c0       	rjmp	.+256    	; 0x1dd8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	3d 83       	std	Y+5, r19	; 0x05
    1ce0:	2c 83       	std	Y+4, r18	; 0x04
    1ce2:	4c 81       	ldd	r20, Y+4	; 0x04
    1ce4:	5d 81       	ldd	r21, Y+5	; 0x05
    1ce6:	41 30       	cpi	r20, 0x01	; 1
    1ce8:	51 05       	cpc	r21, r1
    1cea:	79 f1       	breq	.+94     	; 0x1d4a <GPIO_readPin+0x96>
    1cec:	8c 81       	ldd	r24, Y+4	; 0x04
    1cee:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf0:	82 30       	cpi	r24, 0x02	; 2
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	34 f4       	brge	.+12     	; 0x1d02 <GPIO_readPin+0x4e>
    1cf6:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf8:	3d 81       	ldd	r19, Y+5	; 0x05
    1cfa:	21 15       	cp	r18, r1
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	69 f0       	breq	.+26     	; 0x1d1a <GPIO_readPin+0x66>
    1d00:	6b c0       	rjmp	.+214    	; 0x1dd8 <GPIO_readPin+0x124>
    1d02:	4c 81       	ldd	r20, Y+4	; 0x04
    1d04:	5d 81       	ldd	r21, Y+5	; 0x05
    1d06:	42 30       	cpi	r20, 0x02	; 2
    1d08:	51 05       	cpc	r21, r1
    1d0a:	b9 f1       	breq	.+110    	; 0x1d7a <GPIO_readPin+0xc6>
    1d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d10:	83 30       	cpi	r24, 0x03	; 3
    1d12:	91 05       	cpc	r25, r1
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <GPIO_readPin+0x64>
    1d16:	49 c0       	rjmp	.+146    	; 0x1daa <GPIO_readPin+0xf6>
    1d18:	5f c0       	rjmp	.+190    	; 0x1dd8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1d1a:	e9 e3       	ldi	r30, 0x39	; 57
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	88 2f       	mov	r24, r24
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	a9 01       	movw	r20, r18
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <GPIO_readPin+0x7e>
    1d2e:	55 95       	asr	r21
    1d30:	47 95       	ror	r20
    1d32:	8a 95       	dec	r24
    1d34:	e2 f7       	brpl	.-8      	; 0x1d2e <GPIO_readPin+0x7a>
    1d36:	ca 01       	movw	r24, r20
    1d38:	81 70       	andi	r24, 0x01	; 1
    1d3a:	90 70       	andi	r25, 0x00	; 0
    1d3c:	88 23       	and	r24, r24
    1d3e:	19 f0       	breq	.+6      	; 0x1d46 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	49 c0       	rjmp	.+146    	; 0x1dd8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d46:	19 82       	std	Y+1, r1	; 0x01
    1d48:	47 c0       	rjmp	.+142    	; 0x1dd8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1d4a:	e6 e3       	ldi	r30, 0x36	; 54
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	88 2f       	mov	r24, r24
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	a9 01       	movw	r20, r18
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <GPIO_readPin+0xae>
    1d5e:	55 95       	asr	r21
    1d60:	47 95       	ror	r20
    1d62:	8a 95       	dec	r24
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <GPIO_readPin+0xaa>
    1d66:	ca 01       	movw	r24, r20
    1d68:	81 70       	andi	r24, 0x01	; 1
    1d6a:	90 70       	andi	r25, 0x00	; 0
    1d6c:	88 23       	and	r24, r24
    1d6e:	19 f0       	breq	.+6      	; 0x1d76 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	31 c0       	rjmp	.+98     	; 0x1dd8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d76:	19 82       	std	Y+1, r1	; 0x01
    1d78:	2f c0       	rjmp	.+94     	; 0x1dd8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1d7a:	e3 e3       	ldi	r30, 0x33	; 51
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	a9 01       	movw	r20, r18
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <GPIO_readPin+0xde>
    1d8e:	55 95       	asr	r21
    1d90:	47 95       	ror	r20
    1d92:	8a 95       	dec	r24
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <GPIO_readPin+0xda>
    1d96:	ca 01       	movw	r24, r20
    1d98:	81 70       	andi	r24, 0x01	; 1
    1d9a:	90 70       	andi	r25, 0x00	; 0
    1d9c:	88 23       	and	r24, r24
    1d9e:	19 f0       	breq	.+6      	; 0x1da6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	89 83       	std	Y+1, r24	; 0x01
    1da4:	19 c0       	rjmp	.+50     	; 0x1dd8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1da6:	19 82       	std	Y+1, r1	; 0x01
    1da8:	17 c0       	rjmp	.+46     	; 0x1dd8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1daa:	e0 e3       	ldi	r30, 0x30	; 48
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	a9 01       	movw	r20, r18
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <GPIO_readPin+0x10e>
    1dbe:	55 95       	asr	r21
    1dc0:	47 95       	ror	r20
    1dc2:	8a 95       	dec	r24
    1dc4:	e2 f7       	brpl	.-8      	; 0x1dbe <GPIO_readPin+0x10a>
    1dc6:	ca 01       	movw	r24, r20
    1dc8:	81 70       	andi	r24, 0x01	; 1
    1dca:	90 70       	andi	r25, 0x00	; 0
    1dcc:	88 23       	and	r24, r24
    1dce:	19 f0       	breq	.+6      	; 0x1dd6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	01 c0       	rjmp	.+2      	; 0x1dd8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1dd6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <GPIO_setupPortDirection+0x6>
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <GPIO_setupPortDirection+0x8>
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	84 30       	cpi	r24, 0x04	; 4
    1dfe:	90 f5       	brcc	.+100    	; 0x1e64 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	3c 83       	std	Y+4, r19	; 0x04
    1e08:	2b 83       	std	Y+3, r18	; 0x03
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	91 05       	cpc	r25, r1
    1e12:	d1 f0       	breq	.+52     	; 0x1e48 <GPIO_setupPortDirection+0x5e>
    1e14:	2b 81       	ldd	r18, Y+3	; 0x03
    1e16:	3c 81       	ldd	r19, Y+4	; 0x04
    1e18:	22 30       	cpi	r18, 0x02	; 2
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	2c f4       	brge	.+10     	; 0x1e28 <GPIO_setupPortDirection+0x3e>
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	61 f0       	breq	.+24     	; 0x1e3e <GPIO_setupPortDirection+0x54>
    1e26:	1e c0       	rjmp	.+60     	; 0x1e64 <GPIO_setupPortDirection+0x7a>
    1e28:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e2c:	22 30       	cpi	r18, 0x02	; 2
    1e2e:	31 05       	cpc	r19, r1
    1e30:	81 f0       	breq	.+32     	; 0x1e52 <GPIO_setupPortDirection+0x68>
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	9c 81       	ldd	r25, Y+4	; 0x04
    1e36:	83 30       	cpi	r24, 0x03	; 3
    1e38:	91 05       	cpc	r25, r1
    1e3a:	81 f0       	breq	.+32     	; 0x1e5c <GPIO_setupPortDirection+0x72>
    1e3c:	13 c0       	rjmp	.+38     	; 0x1e64 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1e3e:	ea e3       	ldi	r30, 0x3A	; 58
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	80 83       	st	Z, r24
    1e46:	0e c0       	rjmp	.+28     	; 0x1e64 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1e48:	e7 e3       	ldi	r30, 0x37	; 55
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	80 83       	st	Z, r24
    1e50:	09 c0       	rjmp	.+18     	; 0x1e64 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1e52:	e4 e3       	ldi	r30, 0x34	; 52
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	80 83       	st	Z, r24
    1e5a:	04 c0       	rjmp	.+8      	; 0x1e64 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e5c:	e1 e3       	ldi	r30, 0x31	; 49
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <GPIO_writePort+0x6>
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <GPIO_writePort+0x8>
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	84 30       	cpi	r24, 0x04	; 4
    1e86:	90 f5       	brcc	.+100    	; 0x1eec <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	3c 83       	std	Y+4, r19	; 0x04
    1e90:	2b 83       	std	Y+3, r18	; 0x03
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	9c 81       	ldd	r25, Y+4	; 0x04
    1e96:	81 30       	cpi	r24, 0x01	; 1
    1e98:	91 05       	cpc	r25, r1
    1e9a:	d1 f0       	breq	.+52     	; 0x1ed0 <GPIO_writePort+0x5e>
    1e9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea0:	22 30       	cpi	r18, 0x02	; 2
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	2c f4       	brge	.+10     	; 0x1eb0 <GPIO_writePort+0x3e>
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	61 f0       	breq	.+24     	; 0x1ec6 <GPIO_writePort+0x54>
    1eae:	1e c0       	rjmp	.+60     	; 0x1eec <GPIO_writePort+0x7a>
    1eb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb4:	22 30       	cpi	r18, 0x02	; 2
    1eb6:	31 05       	cpc	r19, r1
    1eb8:	81 f0       	breq	.+32     	; 0x1eda <GPIO_writePort+0x68>
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebe:	83 30       	cpi	r24, 0x03	; 3
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	81 f0       	breq	.+32     	; 0x1ee4 <GPIO_writePort+0x72>
    1ec4:	13 c0       	rjmp	.+38     	; 0x1eec <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ec6:	eb e3       	ldi	r30, 0x3B	; 59
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	80 83       	st	Z, r24
    1ece:	0e c0       	rjmp	.+28     	; 0x1eec <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1ed0:	e8 e3       	ldi	r30, 0x38	; 56
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	80 83       	st	Z, r24
    1ed8:	09 c0       	rjmp	.+18     	; 0x1eec <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1eda:	e5 e3       	ldi	r30, 0x35	; 53
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	80 83       	st	Z, r24
    1ee2:	04 c0       	rjmp	.+8      	; 0x1eec <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1ee4:	e2 e3       	ldi	r30, 0x32	; 50
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	80 83       	st	Z, r24
			break;
		}
	}
}
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <GPIO_readPort+0x6>
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <GPIO_readPort+0x8>
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1f08:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	84 30       	cpi	r24, 0x04	; 4
    1f0e:	90 f5       	brcc	.+100    	; 0x1f74 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	3c 83       	std	Y+4, r19	; 0x04
    1f18:	2b 83       	std	Y+3, r18	; 0x03
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	91 05       	cpc	r25, r1
    1f22:	d1 f0       	breq	.+52     	; 0x1f58 <GPIO_readPort+0x5e>
    1f24:	2b 81       	ldd	r18, Y+3	; 0x03
    1f26:	3c 81       	ldd	r19, Y+4	; 0x04
    1f28:	22 30       	cpi	r18, 0x02	; 2
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <GPIO_readPort+0x3e>
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	9c 81       	ldd	r25, Y+4	; 0x04
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	61 f0       	breq	.+24     	; 0x1f4e <GPIO_readPort+0x54>
    1f36:	1e c0       	rjmp	.+60     	; 0x1f74 <GPIO_readPort+0x7a>
    1f38:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3c:	22 30       	cpi	r18, 0x02	; 2
    1f3e:	31 05       	cpc	r19, r1
    1f40:	81 f0       	breq	.+32     	; 0x1f62 <GPIO_readPort+0x68>
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	83 30       	cpi	r24, 0x03	; 3
    1f48:	91 05       	cpc	r25, r1
    1f4a:	81 f0       	breq	.+32     	; 0x1f6c <GPIO_readPort+0x72>
    1f4c:	13 c0       	rjmp	.+38     	; 0x1f74 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1f4e:	e9 e3       	ldi	r30, 0x39	; 57
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	89 83       	std	Y+1, r24	; 0x01
    1f56:	0e c0       	rjmp	.+28     	; 0x1f74 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1f58:	e6 e3       	ldi	r30, 0x36	; 54
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	09 c0       	rjmp	.+18     	; 0x1f74 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1f62:	e3 e3       	ldi	r30, 0x33	; 51
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	04 c0       	rjmp	.+8      	; 0x1f74 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1f6c:	e0 e3       	ldi	r30, 0x30	; 48
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <__vector_3>:

/* Holds the address of the callback function */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(INT2_vect)
{
    1f84:	1f 92       	push	r1
    1f86:	0f 92       	push	r0
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	0f 92       	push	r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	2f 93       	push	r18
    1f90:	3f 93       	push	r19
    1f92:	4f 93       	push	r20
    1f94:	5f 93       	push	r21
    1f96:	6f 93       	push	r22
    1f98:	7f 93       	push	r23
    1f9a:	8f 93       	push	r24
    1f9c:	9f 93       	push	r25
    1f9e:	af 93       	push	r26
    1fa0:	bf 93       	push	r27
    1fa2:	ef 93       	push	r30
    1fa4:	ff 93       	push	r31
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
	 *  bit is written to one, the Global Interrupt Flag in SREG is written to
	 *  one and the RXC bit in UCSRA is set.
	 */

	/* Checks if the global pointer g_callBackPtr is not pointing to NULL. */
	if(g_callBackPtr != NULL_PTR)
    1fae:	80 91 a1 03 	lds	r24, 0x03A1
    1fb2:	90 91 a2 03 	lds	r25, 0x03A2
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	29 f0       	breq	.+10     	; 0x1fc4 <__vector_3+0x40>
	{
		/* Call the callback function using pointer to function g_callBackPtr(); */
		(*g_callBackPtr)();
    1fba:	e0 91 a1 03 	lds	r30, 0x03A1
    1fbe:	f0 91 a2 03 	lds	r31, 0x03A2
    1fc2:	09 95       	icall
	}
}
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	ff 91       	pop	r31
    1fca:	ef 91       	pop	r30
    1fcc:	bf 91       	pop	r27
    1fce:	af 91       	pop	r26
    1fd0:	9f 91       	pop	r25
    1fd2:	8f 91       	pop	r24
    1fd4:	7f 91       	pop	r23
    1fd6:	6f 91       	pop	r22
    1fd8:	5f 91       	pop	r21
    1fda:	4f 91       	pop	r20
    1fdc:	3f 91       	pop	r19
    1fde:	2f 91       	pop	r18
    1fe0:	0f 90       	pop	r0
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	0f 90       	pop	r0
    1fe6:	1f 90       	pop	r1
    1fe8:	18 95       	reti

00001fea <INT2_setCallBack>:

void INT2_setCallBack(void(*a_ptr)(void))
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <INT2_setCallBack+0x6>
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	9a 83       	std	Y+2, r25	; 0x02
    1ff6:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffc:	90 93 a2 03 	sts	0x03A2, r25
    2000:	80 93 a1 03 	sts	0x03A1, r24
}
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <INT2_init>:

void INT2_init(void)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
	/* Port B Data Direction Register – DDRB */
	/* Set the RESUME button as input - PB2 */
	CLEAR_BIT(DDRB,PB2);
    2016:	a7 e3       	ldi	r26, 0x37	; 55
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e7 e3       	ldi	r30, 0x37	; 55
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	8b 7f       	andi	r24, 0xFB	; 251
    2022:	8c 93       	st	X, r24

	/* Port B Data Register – PORTB */
	/* Activate the internal pull-up resistor - PB2 */
	SET_BIT(PORTB,PB2);
    2024:	a8 e3       	ldi	r26, 0x38	; 56
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e8 e3       	ldi	r30, 0x38	; 56
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	84 60       	ori	r24, 0x04	; 4
    2030:	8c 93       	st	X, r24

	/*MCU Control and Status Register – MCUCSR*/
	/* Interrupt Sense Control 2 - ISC2: CLR for Falling edge */
	SET_BIT(MCUCSR,ISC2);
    2032:	a4 e5       	ldi	r26, 0x54	; 84
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e4 e5       	ldi	r30, 0x54	; 84
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	80 64       	ori	r24, 0x40	; 64
    203e:	8c 93       	st	X, r24

	/* General Interrupt Control Register – GICR */
	/* External Interrupt Request 0 Enable - INT2 */
	SET_BIT(GICR,INT2);
    2040:	ab e5       	ldi	r26, 0x5B	; 91
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	eb e5       	ldi	r30, 0x5B	; 91
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	80 62       	ori	r24, 0x20	; 32
    204c:	8c 93       	st	X, r24

	/* General Interrupt Flag Register – GIFR */
	/* External Interrupt Request 0 Enable - INTF2 */
	/* SET_BIT(GIFR,INTF2); */
}
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	00 d0       	rcall	.+0      	; 0x205a <KEYPAD_getPressedKey+0x6>
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_OUTPUT);
    205e:	82 e0       	ldi	r24, 0x02	; 2
    2060:	60 e0       	ldi	r22, 0x00	; 0
    2062:	41 e0       	ldi	r20, 0x01	; 1
    2064:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_OUTPUT);
    2068:	82 e0       	ldi	r24, 0x02	; 2
    206a:	61 e0       	ldi	r22, 0x01	; 1
    206c:	41 e0       	ldi	r20, 0x01	; 1
    206e:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_OUTPUT);
    2072:	82 e0       	ldi	r24, 0x02	; 2
    2074:	62 e0       	ldi	r22, 0x02	; 2
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_OUTPUT);
    207c:	82 e0       	ldi	r24, 0x02	; 2
    207e:	63 e0       	ldi	r22, 0x03	; 3
    2080:	41 e0       	ldi	r20, 0x01	; 1
    2082:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2086:	82 e0       	ldi	r24, 0x02	; 2
    2088:	64 e0       	ldi	r22, 0x04	; 4
    208a:	40 e0       	ldi	r20, 0x00	; 0
    208c:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	65 e0       	ldi	r22, 0x05	; 5
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    209a:	82 e0       	ldi	r24, 0x02	; 2
    209c:	66 e0       	ldi	r22, 0x06	; 6
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_setupPinDirection>

	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, LOGIC_HIGH);
    20a4:	82 e0       	ldi	r24, 0x02	; 2
    20a6:	64 e0       	ldi	r22, 0x04	; 4
    20a8:	41 e0       	ldi	r20, 0x01	; 1
    20aa:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_writePin>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, LOGIC_HIGH);
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    20b0:	65 e0       	ldi	r22, 0x05	; 5
    20b2:	41 e0       	ldi	r20, 0x01	; 1
    20b4:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_writePin>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, LOGIC_HIGH);
    20b8:	82 e0       	ldi	r24, 0x02	; 2
    20ba:	66 e0       	ldi	r22, 0x06	; 6
    20bc:	41 e0       	ldi	r20, 0x01	; 1
    20be:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_writePin>

#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    20c2:	82 e0       	ldi	r24, 0x02	; 2
    20c4:	67 e0       	ldi	r22, 0x07	; 7
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_setupPinDirection>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, LOGIC_HIGH);
    20cc:	82 e0       	ldi	r24, 0x02	; 2
    20ce:	67 e0       	ldi	r22, 0x07	; 7
    20d0:	41 e0       	ldi	r20, 0x01	; 1
    20d2:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_writePin>
#endif

	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    20d6:	19 82       	std	Y+1, r1	; 0x01
    20d8:	39 c0       	rjmp	.+114    	; 0x214c <KEYPAD_getPressedKey+0xf8>
			 * except this row will be output pin
			 */
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    20da:	82 e0       	ldi	r24, 0x02	; 2
    20dc:	69 81       	ldd	r22, Y+1	; 0x01
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    20e4:	1a 82       	std	Y+2, r1	; 0x02
    20e6:	27 c0       	rjmp	.+78     	; 0x2136 <KEYPAD_getPressedKey+0xe2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	98 2f       	mov	r25, r24
    20ec:	9c 5f       	subi	r25, 0xFC	; 252
    20ee:	82 e0       	ldi	r24, 0x02	; 2
    20f0:	69 2f       	mov	r22, r25
    20f2:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <GPIO_readPin>
    20f6:	88 23       	and	r24, r24
    20f8:	d9 f4       	brne	.+54     	; 0x2130 <KEYPAD_getPressedKey+0xdc>
				{
					while(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED);
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	98 2f       	mov	r25, r24
    20fe:	9c 5f       	subi	r25, 0xFC	; 252
    2100:	82 e0       	ldi	r24, 0x02	; 2
    2102:	69 2f       	mov	r22, r25
    2104:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <GPIO_readPin>
    2108:	88 23       	and	r24, r24
    210a:	b9 f3       	breq	.-18     	; 0x20fa <KEYPAD_getPressedKey+0xa6>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	88 2f       	mov	r24, r24
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	98 2f       	mov	r25, r24
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	89 0f       	add	r24, r25
    2120:	8f 5f       	subi	r24, 0xFF	; 255
    2122:	0e 94 aa 10 	call	0x2154	; 0x2154 <KEYPAD_4x4_adjustKeyNumber>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
//			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	8f 5f       	subi	r24, 0xFF	; 255
    2134:	8a 83       	std	Y+2, r24	; 0x02
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	84 30       	cpi	r24, 0x04	; 4
    213a:	b0 f2       	brcs	.-84     	; 0x20e8 <KEYPAD_getPressedKey+0x94>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    213c:	82 e0       	ldi	r24, 0x02	; 2
    213e:	69 81       	ldd	r22, Y+1	; 0x01
    2140:	41 e0       	ldi	r20, 0x01	; 1
    2142:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_writePin>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, LOGIC_HIGH);
#endif

	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	8f 5f       	subi	r24, 0xFF	; 255
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	84 30       	cpi	r24, 0x04	; 4
    2150:	20 f2       	brcs	.-120    	; 0x20da <KEYPAD_getPressedKey+0x86>
    2152:	c1 cf       	rjmp	.-126    	; 0x20d6 <KEYPAD_getPressedKey+0x82>

00002154 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	00 d0       	rcall	.+0      	; 0x215a <KEYPAD_4x4_adjustKeyNumber+0x6>
    215a:	00 d0       	rcall	.+0      	; 0x215c <KEYPAD_4x4_adjustKeyNumber+0x8>
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2162:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	3c 83       	std	Y+4, r19	; 0x04
    216c:	2b 83       	std	Y+3, r18	; 0x03
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	88 30       	cpi	r24, 0x08	; 8
    2174:	91 05       	cpc	r25, r1
    2176:	09 f4       	brne	.+2      	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x26>
    2178:	70 c0       	rjmp	.+224    	; 0x225a <KEYPAD_4x4_adjustKeyNumber+0x106>
    217a:	2b 81       	ldd	r18, Y+3	; 0x03
    217c:	3c 81       	ldd	r19, Y+4	; 0x04
    217e:	29 30       	cpi	r18, 0x09	; 9
    2180:	31 05       	cpc	r19, r1
    2182:	5c f5       	brge	.+86     	; 0x21da <KEYPAD_4x4_adjustKeyNumber+0x86>
    2184:	8b 81       	ldd	r24, Y+3	; 0x03
    2186:	9c 81       	ldd	r25, Y+4	; 0x04
    2188:	84 30       	cpi	r24, 0x04	; 4
    218a:	91 05       	cpc	r25, r1
    218c:	09 f4       	brne	.+2      	; 0x2190 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    218e:	59 c0       	rjmp	.+178    	; 0x2242 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2190:	2b 81       	ldd	r18, Y+3	; 0x03
    2192:	3c 81       	ldd	r19, Y+4	; 0x04
    2194:	25 30       	cpi	r18, 0x05	; 5
    2196:	31 05       	cpc	r19, r1
    2198:	9c f4       	brge	.+38     	; 0x21c0 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	9c 81       	ldd	r25, Y+4	; 0x04
    219e:	82 30       	cpi	r24, 0x02	; 2
    21a0:	91 05       	cpc	r25, r1
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <KEYPAD_4x4_adjustKeyNumber+0x52>
    21a4:	48 c0       	rjmp	.+144    	; 0x2236 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    21a6:	2b 81       	ldd	r18, Y+3	; 0x03
    21a8:	3c 81       	ldd	r19, Y+4	; 0x04
    21aa:	23 30       	cpi	r18, 0x03	; 3
    21ac:	31 05       	cpc	r19, r1
    21ae:	0c f0       	brlt	.+2      	; 0x21b2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    21b0:	45 c0       	rjmp	.+138    	; 0x223c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	9c 81       	ldd	r25, Y+4	; 0x04
    21b6:	81 30       	cpi	r24, 0x01	; 1
    21b8:	91 05       	cpc	r25, r1
    21ba:	09 f4       	brne	.+2      	; 0x21be <KEYPAD_4x4_adjustKeyNumber+0x6a>
    21bc:	39 c0       	rjmp	.+114    	; 0x2230 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    21be:	67 c0       	rjmp	.+206    	; 0x228e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    21c0:	2b 81       	ldd	r18, Y+3	; 0x03
    21c2:	3c 81       	ldd	r19, Y+4	; 0x04
    21c4:	26 30       	cpi	r18, 0x06	; 6
    21c6:	31 05       	cpc	r19, r1
    21c8:	09 f4       	brne	.+2      	; 0x21cc <KEYPAD_4x4_adjustKeyNumber+0x78>
    21ca:	41 c0       	rjmp	.+130    	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	9c 81       	ldd	r25, Y+4	; 0x04
    21d0:	87 30       	cpi	r24, 0x07	; 7
    21d2:	91 05       	cpc	r25, r1
    21d4:	0c f0       	brlt	.+2      	; 0x21d8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    21d6:	3e c0       	rjmp	.+124    	; 0x2254 <KEYPAD_4x4_adjustKeyNumber+0x100>
    21d8:	37 c0       	rjmp	.+110    	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    21da:	2b 81       	ldd	r18, Y+3	; 0x03
    21dc:	3c 81       	ldd	r19, Y+4	; 0x04
    21de:	2c 30       	cpi	r18, 0x0C	; 12
    21e0:	31 05       	cpc	r19, r1
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    21e4:	46 c0       	rjmp	.+140    	; 0x2272 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ea:	8d 30       	cpi	r24, 0x0D	; 13
    21ec:	91 05       	cpc	r25, r1
    21ee:	5c f4       	brge	.+22     	; 0x2206 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    21f0:	2b 81       	ldd	r18, Y+3	; 0x03
    21f2:	3c 81       	ldd	r19, Y+4	; 0x04
    21f4:	2a 30       	cpi	r18, 0x0A	; 10
    21f6:	31 05       	cpc	r19, r1
    21f8:	b1 f1       	breq	.+108    	; 0x2266 <KEYPAD_4x4_adjustKeyNumber+0x112>
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	9c 81       	ldd	r25, Y+4	; 0x04
    21fe:	8b 30       	cpi	r24, 0x0B	; 11
    2200:	91 05       	cpc	r25, r1
    2202:	a4 f5       	brge	.+104    	; 0x226c <KEYPAD_4x4_adjustKeyNumber+0x118>
    2204:	2d c0       	rjmp	.+90     	; 0x2260 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2206:	2b 81       	ldd	r18, Y+3	; 0x03
    2208:	3c 81       	ldd	r19, Y+4	; 0x04
    220a:	2e 30       	cpi	r18, 0x0E	; 14
    220c:	31 05       	cpc	r19, r1
    220e:	b9 f1       	breq	.+110    	; 0x227e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	8e 30       	cpi	r24, 0x0E	; 14
    2216:	91 05       	cpc	r25, r1
    2218:	7c f1       	brlt	.+94     	; 0x2278 <KEYPAD_4x4_adjustKeyNumber+0x124>
    221a:	2b 81       	ldd	r18, Y+3	; 0x03
    221c:	3c 81       	ldd	r19, Y+4	; 0x04
    221e:	2f 30       	cpi	r18, 0x0F	; 15
    2220:	31 05       	cpc	r19, r1
    2222:	79 f1       	breq	.+94     	; 0x2282 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	9c 81       	ldd	r25, Y+4	; 0x04
    2228:	80 31       	cpi	r24, 0x10	; 16
    222a:	91 05       	cpc	r25, r1
    222c:	69 f1       	breq	.+90     	; 0x2288 <KEYPAD_4x4_adjustKeyNumber+0x134>
    222e:	2f c0       	rjmp	.+94     	; 0x228e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2230:	87 e0       	ldi	r24, 0x07	; 7
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	2e c0       	rjmp	.+92     	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2236:	88 e0       	ldi	r24, 0x08	; 8
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	2b c0       	rjmp	.+86     	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    223c:	89 e0       	ldi	r24, 0x09	; 9
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	28 c0       	rjmp	.+80     	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; // ASCII Code of /
    2242:	8f e2       	ldi	r24, 0x2F	; 47
    2244:	89 83       	std	Y+1, r24	; 0x01
    2246:	25 c0       	rjmp	.+74     	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2248:	84 e0       	ldi	r24, 0x04	; 4
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	22 c0       	rjmp	.+68     	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    224e:	85 e0       	ldi	r24, 0x05	; 5
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	1f c0       	rjmp	.+62     	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2254:	86 e0       	ldi	r24, 0x06	; 6
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	1c c0       	rjmp	.+56     	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    225a:	8a e2       	ldi	r24, 0x2A	; 42
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	19 c0       	rjmp	.+50     	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	16 c0       	rjmp	.+44     	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2266:	82 e0       	ldi	r24, 0x02	; 2
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	13 c0       	rjmp	.+38     	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    226c:	83 e0       	ldi	r24, 0x03	; 3
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	10 c0       	rjmp	.+32     	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2272:	8d e2       	ldi	r24, 0x2D	; 45
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	0d c0       	rjmp	.+26     	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2278:	8d e0       	ldi	r24, 0x0D	; 13
    227a:	89 83       	std	Y+1, r24	; 0x01
    227c:	0a c0       	rjmp	.+20     	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    227e:	19 82       	std	Y+1, r1	; 0x01
    2280:	08 c0       	rjmp	.+16     	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2282:	8d e3       	ldi	r24, 0x3D	; 61
    2284:	89 83       	std	Y+1, r24	; 0x01
    2286:	05 c0       	rjmp	.+10     	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2288:	8b e2       	ldi	r24, 0x2B	; 43
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    228e:	8a 81       	ldd	r24, Y+2	; 0x02
    2290:	89 83       	std	Y+1, r24	; 0x01
				break;
	}

	return keypad_button;
    2292:	89 81       	ldd	r24, Y+1	; 0x01
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	2e 97       	sbiw	r28, 0x0e	; 14
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	60 e0       	ldi	r22, 0x00	; 0
    22ba:	41 e0       	ldi	r20, 0x01	; 1
    22bc:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	61 e0       	ldi	r22, 0x01	; 1
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	6f ef       	ldi	r22, 0xFF	; 255
    22ce:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <GPIO_setupPortDirection>
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	a0 ea       	ldi	r26, 0xA0	; 160
    22d8:	b1 e4       	ldi	r27, 0x41	; 65
    22da:	8b 87       	std	Y+11, r24	; 0x0b
    22dc:	9c 87       	std	Y+12, r25	; 0x0c
    22de:	ad 87       	std	Y+13, r26	; 0x0d
    22e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	4a ef       	ldi	r20, 0xFA	; 250
    22f0:	54 e4       	ldi	r21, 0x44	; 68
    22f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	8f 83       	std	Y+7, r24	; 0x07
    22fc:	98 87       	std	Y+8, r25	; 0x08
    22fe:	a9 87       	std	Y+9, r26	; 0x09
    2300:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2302:	6f 81       	ldd	r22, Y+7	; 0x07
    2304:	78 85       	ldd	r23, Y+8	; 0x08
    2306:	89 85       	ldd	r24, Y+9	; 0x09
    2308:	9a 85       	ldd	r25, Y+10	; 0x0a
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e8       	ldi	r20, 0x80	; 128
    2310:	5f e3       	ldi	r21, 0x3F	; 63
    2312:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2316:	88 23       	and	r24, r24
    2318:	2c f4       	brge	.+10     	; 0x2324 <LCD_init+0x82>
		__ticks = 1;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	9e 83       	std	Y+6, r25	; 0x06
    2320:	8d 83       	std	Y+5, r24	; 0x05
    2322:	3f c0       	rjmp	.+126    	; 0x23a2 <LCD_init+0x100>
	else if (__tmp > 65535)
    2324:	6f 81       	ldd	r22, Y+7	; 0x07
    2326:	78 85       	ldd	r23, Y+8	; 0x08
    2328:	89 85       	ldd	r24, Y+9	; 0x09
    232a:	9a 85       	ldd	r25, Y+10	; 0x0a
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	3f ef       	ldi	r19, 0xFF	; 255
    2330:	4f e7       	ldi	r20, 0x7F	; 127
    2332:	57 e4       	ldi	r21, 0x47	; 71
    2334:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2338:	18 16       	cp	r1, r24
    233a:	4c f5       	brge	.+82     	; 0x238e <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    233c:	6b 85       	ldd	r22, Y+11	; 0x0b
    233e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2340:	8d 85       	ldd	r24, Y+13	; 0x0d
    2342:	9e 85       	ldd	r25, Y+14	; 0x0e
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e2       	ldi	r20, 0x20	; 32
    234a:	51 e4       	ldi	r21, 0x41	; 65
    234c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	9e 83       	std	Y+6, r25	; 0x06
    2362:	8d 83       	std	Y+5, r24	; 0x05
    2364:	0f c0       	rjmp	.+30     	; 0x2384 <LCD_init+0xe2>
    2366:	88 ec       	ldi	r24, 0xC8	; 200
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9c 83       	std	Y+4, r25	; 0x04
    236c:	8b 83       	std	Y+3, r24	; 0x03
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	9c 81       	ldd	r25, Y+4	; 0x04
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	f1 f7       	brne	.-4      	; 0x2372 <LCD_init+0xd0>
    2376:	9c 83       	std	Y+4, r25	; 0x04
    2378:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237a:	8d 81       	ldd	r24, Y+5	; 0x05
    237c:	9e 81       	ldd	r25, Y+6	; 0x06
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	9e 83       	std	Y+6, r25	; 0x06
    2382:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2384:	8d 81       	ldd	r24, Y+5	; 0x05
    2386:	9e 81       	ldd	r25, Y+6	; 0x06
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	69 f7       	brne	.-38     	; 0x2366 <LCD_init+0xc4>
    238c:	14 c0       	rjmp	.+40     	; 0x23b6 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238e:	6f 81       	ldd	r22, Y+7	; 0x07
    2390:	78 85       	ldd	r23, Y+8	; 0x08
    2392:	89 85       	ldd	r24, Y+9	; 0x09
    2394:	9a 85       	ldd	r25, Y+10	; 0x0a
    2396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
    23a2:	8d 81       	ldd	r24, Y+5	; 0x05
    23a4:	9e 81       	ldd	r25, Y+6	; 0x06
    23a6:	9a 83       	std	Y+2, r25	; 0x02
    23a8:	89 83       	std	Y+1, r24	; 0x01
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	9a 81       	ldd	r25, Y+2	; 0x02
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <LCD_init+0x10c>
    23b2:	9a 83       	std	Y+2, r25	; 0x02
    23b4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    23b6:	88 e3       	ldi	r24, 0x38	; 56
    23b8:	0e 94 ed 11 	call	0x23da	; 0x23da <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    23bc:	8c e0       	ldi	r24, 0x0C	; 12
    23be:	0e 94 ed 11 	call	0x23da	; 0x23da <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	0e 94 ed 11 	call	0x23da	; 0x23da <LCD_sendCommand>
}
    23c8:	2e 96       	adiw	r28, 0x0e	; 14
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	e9 97       	sbiw	r28, 0x39	; 57
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	40 e0       	ldi	r20, 0x00	; 0
    23f6:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_writePin>
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	a0 e8       	ldi	r26, 0x80	; 128
    2400:	bf e3       	ldi	r27, 0x3F	; 63
    2402:	8d ab       	std	Y+53, r24	; 0x35
    2404:	9e ab       	std	Y+54, r25	; 0x36
    2406:	af ab       	std	Y+55, r26	; 0x37
    2408:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240a:	6d a9       	ldd	r22, Y+53	; 0x35
    240c:	7e a9       	ldd	r23, Y+54	; 0x36
    240e:	8f a9       	ldd	r24, Y+55	; 0x37
    2410:	98 ad       	ldd	r25, Y+56	; 0x38
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	4a ef       	ldi	r20, 0xFA	; 250
    2418:	54 e4       	ldi	r21, 0x44	; 68
    241a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	89 ab       	std	Y+49, r24	; 0x31
    2424:	9a ab       	std	Y+50, r25	; 0x32
    2426:	ab ab       	std	Y+51, r26	; 0x33
    2428:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    242a:	69 a9       	ldd	r22, Y+49	; 0x31
    242c:	7a a9       	ldd	r23, Y+50	; 0x32
    242e:	8b a9       	ldd	r24, Y+51	; 0x33
    2430:	9c a9       	ldd	r25, Y+52	; 0x34
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e8       	ldi	r20, 0x80	; 128
    2438:	5f e3       	ldi	r21, 0x3F	; 63
    243a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    243e:	88 23       	and	r24, r24
    2440:	2c f4       	brge	.+10     	; 0x244c <LCD_sendCommand+0x72>
		__ticks = 1;
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	98 ab       	std	Y+48, r25	; 0x30
    2448:	8f a7       	std	Y+47, r24	; 0x2f
    244a:	3f c0       	rjmp	.+126    	; 0x24ca <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    244c:	69 a9       	ldd	r22, Y+49	; 0x31
    244e:	7a a9       	ldd	r23, Y+50	; 0x32
    2450:	8b a9       	ldd	r24, Y+51	; 0x33
    2452:	9c a9       	ldd	r25, Y+52	; 0x34
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	3f ef       	ldi	r19, 0xFF	; 255
    2458:	4f e7       	ldi	r20, 0x7F	; 127
    245a:	57 e4       	ldi	r21, 0x47	; 71
    245c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2460:	18 16       	cp	r1, r24
    2462:	4c f5       	brge	.+82     	; 0x24b6 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2464:	6d a9       	ldd	r22, Y+53	; 0x35
    2466:	7e a9       	ldd	r23, Y+54	; 0x36
    2468:	8f a9       	ldd	r24, Y+55	; 0x37
    246a:	98 ad       	ldd	r25, Y+56	; 0x38
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 e2       	ldi	r20, 0x20	; 32
    2472:	51 e4       	ldi	r21, 0x41	; 65
    2474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	bc 01       	movw	r22, r24
    247e:	cd 01       	movw	r24, r26
    2480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	98 ab       	std	Y+48, r25	; 0x30
    248a:	8f a7       	std	Y+47, r24	; 0x2f
    248c:	0f c0       	rjmp	.+30     	; 0x24ac <LCD_sendCommand+0xd2>
    248e:	88 ec       	ldi	r24, 0xC8	; 200
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	9e a7       	std	Y+46, r25	; 0x2e
    2494:	8d a7       	std	Y+45, r24	; 0x2d
    2496:	8d a5       	ldd	r24, Y+45	; 0x2d
    2498:	9e a5       	ldd	r25, Y+46	; 0x2e
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	f1 f7       	brne	.-4      	; 0x249a <LCD_sendCommand+0xc0>
    249e:	9e a7       	std	Y+46, r25	; 0x2e
    24a0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24a4:	98 a9       	ldd	r25, Y+48	; 0x30
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	98 ab       	std	Y+48, r25	; 0x30
    24aa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ae:	98 a9       	ldd	r25, Y+48	; 0x30
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	69 f7       	brne	.-38     	; 0x248e <LCD_sendCommand+0xb4>
    24b4:	14 c0       	rjmp	.+40     	; 0x24de <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b6:	69 a9       	ldd	r22, Y+49	; 0x31
    24b8:	7a a9       	ldd	r23, Y+50	; 0x32
    24ba:	8b a9       	ldd	r24, Y+51	; 0x33
    24bc:	9c a9       	ldd	r25, Y+52	; 0x34
    24be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	98 ab       	std	Y+48, r25	; 0x30
    24c8:	8f a7       	std	Y+47, r24	; 0x2f
    24ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    24cc:	98 a9       	ldd	r25, Y+48	; 0x30
    24ce:	9c a7       	std	Y+44, r25	; 0x2c
    24d0:	8b a7       	std	Y+43, r24	; 0x2b
    24d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    24d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <LCD_sendCommand+0xfc>
    24da:	9c a7       	std	Y+44, r25	; 0x2c
    24dc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	61 e0       	ldi	r22, 0x01	; 1
    24e2:	41 e0       	ldi	r20, 0x01	; 1
    24e4:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_writePin>
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	a0 e8       	ldi	r26, 0x80	; 128
    24ee:	bf e3       	ldi	r27, 0x3F	; 63
    24f0:	8f a3       	std	Y+39, r24	; 0x27
    24f2:	98 a7       	std	Y+40, r25	; 0x28
    24f4:	a9 a7       	std	Y+41, r26	; 0x29
    24f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f8:	6f a1       	ldd	r22, Y+39	; 0x27
    24fa:	78 a5       	ldd	r23, Y+40	; 0x28
    24fc:	89 a5       	ldd	r24, Y+41	; 0x29
    24fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	4a ef       	ldi	r20, 0xFA	; 250
    2506:	54 e4       	ldi	r21, 0x44	; 68
    2508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	8b a3       	std	Y+35, r24	; 0x23
    2512:	9c a3       	std	Y+36, r25	; 0x24
    2514:	ad a3       	std	Y+37, r26	; 0x25
    2516:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2518:	6b a1       	ldd	r22, Y+35	; 0x23
    251a:	7c a1       	ldd	r23, Y+36	; 0x24
    251c:	8d a1       	ldd	r24, Y+37	; 0x25
    251e:	9e a1       	ldd	r25, Y+38	; 0x26
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e8       	ldi	r20, 0x80	; 128
    2526:	5f e3       	ldi	r21, 0x3F	; 63
    2528:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    252c:	88 23       	and	r24, r24
    252e:	2c f4       	brge	.+10     	; 0x253a <LCD_sendCommand+0x160>
		__ticks = 1;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9a a3       	std	Y+34, r25	; 0x22
    2536:	89 a3       	std	Y+33, r24	; 0x21
    2538:	3f c0       	rjmp	.+126    	; 0x25b8 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    253a:	6b a1       	ldd	r22, Y+35	; 0x23
    253c:	7c a1       	ldd	r23, Y+36	; 0x24
    253e:	8d a1       	ldd	r24, Y+37	; 0x25
    2540:	9e a1       	ldd	r25, Y+38	; 0x26
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	3f ef       	ldi	r19, 0xFF	; 255
    2546:	4f e7       	ldi	r20, 0x7F	; 127
    2548:	57 e4       	ldi	r21, 0x47	; 71
    254a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    254e:	18 16       	cp	r1, r24
    2550:	4c f5       	brge	.+82     	; 0x25a4 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2552:	6f a1       	ldd	r22, Y+39	; 0x27
    2554:	78 a5       	ldd	r23, Y+40	; 0x28
    2556:	89 a5       	ldd	r24, Y+41	; 0x29
    2558:	9a a5       	ldd	r25, Y+42	; 0x2a
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e2       	ldi	r20, 0x20	; 32
    2560:	51 e4       	ldi	r21, 0x41	; 65
    2562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	bc 01       	movw	r22, r24
    256c:	cd 01       	movw	r24, r26
    256e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9a a3       	std	Y+34, r25	; 0x22
    2578:	89 a3       	std	Y+33, r24	; 0x21
    257a:	0f c0       	rjmp	.+30     	; 0x259a <LCD_sendCommand+0x1c0>
    257c:	88 ec       	ldi	r24, 0xC8	; 200
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	98 a3       	std	Y+32, r25	; 0x20
    2582:	8f 8f       	std	Y+31, r24	; 0x1f
    2584:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2586:	98 a1       	ldd	r25, Y+32	; 0x20
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <LCD_sendCommand+0x1ae>
    258c:	98 a3       	std	Y+32, r25	; 0x20
    258e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2590:	89 a1       	ldd	r24, Y+33	; 0x21
    2592:	9a a1       	ldd	r25, Y+34	; 0x22
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	9a a3       	std	Y+34, r25	; 0x22
    2598:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259a:	89 a1       	ldd	r24, Y+33	; 0x21
    259c:	9a a1       	ldd	r25, Y+34	; 0x22
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	69 f7       	brne	.-38     	; 0x257c <LCD_sendCommand+0x1a2>
    25a2:	14 c0       	rjmp	.+40     	; 0x25cc <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a4:	6b a1       	ldd	r22, Y+35	; 0x23
    25a6:	7c a1       	ldd	r23, Y+36	; 0x24
    25a8:	8d a1       	ldd	r24, Y+37	; 0x25
    25aa:	9e a1       	ldd	r25, Y+38	; 0x26
    25ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9a a3       	std	Y+34, r25	; 0x22
    25b6:	89 a3       	std	Y+33, r24	; 0x21
    25b8:	89 a1       	ldd	r24, Y+33	; 0x21
    25ba:	9a a1       	ldd	r25, Y+34	; 0x22
    25bc:	9e 8f       	std	Y+30, r25	; 0x1e
    25be:	8d 8f       	std	Y+29, r24	; 0x1d
    25c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <LCD_sendCommand+0x1ea>
    25c8:	9e 8f       	std	Y+30, r25	; 0x1e
    25ca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	69 ad       	ldd	r22, Y+57	; 0x39
    25d0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <GPIO_writePort>
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	a0 e8       	ldi	r26, 0x80	; 128
    25da:	bf e3       	ldi	r27, 0x3F	; 63
    25dc:	89 8f       	std	Y+25, r24	; 0x19
    25de:	9a 8f       	std	Y+26, r25	; 0x1a
    25e0:	ab 8f       	std	Y+27, r26	; 0x1b
    25e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e4:	69 8d       	ldd	r22, Y+25	; 0x19
    25e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	4a ef       	ldi	r20, 0xFA	; 250
    25f2:	54 e4       	ldi	r21, 0x44	; 68
    25f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	8d 8b       	std	Y+21, r24	; 0x15
    25fe:	9e 8b       	std	Y+22, r25	; 0x16
    2600:	af 8b       	std	Y+23, r26	; 0x17
    2602:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2604:	6d 89       	ldd	r22, Y+21	; 0x15
    2606:	7e 89       	ldd	r23, Y+22	; 0x16
    2608:	8f 89       	ldd	r24, Y+23	; 0x17
    260a:	98 8d       	ldd	r25, Y+24	; 0x18
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e8       	ldi	r20, 0x80	; 128
    2612:	5f e3       	ldi	r21, 0x3F	; 63
    2614:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2618:	88 23       	and	r24, r24
    261a:	2c f4       	brge	.+10     	; 0x2626 <LCD_sendCommand+0x24c>
		__ticks = 1;
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	9c 8b       	std	Y+20, r25	; 0x14
    2622:	8b 8b       	std	Y+19, r24	; 0x13
    2624:	3f c0       	rjmp	.+126    	; 0x26a4 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2626:	6d 89       	ldd	r22, Y+21	; 0x15
    2628:	7e 89       	ldd	r23, Y+22	; 0x16
    262a:	8f 89       	ldd	r24, Y+23	; 0x17
    262c:	98 8d       	ldd	r25, Y+24	; 0x18
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	3f ef       	ldi	r19, 0xFF	; 255
    2632:	4f e7       	ldi	r20, 0x7F	; 127
    2634:	57 e4       	ldi	r21, 0x47	; 71
    2636:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    263a:	18 16       	cp	r1, r24
    263c:	4c f5       	brge	.+82     	; 0x2690 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263e:	69 8d       	ldd	r22, Y+25	; 0x19
    2640:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2642:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2644:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e2       	ldi	r20, 0x20	; 32
    264c:	51 e4       	ldi	r21, 0x41	; 65
    264e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	bc 01       	movw	r22, r24
    2658:	cd 01       	movw	r24, r26
    265a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	9c 8b       	std	Y+20, r25	; 0x14
    2664:	8b 8b       	std	Y+19, r24	; 0x13
    2666:	0f c0       	rjmp	.+30     	; 0x2686 <LCD_sendCommand+0x2ac>
    2668:	88 ec       	ldi	r24, 0xC8	; 200
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	9a 8b       	std	Y+18, r25	; 0x12
    266e:	89 8b       	std	Y+17, r24	; 0x11
    2670:	89 89       	ldd	r24, Y+17	; 0x11
    2672:	9a 89       	ldd	r25, Y+18	; 0x12
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	f1 f7       	brne	.-4      	; 0x2674 <LCD_sendCommand+0x29a>
    2678:	9a 8b       	std	Y+18, r25	; 0x12
    267a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267c:	8b 89       	ldd	r24, Y+19	; 0x13
    267e:	9c 89       	ldd	r25, Y+20	; 0x14
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	9c 8b       	std	Y+20, r25	; 0x14
    2684:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2686:	8b 89       	ldd	r24, Y+19	; 0x13
    2688:	9c 89       	ldd	r25, Y+20	; 0x14
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	69 f7       	brne	.-38     	; 0x2668 <LCD_sendCommand+0x28e>
    268e:	14 c0       	rjmp	.+40     	; 0x26b8 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2690:	6d 89       	ldd	r22, Y+21	; 0x15
    2692:	7e 89       	ldd	r23, Y+22	; 0x16
    2694:	8f 89       	ldd	r24, Y+23	; 0x17
    2696:	98 8d       	ldd	r25, Y+24	; 0x18
    2698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	9c 8b       	std	Y+20, r25	; 0x14
    26a2:	8b 8b       	std	Y+19, r24	; 0x13
    26a4:	8b 89       	ldd	r24, Y+19	; 0x13
    26a6:	9c 89       	ldd	r25, Y+20	; 0x14
    26a8:	98 8b       	std	Y+16, r25	; 0x10
    26aa:	8f 87       	std	Y+15, r24	; 0x0f
    26ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ae:	98 89       	ldd	r25, Y+16	; 0x10
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	f1 f7       	brne	.-4      	; 0x26b0 <LCD_sendCommand+0x2d6>
    26b4:	98 8b       	std	Y+16, r25	; 0x10
    26b6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	61 e0       	ldi	r22, 0x01	; 1
    26bc:	40 e0       	ldi	r20, 0x00	; 0
    26be:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_writePin>
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	a0 e8       	ldi	r26, 0x80	; 128
    26c8:	bf e3       	ldi	r27, 0x3F	; 63
    26ca:	8b 87       	std	Y+11, r24	; 0x0b
    26cc:	9c 87       	std	Y+12, r25	; 0x0c
    26ce:	ad 87       	std	Y+13, r26	; 0x0d
    26d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	4a ef       	ldi	r20, 0xFA	; 250
    26e0:	54 e4       	ldi	r21, 0x44	; 68
    26e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	8f 83       	std	Y+7, r24	; 0x07
    26ec:	98 87       	std	Y+8, r25	; 0x08
    26ee:	a9 87       	std	Y+9, r26	; 0x09
    26f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26f2:	6f 81       	ldd	r22, Y+7	; 0x07
    26f4:	78 85       	ldd	r23, Y+8	; 0x08
    26f6:	89 85       	ldd	r24, Y+9	; 0x09
    26f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e8       	ldi	r20, 0x80	; 128
    2700:	5f e3       	ldi	r21, 0x3F	; 63
    2702:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2706:	88 23       	and	r24, r24
    2708:	2c f4       	brge	.+10     	; 0x2714 <LCD_sendCommand+0x33a>
		__ticks = 1;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	9e 83       	std	Y+6, r25	; 0x06
    2710:	8d 83       	std	Y+5, r24	; 0x05
    2712:	3f c0       	rjmp	.+126    	; 0x2792 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2714:	6f 81       	ldd	r22, Y+7	; 0x07
    2716:	78 85       	ldd	r23, Y+8	; 0x08
    2718:	89 85       	ldd	r24, Y+9	; 0x09
    271a:	9a 85       	ldd	r25, Y+10	; 0x0a
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	3f ef       	ldi	r19, 0xFF	; 255
    2720:	4f e7       	ldi	r20, 0x7F	; 127
    2722:	57 e4       	ldi	r21, 0x47	; 71
    2724:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2728:	18 16       	cp	r1, r24
    272a:	4c f5       	brge	.+82     	; 0x277e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272c:	6b 85       	ldd	r22, Y+11	; 0x0b
    272e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2730:	8d 85       	ldd	r24, Y+13	; 0x0d
    2732:	9e 85       	ldd	r25, Y+14	; 0x0e
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e2       	ldi	r20, 0x20	; 32
    273a:	51 e4       	ldi	r21, 0x41	; 65
    273c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	bc 01       	movw	r22, r24
    2746:	cd 01       	movw	r24, r26
    2748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	9e 83       	std	Y+6, r25	; 0x06
    2752:	8d 83       	std	Y+5, r24	; 0x05
    2754:	0f c0       	rjmp	.+30     	; 0x2774 <LCD_sendCommand+0x39a>
    2756:	88 ec       	ldi	r24, 0xC8	; 200
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	9c 83       	std	Y+4, r25	; 0x04
    275c:	8b 83       	std	Y+3, r24	; 0x03
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	9c 81       	ldd	r25, Y+4	; 0x04
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <LCD_sendCommand+0x388>
    2766:	9c 83       	std	Y+4, r25	; 0x04
    2768:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276a:	8d 81       	ldd	r24, Y+5	; 0x05
    276c:	9e 81       	ldd	r25, Y+6	; 0x06
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	9e 83       	std	Y+6, r25	; 0x06
    2772:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2774:	8d 81       	ldd	r24, Y+5	; 0x05
    2776:	9e 81       	ldd	r25, Y+6	; 0x06
    2778:	00 97       	sbiw	r24, 0x00	; 0
    277a:	69 f7       	brne	.-38     	; 0x2756 <LCD_sendCommand+0x37c>
    277c:	14 c0       	rjmp	.+40     	; 0x27a6 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277e:	6f 81       	ldd	r22, Y+7	; 0x07
    2780:	78 85       	ldd	r23, Y+8	; 0x08
    2782:	89 85       	ldd	r24, Y+9	; 0x09
    2784:	9a 85       	ldd	r25, Y+10	; 0x0a
    2786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	9e 83       	std	Y+6, r25	; 0x06
    2790:	8d 83       	std	Y+5, r24	; 0x05
    2792:	8d 81       	ldd	r24, Y+5	; 0x05
    2794:	9e 81       	ldd	r25, Y+6	; 0x06
    2796:	9a 83       	std	Y+2, r25	; 0x02
    2798:	89 83       	std	Y+1, r24	; 0x01
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	9a 81       	ldd	r25, Y+2	; 0x02
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	f1 f7       	brne	.-4      	; 0x279e <LCD_sendCommand+0x3c4>
    27a2:	9a 83       	std	Y+2, r25	; 0x02
    27a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    27a6:	e9 96       	adiw	r28, 0x39	; 57
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	e9 97       	sbiw	r28, 0x39	; 57
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	60 e0       	ldi	r22, 0x00	; 0
    27d2:	41 e0       	ldi	r20, 0x01	; 1
    27d4:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_writePin>
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	a0 e8       	ldi	r26, 0x80	; 128
    27de:	bf e3       	ldi	r27, 0x3F	; 63
    27e0:	8d ab       	std	Y+53, r24	; 0x35
    27e2:	9e ab       	std	Y+54, r25	; 0x36
    27e4:	af ab       	std	Y+55, r26	; 0x37
    27e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e8:	6d a9       	ldd	r22, Y+53	; 0x35
    27ea:	7e a9       	ldd	r23, Y+54	; 0x36
    27ec:	8f a9       	ldd	r24, Y+55	; 0x37
    27ee:	98 ad       	ldd	r25, Y+56	; 0x38
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	4a ef       	ldi	r20, 0xFA	; 250
    27f6:	54 e4       	ldi	r21, 0x44	; 68
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	89 ab       	std	Y+49, r24	; 0x31
    2802:	9a ab       	std	Y+50, r25	; 0x32
    2804:	ab ab       	std	Y+51, r26	; 0x33
    2806:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2808:	69 a9       	ldd	r22, Y+49	; 0x31
    280a:	7a a9       	ldd	r23, Y+50	; 0x32
    280c:	8b a9       	ldd	r24, Y+51	; 0x33
    280e:	9c a9       	ldd	r25, Y+52	; 0x34
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e8       	ldi	r20, 0x80	; 128
    2816:	5f e3       	ldi	r21, 0x3F	; 63
    2818:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    281c:	88 23       	and	r24, r24
    281e:	2c f4       	brge	.+10     	; 0x282a <LCD_displayCharacter+0x72>
		__ticks = 1;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	98 ab       	std	Y+48, r25	; 0x30
    2826:	8f a7       	std	Y+47, r24	; 0x2f
    2828:	3f c0       	rjmp	.+126    	; 0x28a8 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    282a:	69 a9       	ldd	r22, Y+49	; 0x31
    282c:	7a a9       	ldd	r23, Y+50	; 0x32
    282e:	8b a9       	ldd	r24, Y+51	; 0x33
    2830:	9c a9       	ldd	r25, Y+52	; 0x34
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	3f ef       	ldi	r19, 0xFF	; 255
    2836:	4f e7       	ldi	r20, 0x7F	; 127
    2838:	57 e4       	ldi	r21, 0x47	; 71
    283a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    283e:	18 16       	cp	r1, r24
    2840:	4c f5       	brge	.+82     	; 0x2894 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2842:	6d a9       	ldd	r22, Y+53	; 0x35
    2844:	7e a9       	ldd	r23, Y+54	; 0x36
    2846:	8f a9       	ldd	r24, Y+55	; 0x37
    2848:	98 ad       	ldd	r25, Y+56	; 0x38
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e2       	ldi	r20, 0x20	; 32
    2850:	51 e4       	ldi	r21, 0x41	; 65
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	98 ab       	std	Y+48, r25	; 0x30
    2868:	8f a7       	std	Y+47, r24	; 0x2f
    286a:	0f c0       	rjmp	.+30     	; 0x288a <LCD_displayCharacter+0xd2>
    286c:	88 ec       	ldi	r24, 0xC8	; 200
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	9e a7       	std	Y+46, r25	; 0x2e
    2872:	8d a7       	std	Y+45, r24	; 0x2d
    2874:	8d a5       	ldd	r24, Y+45	; 0x2d
    2876:	9e a5       	ldd	r25, Y+46	; 0x2e
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	f1 f7       	brne	.-4      	; 0x2878 <LCD_displayCharacter+0xc0>
    287c:	9e a7       	std	Y+46, r25	; 0x2e
    287e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2880:	8f a5       	ldd	r24, Y+47	; 0x2f
    2882:	98 a9       	ldd	r25, Y+48	; 0x30
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	98 ab       	std	Y+48, r25	; 0x30
    2888:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288a:	8f a5       	ldd	r24, Y+47	; 0x2f
    288c:	98 a9       	ldd	r25, Y+48	; 0x30
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	69 f7       	brne	.-38     	; 0x286c <LCD_displayCharacter+0xb4>
    2892:	14 c0       	rjmp	.+40     	; 0x28bc <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2894:	69 a9       	ldd	r22, Y+49	; 0x31
    2896:	7a a9       	ldd	r23, Y+50	; 0x32
    2898:	8b a9       	ldd	r24, Y+51	; 0x33
    289a:	9c a9       	ldd	r25, Y+52	; 0x34
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	98 ab       	std	Y+48, r25	; 0x30
    28a6:	8f a7       	std	Y+47, r24	; 0x2f
    28a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    28aa:	98 a9       	ldd	r25, Y+48	; 0x30
    28ac:	9c a7       	std	Y+44, r25	; 0x2c
    28ae:	8b a7       	std	Y+43, r24	; 0x2b
    28b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    28b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <LCD_displayCharacter+0xfc>
    28b8:	9c a7       	std	Y+44, r25	; 0x2c
    28ba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	61 e0       	ldi	r22, 0x01	; 1
    28c0:	41 e0       	ldi	r20, 0x01	; 1
    28c2:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_writePin>
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	a0 e8       	ldi	r26, 0x80	; 128
    28cc:	bf e3       	ldi	r27, 0x3F	; 63
    28ce:	8f a3       	std	Y+39, r24	; 0x27
    28d0:	98 a7       	std	Y+40, r25	; 0x28
    28d2:	a9 a7       	std	Y+41, r26	; 0x29
    28d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d6:	6f a1       	ldd	r22, Y+39	; 0x27
    28d8:	78 a5       	ldd	r23, Y+40	; 0x28
    28da:	89 a5       	ldd	r24, Y+41	; 0x29
    28dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	4a ef       	ldi	r20, 0xFA	; 250
    28e4:	54 e4       	ldi	r21, 0x44	; 68
    28e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	8b a3       	std	Y+35, r24	; 0x23
    28f0:	9c a3       	std	Y+36, r25	; 0x24
    28f2:	ad a3       	std	Y+37, r26	; 0x25
    28f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28f6:	6b a1       	ldd	r22, Y+35	; 0x23
    28f8:	7c a1       	ldd	r23, Y+36	; 0x24
    28fa:	8d a1       	ldd	r24, Y+37	; 0x25
    28fc:	9e a1       	ldd	r25, Y+38	; 0x26
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e8       	ldi	r20, 0x80	; 128
    2904:	5f e3       	ldi	r21, 0x3F	; 63
    2906:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    290a:	88 23       	and	r24, r24
    290c:	2c f4       	brge	.+10     	; 0x2918 <LCD_displayCharacter+0x160>
		__ticks = 1;
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	9a a3       	std	Y+34, r25	; 0x22
    2914:	89 a3       	std	Y+33, r24	; 0x21
    2916:	3f c0       	rjmp	.+126    	; 0x2996 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2918:	6b a1       	ldd	r22, Y+35	; 0x23
    291a:	7c a1       	ldd	r23, Y+36	; 0x24
    291c:	8d a1       	ldd	r24, Y+37	; 0x25
    291e:	9e a1       	ldd	r25, Y+38	; 0x26
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	3f ef       	ldi	r19, 0xFF	; 255
    2924:	4f e7       	ldi	r20, 0x7F	; 127
    2926:	57 e4       	ldi	r21, 0x47	; 71
    2928:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    292c:	18 16       	cp	r1, r24
    292e:	4c f5       	brge	.+82     	; 0x2982 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2930:	6f a1       	ldd	r22, Y+39	; 0x27
    2932:	78 a5       	ldd	r23, Y+40	; 0x28
    2934:	89 a5       	ldd	r24, Y+41	; 0x29
    2936:	9a a5       	ldd	r25, Y+42	; 0x2a
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e2       	ldi	r20, 0x20	; 32
    293e:	51 e4       	ldi	r21, 0x41	; 65
    2940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	9a a3       	std	Y+34, r25	; 0x22
    2956:	89 a3       	std	Y+33, r24	; 0x21
    2958:	0f c0       	rjmp	.+30     	; 0x2978 <LCD_displayCharacter+0x1c0>
    295a:	88 ec       	ldi	r24, 0xC8	; 200
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	98 a3       	std	Y+32, r25	; 0x20
    2960:	8f 8f       	std	Y+31, r24	; 0x1f
    2962:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2964:	98 a1       	ldd	r25, Y+32	; 0x20
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	f1 f7       	brne	.-4      	; 0x2966 <LCD_displayCharacter+0x1ae>
    296a:	98 a3       	std	Y+32, r25	; 0x20
    296c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296e:	89 a1       	ldd	r24, Y+33	; 0x21
    2970:	9a a1       	ldd	r25, Y+34	; 0x22
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	9a a3       	std	Y+34, r25	; 0x22
    2976:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2978:	89 a1       	ldd	r24, Y+33	; 0x21
    297a:	9a a1       	ldd	r25, Y+34	; 0x22
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	69 f7       	brne	.-38     	; 0x295a <LCD_displayCharacter+0x1a2>
    2980:	14 c0       	rjmp	.+40     	; 0x29aa <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2982:	6b a1       	ldd	r22, Y+35	; 0x23
    2984:	7c a1       	ldd	r23, Y+36	; 0x24
    2986:	8d a1       	ldd	r24, Y+37	; 0x25
    2988:	9e a1       	ldd	r25, Y+38	; 0x26
    298a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	9a a3       	std	Y+34, r25	; 0x22
    2994:	89 a3       	std	Y+33, r24	; 0x21
    2996:	89 a1       	ldd	r24, Y+33	; 0x21
    2998:	9a a1       	ldd	r25, Y+34	; 0x22
    299a:	9e 8f       	std	Y+30, r25	; 0x1e
    299c:	8d 8f       	std	Y+29, r24	; 0x1d
    299e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <LCD_displayCharacter+0x1ea>
    29a6:	9e 8f       	std	Y+30, r25	; 0x1e
    29a8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	69 ad       	ldd	r22, Y+57	; 0x39
    29ae:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <GPIO_writePort>
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	a0 e8       	ldi	r26, 0x80	; 128
    29b8:	bf e3       	ldi	r27, 0x3F	; 63
    29ba:	89 8f       	std	Y+25, r24	; 0x19
    29bc:	9a 8f       	std	Y+26, r25	; 0x1a
    29be:	ab 8f       	std	Y+27, r26	; 0x1b
    29c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c2:	69 8d       	ldd	r22, Y+25	; 0x19
    29c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	4a ef       	ldi	r20, 0xFA	; 250
    29d0:	54 e4       	ldi	r21, 0x44	; 68
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	8d 8b       	std	Y+21, r24	; 0x15
    29dc:	9e 8b       	std	Y+22, r25	; 0x16
    29de:	af 8b       	std	Y+23, r26	; 0x17
    29e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29e2:	6d 89       	ldd	r22, Y+21	; 0x15
    29e4:	7e 89       	ldd	r23, Y+22	; 0x16
    29e6:	8f 89       	ldd	r24, Y+23	; 0x17
    29e8:	98 8d       	ldd	r25, Y+24	; 0x18
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	2c f4       	brge	.+10     	; 0x2a04 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	9c 8b       	std	Y+20, r25	; 0x14
    2a00:	8b 8b       	std	Y+19, r24	; 0x13
    2a02:	3f c0       	rjmp	.+126    	; 0x2a82 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2a04:	6d 89       	ldd	r22, Y+21	; 0x15
    2a06:	7e 89       	ldd	r23, Y+22	; 0x16
    2a08:	8f 89       	ldd	r24, Y+23	; 0x17
    2a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	3f ef       	ldi	r19, 0xFF	; 255
    2a10:	4f e7       	ldi	r20, 0x7F	; 127
    2a12:	57 e4       	ldi	r21, 0x47	; 71
    2a14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a18:	18 16       	cp	r1, r24
    2a1a:	4c f5       	brge	.+82     	; 0x2a6e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e2       	ldi	r20, 0x20	; 32
    2a2a:	51 e4       	ldi	r21, 0x41	; 65
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	bc 01       	movw	r22, r24
    2a36:	cd 01       	movw	r24, r26
    2a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	9c 8b       	std	Y+20, r25	; 0x14
    2a42:	8b 8b       	std	Y+19, r24	; 0x13
    2a44:	0f c0       	rjmp	.+30     	; 0x2a64 <LCD_displayCharacter+0x2ac>
    2a46:	88 ec       	ldi	r24, 0xC8	; 200
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	9a 8b       	std	Y+18, r25	; 0x12
    2a4c:	89 8b       	std	Y+17, r24	; 0x11
    2a4e:	89 89       	ldd	r24, Y+17	; 0x11
    2a50:	9a 89       	ldd	r25, Y+18	; 0x12
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <LCD_displayCharacter+0x29a>
    2a56:	9a 8b       	std	Y+18, r25	; 0x12
    2a58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	9c 8b       	std	Y+20, r25	; 0x14
    2a62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a64:	8b 89       	ldd	r24, Y+19	; 0x13
    2a66:	9c 89       	ldd	r25, Y+20	; 0x14
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	69 f7       	brne	.-38     	; 0x2a46 <LCD_displayCharacter+0x28e>
    2a6c:	14 c0       	rjmp	.+40     	; 0x2a96 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a70:	7e 89       	ldd	r23, Y+22	; 0x16
    2a72:	8f 89       	ldd	r24, Y+23	; 0x17
    2a74:	98 8d       	ldd	r25, Y+24	; 0x18
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9c 8b       	std	Y+20, r25	; 0x14
    2a80:	8b 8b       	std	Y+19, r24	; 0x13
    2a82:	8b 89       	ldd	r24, Y+19	; 0x13
    2a84:	9c 89       	ldd	r25, Y+20	; 0x14
    2a86:	98 8b       	std	Y+16, r25	; 0x10
    2a88:	8f 87       	std	Y+15, r24	; 0x0f
    2a8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a8c:	98 89       	ldd	r25, Y+16	; 0x10
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <LCD_displayCharacter+0x2d6>
    2a92:	98 8b       	std	Y+16, r25	; 0x10
    2a94:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	61 e0       	ldi	r22, 0x01	; 1
    2a9a:	40 e0       	ldi	r20, 0x00	; 0
    2a9c:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_writePin>
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	a0 e8       	ldi	r26, 0x80	; 128
    2aa6:	bf e3       	ldi	r27, 0x3F	; 63
    2aa8:	8b 87       	std	Y+11, r24	; 0x0b
    2aaa:	9c 87       	std	Y+12, r25	; 0x0c
    2aac:	ad 87       	std	Y+13, r26	; 0x0d
    2aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	4a ef       	ldi	r20, 0xFA	; 250
    2abe:	54 e4       	ldi	r21, 0x44	; 68
    2ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	8f 83       	std	Y+7, r24	; 0x07
    2aca:	98 87       	std	Y+8, r25	; 0x08
    2acc:	a9 87       	std	Y+9, r26	; 0x09
    2ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad2:	78 85       	ldd	r23, Y+8	; 0x08
    2ad4:	89 85       	ldd	r24, Y+9	; 0x09
    2ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e8       	ldi	r20, 0x80	; 128
    2ade:	5f e3       	ldi	r21, 0x3F	; 63
    2ae0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ae4:	88 23       	and	r24, r24
    2ae6:	2c f4       	brge	.+10     	; 0x2af2 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	9e 83       	std	Y+6, r25	; 0x06
    2aee:	8d 83       	std	Y+5, r24	; 0x05
    2af0:	3f c0       	rjmp	.+126    	; 0x2b70 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2af2:	6f 81       	ldd	r22, Y+7	; 0x07
    2af4:	78 85       	ldd	r23, Y+8	; 0x08
    2af6:	89 85       	ldd	r24, Y+9	; 0x09
    2af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	3f ef       	ldi	r19, 0xFF	; 255
    2afe:	4f e7       	ldi	r20, 0x7F	; 127
    2b00:	57 e4       	ldi	r21, 0x47	; 71
    2b02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b06:	18 16       	cp	r1, r24
    2b08:	4c f5       	brge	.+82     	; 0x2b5c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 e2       	ldi	r20, 0x20	; 32
    2b18:	51 e4       	ldi	r21, 0x41	; 65
    2b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	bc 01       	movw	r22, r24
    2b24:	cd 01       	movw	r24, r26
    2b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	9e 83       	std	Y+6, r25	; 0x06
    2b30:	8d 83       	std	Y+5, r24	; 0x05
    2b32:	0f c0       	rjmp	.+30     	; 0x2b52 <LCD_displayCharacter+0x39a>
    2b34:	88 ec       	ldi	r24, 0xC8	; 200
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	9c 83       	std	Y+4, r25	; 0x04
    2b3a:	8b 83       	std	Y+3, r24	; 0x03
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	f1 f7       	brne	.-4      	; 0x2b40 <LCD_displayCharacter+0x388>
    2b44:	9c 83       	std	Y+4, r25	; 0x04
    2b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b48:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	9e 83       	std	Y+6, r25	; 0x06
    2b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b52:	8d 81       	ldd	r24, Y+5	; 0x05
    2b54:	9e 81       	ldd	r25, Y+6	; 0x06
    2b56:	00 97       	sbiw	r24, 0x00	; 0
    2b58:	69 f7       	brne	.-38     	; 0x2b34 <LCD_displayCharacter+0x37c>
    2b5a:	14 c0       	rjmp	.+40     	; 0x2b84 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5e:	78 85       	ldd	r23, Y+8	; 0x08
    2b60:	89 85       	ldd	r24, Y+9	; 0x09
    2b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	9e 83       	std	Y+6, r25	; 0x06
    2b6e:	8d 83       	std	Y+5, r24	; 0x05
    2b70:	8d 81       	ldd	r24, Y+5	; 0x05
    2b72:	9e 81       	ldd	r25, Y+6	; 0x06
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <LCD_displayCharacter+0x3c4>
    2b80:	9a 83       	std	Y+2, r25	; 0x02
    2b82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2b84:	e9 96       	adiw	r28, 0x39	; 57
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	de bf       	out	0x3e, r29	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cd bf       	out	0x3d, r28	; 61
    2b90:	cf 91       	pop	r28
    2b92:	df 91       	pop	r29
    2b94:	08 95       	ret

00002b96 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2b96:	df 93       	push	r29
    2b98:	cf 93       	push	r28
    2b9a:	00 d0       	rcall	.+0      	; 0x2b9c <LCD_displayString+0x6>
    2b9c:	0f 92       	push	r0
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	9b 83       	std	Y+3, r25	; 0x03
    2ba4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ba6:	19 82       	std	Y+1, r1	; 0x01
    2ba8:	0e c0       	rjmp	.+28     	; 0x2bc6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	28 2f       	mov	r18, r24
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	e2 0f       	add	r30, r18
    2bb8:	f3 1f       	adc	r31, r19
    2bba:	80 81       	ld	r24, Z
    2bbc:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_displayCharacter>
		i++;
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	8f 5f       	subi	r24, 0xFF	; 255
    2bc4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	28 2f       	mov	r18, r24
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bce:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	e2 0f       	add	r30, r18
    2bd4:	f3 1f       	adc	r31, r19
    2bd6:	80 81       	ld	r24, Z
    2bd8:	88 23       	and	r24, r24
    2bda:	39 f7       	brne	.-50     	; 0x2baa <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	00 d0       	rcall	.+0      	; 0x2bee <LCD_moveCursor+0x6>
    2bee:	00 d0       	rcall	.+0      	; 0x2bf0 <LCD_moveCursor+0x8>
    2bf0:	0f 92       	push	r0
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    2bf6:	8a 83       	std	Y+2, r24	; 0x02
    2bf8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	28 2f       	mov	r18, r24
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	3d 83       	std	Y+5, r19	; 0x05
    2c02:	2c 83       	std	Y+4, r18	; 0x04
    2c04:	8c 81       	ldd	r24, Y+4	; 0x04
    2c06:	9d 81       	ldd	r25, Y+5	; 0x05
    2c08:	81 30       	cpi	r24, 0x01	; 1
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	c1 f0       	breq	.+48     	; 0x2c3e <LCD_moveCursor+0x56>
    2c0e:	2c 81       	ldd	r18, Y+4	; 0x04
    2c10:	3d 81       	ldd	r19, Y+5	; 0x05
    2c12:	22 30       	cpi	r18, 0x02	; 2
    2c14:	31 05       	cpc	r19, r1
    2c16:	2c f4       	brge	.+10     	; 0x2c22 <LCD_moveCursor+0x3a>
    2c18:	8c 81       	ldd	r24, Y+4	; 0x04
    2c1a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	61 f0       	breq	.+24     	; 0x2c38 <LCD_moveCursor+0x50>
    2c20:	19 c0       	rjmp	.+50     	; 0x2c54 <LCD_moveCursor+0x6c>
    2c22:	2c 81       	ldd	r18, Y+4	; 0x04
    2c24:	3d 81       	ldd	r19, Y+5	; 0x05
    2c26:	22 30       	cpi	r18, 0x02	; 2
    2c28:	31 05       	cpc	r19, r1
    2c2a:	69 f0       	breq	.+26     	; 0x2c46 <LCD_moveCursor+0x5e>
    2c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c30:	83 30       	cpi	r24, 0x03	; 3
    2c32:	91 05       	cpc	r25, r1
    2c34:	61 f0       	breq	.+24     	; 0x2c4e <LCD_moveCursor+0x66>
    2c36:	0e c0       	rjmp	.+28     	; 0x2c54 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2c38:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3a:	89 83       	std	Y+1, r24	; 0x01
    2c3c:	0b c0       	rjmp	.+22     	; 0x2c54 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c40:	80 5c       	subi	r24, 0xC0	; 192
    2c42:	89 83       	std	Y+1, r24	; 0x01
    2c44:	07 c0       	rjmp	.+14     	; 0x2c54 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	80 5f       	subi	r24, 0xF0	; 240
    2c4a:	89 83       	std	Y+1, r24	; 0x01
    2c4c:	03 c0       	rjmp	.+6      	; 0x2c54 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c50:	80 5b       	subi	r24, 0xB0	; 176
    2c52:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	80 68       	ori	r24, 0x80	; 128
    2c58:	0e 94 ed 11 	call	0x23da	; 0x23da <LCD_sendCommand>
}
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	0f 90       	pop	r0
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	08 95       	ret

00002c6c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	00 d0       	rcall	.+0      	; 0x2c72 <LCD_displayStringRowColumn+0x6>
    2c72:	00 d0       	rcall	.+0      	; 0x2c74 <LCD_displayStringRowColumn+0x8>
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    2c78:	89 83       	std	Y+1, r24	; 0x01
    2c7a:	6a 83       	std	Y+2, r22	; 0x02
    2c7c:	5c 83       	std	Y+4, r21	; 0x04
    2c7e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	6a 81       	ldd	r22, Y+2	; 0x02
    2c84:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2c88:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8c:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
}
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	cf 91       	pop	r28
    2c9a:	df 91       	pop	r29
    2c9c:	08 95       	ret

00002c9e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	62 97       	sbiw	r28, 0x12	; 18
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	de bf       	out	0x3e, r29	; 62
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	cd bf       	out	0x3d, r28	; 61
    2cb2:	9a 8b       	std	Y+18, r25	; 0x12
    2cb4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2cb6:	89 89       	ldd	r24, Y+17	; 0x11
    2cb8:	9a 89       	ldd	r25, Y+18	; 0x12
    2cba:	9e 01       	movw	r18, r28
    2cbc:	2f 5f       	subi	r18, 0xFF	; 255
    2cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc0:	b9 01       	movw	r22, r18
    2cc2:	4a e0       	ldi	r20, 0x0A	; 10
    2cc4:	50 e0       	ldi	r21, 0x00	; 0
    2cc6:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <itoa>
   LCD_displayString(buff); /* Display the string */
    2cca:	ce 01       	movw	r24, r28
    2ccc:	01 96       	adiw	r24, 0x01	; 1
    2cce:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayString>
}
    2cd2:	62 96       	adiw	r28, 0x12	; 18
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	f8 94       	cli
    2cd8:	de bf       	out	0x3e, r29	; 62
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	cd bf       	out	0x3d, r28	; 61
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2ce4:	df 93       	push	r29
    2ce6:	cf 93       	push	r28
    2ce8:	cd b7       	in	r28, 0x3d	; 61
    2cea:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	0e 94 ed 11 	call	0x23da	; 0x23da <LCD_sendCommand>
}
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <main>:
systemStateType g_current_hmi_state;

/********************** THE STATE-MACHINE ALGORITHM ***************************/

int main (void)
{
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	00 d0       	rcall	.+0      	; 0x2cfe <main+0x6>
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
	/* Set the initial values and configurations of the application */
	APP_init();
    2d02:	0e 94 a3 05 	call	0xb46	; 0xb46 <APP_init>
	{
		/*
		 * Switch on the value of g_current_hmi_state to determine the desired
		 * next state to proceed with.
		 */
		switch(g_current_hmi_state)
    2d06:	80 91 b8 03 	lds	r24, 0x03B8
    2d0a:	28 2f       	mov	r18, r24
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	3a 83       	std	Y+2, r19	; 0x02
    2d10:	29 83       	std	Y+1, r18	; 0x01
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	9a 81       	ldd	r25, Y+2	; 0x02
    2d16:	85 30       	cpi	r24, 0x05	; 5
    2d18:	91 05       	cpc	r25, r1
    2d1a:	09 f4       	brne	.+2      	; 0x2d1e <main+0x26>
    2d1c:	59 c0       	rjmp	.+178    	; 0x2dd0 <main+0xd8>
    2d1e:	29 81       	ldd	r18, Y+1	; 0x01
    2d20:	3a 81       	ldd	r19, Y+2	; 0x02
    2d22:	26 30       	cpi	r18, 0x06	; 6
    2d24:	31 05       	cpc	r19, r1
    2d26:	04 f5       	brge	.+64     	; 0x2d68 <main+0x70>
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2c:	82 30       	cpi	r24, 0x02	; 2
    2d2e:	91 05       	cpc	r25, r1
    2d30:	09 f4       	brne	.+2      	; 0x2d34 <main+0x3c>
    2d32:	45 c0       	rjmp	.+138    	; 0x2dbe <main+0xc6>
    2d34:	29 81       	ldd	r18, Y+1	; 0x01
    2d36:	3a 81       	ldd	r19, Y+2	; 0x02
    2d38:	23 30       	cpi	r18, 0x03	; 3
    2d3a:	31 05       	cpc	r19, r1
    2d3c:	54 f4       	brge	.+20     	; 0x2d52 <main+0x5a>
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	9a 81       	ldd	r25, Y+2	; 0x02
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	b1 f1       	breq	.+108    	; 0x2db2 <main+0xba>
    2d46:	29 81       	ldd	r18, Y+1	; 0x01
    2d48:	3a 81       	ldd	r19, Y+2	; 0x02
    2d4a:	21 30       	cpi	r18, 0x01	; 1
    2d4c:	31 05       	cpc	r19, r1
    2d4e:	a1 f1       	breq	.+104    	; 0x2db8 <main+0xc0>
    2d50:	da cf       	rjmp	.-76     	; 0x2d06 <main+0xe>
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	9a 81       	ldd	r25, Y+2	; 0x02
    2d56:	83 30       	cpi	r24, 0x03	; 3
    2d58:	91 05       	cpc	r25, r1
    2d5a:	a1 f1       	breq	.+104    	; 0x2dc4 <main+0xcc>
    2d5c:	29 81       	ldd	r18, Y+1	; 0x01
    2d5e:	3a 81       	ldd	r19, Y+2	; 0x02
    2d60:	24 30       	cpi	r18, 0x04	; 4
    2d62:	31 05       	cpc	r19, r1
    2d64:	91 f1       	breq	.+100    	; 0x2dca <main+0xd2>
    2d66:	cf cf       	rjmp	.-98     	; 0x2d06 <main+0xe>
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6c:	88 30       	cpi	r24, 0x08	; 8
    2d6e:	91 05       	cpc	r25, r1
    2d70:	c1 f1       	breq	.+112    	; 0x2de2 <main+0xea>
    2d72:	29 81       	ldd	r18, Y+1	; 0x01
    2d74:	3a 81       	ldd	r19, Y+2	; 0x02
    2d76:	29 30       	cpi	r18, 0x09	; 9
    2d78:	31 05       	cpc	r19, r1
    2d7a:	5c f4       	brge	.+22     	; 0x2d92 <main+0x9a>
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d80:	86 30       	cpi	r24, 0x06	; 6
    2d82:	91 05       	cpc	r25, r1
    2d84:	41 f1       	breq	.+80     	; 0x2dd6 <main+0xde>
    2d86:	29 81       	ldd	r18, Y+1	; 0x01
    2d88:	3a 81       	ldd	r19, Y+2	; 0x02
    2d8a:	27 30       	cpi	r18, 0x07	; 7
    2d8c:	31 05       	cpc	r19, r1
    2d8e:	31 f1       	breq	.+76     	; 0x2ddc <main+0xe4>
    2d90:	ba cf       	rjmp	.-140    	; 0x2d06 <main+0xe>
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	9a 81       	ldd	r25, Y+2	; 0x02
    2d96:	8a 30       	cpi	r24, 0x0A	; 10
    2d98:	91 05       	cpc	r25, r1
    2d9a:	49 f1       	breq	.+82     	; 0x2dee <main+0xf6>
    2d9c:	29 81       	ldd	r18, Y+1	; 0x01
    2d9e:	3a 81       	ldd	r19, Y+2	; 0x02
    2da0:	2a 30       	cpi	r18, 0x0A	; 10
    2da2:	31 05       	cpc	r19, r1
    2da4:	0c f1       	brlt	.+66     	; 0x2de8 <main+0xf0>
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	9a 81       	ldd	r25, Y+2	; 0x02
    2daa:	8b 30       	cpi	r24, 0x0B	; 11
    2dac:	91 05       	cpc	r25, r1
    2dae:	11 f1       	breq	.+68     	; 0x2df4 <main+0xfc>
    2db0:	aa cf       	rjmp	.-172    	; 0x2d06 <main+0xe>
			 * display welcome messages to the user before navigating to the
			 * NEW_PASSWORD state.
			 */
			case FIRST_RUN			:
			{
				APP_vFirstRunState();
    2db2:	0e 94 fd 05 	call	0xbfa	; 0xbfa <APP_vFirstRunState>
    2db6:	a7 cf       	rjmp	.-178    	; 0x2d06 <main+0xe>
			 * CONTROL_ECU and then poll until it receives the desired new state
			 * from the CONTROL_ECU.
			 */
			case NEW_PASSWORD		:
			{
				APP_vNewPasswordState();
    2db8:	0e 94 14 06 	call	0xc28	; 0xc28 <APP_vNewPasswordState>
    2dbc:	a4 cf       	rjmp	.-184    	; 0x2d06 <main+0xe>
			 * will send this password to the CONTROL_ECU and then poll until it
			 * receives the desired new state from the CONTROL_ECU.
			 */
			case CONFIRM_PASSWORD	:
			{
				APP_vConfirmNewPasswordState();
    2dbe:	0e 94 2b 06 	call	0xc56	; 0xc56 <APP_vConfirmNewPasswordState>
    2dc2:	a1 cf       	rjmp	.-190    	; 0x2d06 <main+0xe>
			 * user that their passwords were matched. After that, it will poll
			 * until receiving the desired new state from the CONTROL_ECU.
			 */
			case MATCHED_PASSWORD	:
			{
				APP_vMatchedPasswordState();
    2dc4:	0e 94 3e 06 	call	0xc7c	; 0xc7c <APP_vMatchedPasswordState>
    2dc8:	9e cf       	rjmp	.-196    	; 0x2d06 <main+0xe>
			 * user that their passwords were mismatched. After that, it will
			 * poll until receiving the desired new state from the CONTROL_ECU.
			 */
			case MISMACHTED_PASSWORD:
			{
				APP_vMisMacthedPasswordState();
    2dca:	0e 94 4f 06 	call	0xc9e	; 0xc9e <APP_vMisMacthedPasswordState>
    2dce:	9b cf       	rjmp	.-202    	; 0x2d06 <main+0xe>
			 * this password to the CONTROL_ECU and then poll until it receives
			 * the desired new state from the CONTROL_ECU.
			 */
			case ENTER_PASSWORD		:
			{
				APP_vEnterThePasswordState();
    2dd0:	0e 94 65 06 	call	0xcca	; 0xcca <APP_vEnterThePasswordState>
    2dd4:	98 cf       	rjmp	.-208    	; 0x2d06 <main+0xe>
			 * change the password (-). After that, it will poll until receiving
			 * the desired new state from the CONTROL_ECU.
			 */
			case MAIN_MENU			:
			{
				APP_vMainMenuState();
    2dd6:	0e 94 81 06 	call	0xd02	; 0xd02 <APP_vMainMenuState>
    2dda:	95 cf       	rjmp	.-214    	; 0x2d06 <main+0xe>
			 * that, it will poll until receiving the desired new state from the
			 * CONTROL_ECU.
			 */
			case DOOR_OPEN			:
			{
				APP_vDoorOpenState();
    2ddc:	0e 94 93 06 	call	0xd26	; 0xd26 <APP_vDoorOpenState>
    2de0:	92 cf       	rjmp	.-220    	; 0x2d06 <main+0xe>
			 * that, it will poll until receiving the desired new state from the
			 * CONTROL_ECU.
			 */
			case DOOR_HOLD			:
			{
				APP_vDoorHoldState();
    2de2:	0e 94 a4 06 	call	0xd48	; 0xd48 <APP_vDoorHoldState>
    2de6:	8f cf       	rjmp	.-226    	; 0x2d06 <main+0xe>
			 * that, it will poll until receiving the desired new state from the
			 * CONTROL_ECU.
			 */
			case DOOR_CLOSE			:
			{
				APP_vDoorCloseState();
    2de8:	0e 94 b5 06 	call	0xd6a	; 0xd6a <APP_vDoorCloseState>
    2dec:	8c cf       	rjmp	.-232    	; 0x2d06 <main+0xe>
			 * user that their password is wrong. After that, it will poll until
			 * receiving the desired new state from the CONTROL_ECU.
			 */
			case WRONG_PASSWORD		:
			{
				APP_vWrongPasswordState();
    2dee:	0e 94 c6 06 	call	0xd8c	; 0xd8c <APP_vWrongPasswordState>
    2df2:	89 cf       	rjmp	.-238    	; 0x2d06 <main+0xe>
			 * for a certain part of time. After that, it will poll until receiving
			 * the desired new state from the CONTROL_ECU.
			 */
			case LOCK_SYSTEM		:
			{
				APP_vLockSystemState();
    2df4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <APP_vLockSystemState>
    2df8:	86 cf       	rjmp	.-244    	; 0x2d06 <main+0xe>

00002dfa <__vector_9>:
 *					\note:	Section #2:	Interrupt Service Routines (ISRs)		*
********************************************************************************/

/* ISR that will execute when "Timer/Counter1 Overflow" interrupt occurs */
ISR(TIMER1_OVF_vect)
{
    2dfa:	1f 92       	push	r1
    2dfc:	0f 92       	push	r0
    2dfe:	0f b6       	in	r0, 0x3f	; 63
    2e00:	0f 92       	push	r0
    2e02:	11 24       	eor	r1, r1
    2e04:	2f 93       	push	r18
    2e06:	3f 93       	push	r19
    2e08:	4f 93       	push	r20
    2e0a:	5f 93       	push	r21
    2e0c:	6f 93       	push	r22
    2e0e:	7f 93       	push	r23
    2e10:	8f 93       	push	r24
    2e12:	9f 93       	push	r25
    2e14:	af 93       	push	r26
    2e16:	bf 93       	push	r27
    2e18:	ef 93       	push	r30
    2e1a:	ff 93       	push	r31
    2e1c:	df 93       	push	r29
    2e1e:	cf 93       	push	r28
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62
	 *	In normal operation, the Timer/Counter Overflow Flag (TOV1) will
	 *	be set in the same timer clock cycle as the TCNT1 becomes zero.
	 */

	/* Checks if the global pointer g_NormalcallBackPtr is not pointing to NULL. */
	if(Timer1_callbacks.g_NormalcallBackPtr != NULL_PTR)
    2e24:	80 91 a3 03 	lds	r24, 0x03A3
    2e28:	90 91 a4 03 	lds	r25, 0x03A4
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
    2e2e:	29 f0       	breq	.+10     	; 0x2e3a <__vector_9+0x40>
	{
		/* Call the callback function using pointer to function g_NormalcallBackPtr(); */
		Timer1_callbacks.g_NormalcallBackPtr();
    2e30:	e0 91 a3 03 	lds	r30, 0x03A3
    2e34:	f0 91 a4 03 	lds	r31, 0x03A4
    2e38:	09 95       	icall
	}
}
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	ff 91       	pop	r31
    2e40:	ef 91       	pop	r30
    2e42:	bf 91       	pop	r27
    2e44:	af 91       	pop	r26
    2e46:	9f 91       	pop	r25
    2e48:	8f 91       	pop	r24
    2e4a:	7f 91       	pop	r23
    2e4c:	6f 91       	pop	r22
    2e4e:	5f 91       	pop	r21
    2e50:	4f 91       	pop	r20
    2e52:	3f 91       	pop	r19
    2e54:	2f 91       	pop	r18
    2e56:	0f 90       	pop	r0
    2e58:	0f be       	out	0x3f, r0	; 63
    2e5a:	0f 90       	pop	r0
    2e5c:	1f 90       	pop	r1
    2e5e:	18 95       	reti

00002e60 <__vector_7>:

/* ISR that will execute when "Timer/Counter1 Compare Match A" interrupt occurs */
ISR(TIMER1_COMPA_vect)
{
    2e60:	1f 92       	push	r1
    2e62:	0f 92       	push	r0
    2e64:	0f b6       	in	r0, 0x3f	; 63
    2e66:	0f 92       	push	r0
    2e68:	11 24       	eor	r1, r1
    2e6a:	2f 93       	push	r18
    2e6c:	3f 93       	push	r19
    2e6e:	4f 93       	push	r20
    2e70:	5f 93       	push	r21
    2e72:	6f 93       	push	r22
    2e74:	7f 93       	push	r23
    2e76:	8f 93       	push	r24
    2e78:	9f 93       	push	r25
    2e7a:	af 93       	push	r26
    2e7c:	bf 93       	push	r27
    2e7e:	ef 93       	push	r30
    2e80:	ff 93       	push	r31
    2e82:	df 93       	push	r29
    2e84:	cf 93       	push	r28
    2e86:	cd b7       	in	r28, 0x3d	; 61
    2e88:	de b7       	in	r29, 0x3e	; 62
	 *	An interrupt can be generated at each time the counter value reaches the
	 *	TOP value by using the OCF1A to define the TOP value.
	 */

	/* Checks if the global pointer g_CTCcallBackPtr is not pointing to NULL. */
	if(Timer1_callbacks.g_CTCcallBackPtr != NULL_PTR)
    2e8a:	80 91 a5 03 	lds	r24, 0x03A5
    2e8e:	90 91 a6 03 	lds	r25, 0x03A6
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	29 f0       	breq	.+10     	; 0x2ea0 <__vector_7+0x40>
	{
		/* Call the callback function using pointer to function g_CTCcallBackPtr(); */
		Timer1_callbacks.g_CTCcallBackPtr();
    2e96:	e0 91 a5 03 	lds	r30, 0x03A5
    2e9a:	f0 91 a6 03 	lds	r31, 0x03A6
    2e9e:	09 95       	icall
	}
}
    2ea0:	cf 91       	pop	r28
    2ea2:	df 91       	pop	r29
    2ea4:	ff 91       	pop	r31
    2ea6:	ef 91       	pop	r30
    2ea8:	bf 91       	pop	r27
    2eaa:	af 91       	pop	r26
    2eac:	9f 91       	pop	r25
    2eae:	8f 91       	pop	r24
    2eb0:	7f 91       	pop	r23
    2eb2:	6f 91       	pop	r22
    2eb4:	5f 91       	pop	r21
    2eb6:	4f 91       	pop	r20
    2eb8:	3f 91       	pop	r19
    2eba:	2f 91       	pop	r18
    2ebc:	0f 90       	pop	r0
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	0f 90       	pop	r0
    2ec2:	1f 90       	pop	r1
    2ec4:	18 95       	reti

00002ec6 <TIMER1_vStartTimerNormal>:

/**
 *	\see	:	TIMER1_vStartTimerNormal function prototype in timer1.h.
 */
void TIMER1_vStartTimerNormal(Timer1_intervalType interval_in_seconds)
{
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
    2ece:	2c 97       	sbiw	r28, 0x0c	; 12
    2ed0:	0f b6       	in	r0, 0x3f	; 63
    2ed2:	f8 94       	cli
    2ed4:	de bf       	out	0x3e, r29	; 62
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	cd bf       	out	0x3d, r28	; 61
    2eda:	8f 83       	std	Y+7, r24	; 0x07
	/* Configuration struct members:		  {mode , prescaler, initial,  compare} */
	Timer1_ConfigType timer1_configurations = {NORMAL, F_CPU_256, PRELOAD, NOT_CTC};
    2edc:	ce 01       	movw	r24, r28
    2ede:	01 96       	adiw	r24, 0x01	; 1
    2ee0:	99 87       	std	Y+9, r25	; 0x09
    2ee2:	88 87       	std	Y+8, r24	; 0x08
    2ee4:	e4 e9       	ldi	r30, 0x94	; 148
    2ee6:	f3 e0       	ldi	r31, 0x03	; 3
    2ee8:	fb 87       	std	Y+11, r31	; 0x0b
    2eea:	ea 87       	std	Y+10, r30	; 0x0a
    2eec:	f6 e0       	ldi	r31, 0x06	; 6
    2eee:	fc 87       	std	Y+12, r31	; 0x0c
    2ef0:	ea 85       	ldd	r30, Y+10	; 0x0a
    2ef2:	fb 85       	ldd	r31, Y+11	; 0x0b
    2ef4:	00 80       	ld	r0, Z
    2ef6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ef8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2efa:	01 96       	adiw	r24, 0x01	; 1
    2efc:	9b 87       	std	Y+11, r25	; 0x0b
    2efe:	8a 87       	std	Y+10, r24	; 0x0a
    2f00:	e8 85       	ldd	r30, Y+8	; 0x08
    2f02:	f9 85       	ldd	r31, Y+9	; 0x09
    2f04:	00 82       	st	Z, r0
    2f06:	88 85       	ldd	r24, Y+8	; 0x08
    2f08:	99 85       	ldd	r25, Y+9	; 0x09
    2f0a:	01 96       	adiw	r24, 0x01	; 1
    2f0c:	99 87       	std	Y+9, r25	; 0x09
    2f0e:	88 87       	std	Y+8, r24	; 0x08
    2f10:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f12:	91 50       	subi	r25, 0x01	; 1
    2f14:	9c 87       	std	Y+12, r25	; 0x0c
    2f16:	ec 85       	ldd	r30, Y+12	; 0x0c
    2f18:	ee 23       	and	r30, r30
    2f1a:	51 f7       	brne	.-44     	; 0x2ef0 <TIMER1_vStartTimerNormal+0x2a>

	/* Pass all desired configurations to the Timer1_init function */
	Timer1_init(&timer1_configurations);
    2f1c:	ce 01       	movw	r24, r28
    2f1e:	01 96       	adiw	r24, 0x01	; 1
    2f20:	0e 94 05 18 	call	0x300a	; 0x300a <Timer1_init>

	/* Start the timer counting decrementally from the given time interval till zero */
	timer1_counter = interval_in_seconds;
    2f24:	8f 81       	ldd	r24, Y+7	; 0x07
    2f26:	80 93 ba 03 	sts	0x03BA, r24

	/* Poll until reaching zero = required interval_in_seconds achieved */
	while(timer1_counter != ZERO);
    2f2a:	80 91 ba 03 	lds	r24, 0x03BA
    2f2e:	88 23       	and	r24, r24
    2f30:	e1 f7       	brne	.-8      	; 0x2f2a <TIMER1_vStartTimerNormal+0x64>
}
    2f32:	2c 96       	adiw	r28, 0x0c	; 12
    2f34:	0f b6       	in	r0, 0x3f	; 63
    2f36:	f8 94       	cli
    2f38:	de bf       	out	0x3e, r29	; 62
    2f3a:	0f be       	out	0x3f, r0	; 63
    2f3c:	cd bf       	out	0x3d, r28	; 61
    2f3e:	cf 91       	pop	r28
    2f40:	df 91       	pop	r29
    2f42:	08 95       	ret

00002f44 <TIMER1_vStartTimerCTC>:

/**
 *	\see	:	TIMER1_vStartTimerCTC function prototype in timer1.h.
 */
void TIMER1_vStartTimerCTC(Timer1_intervalType interval_in_seconds)
{
    2f44:	df 93       	push	r29
    2f46:	cf 93       	push	r28
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
    2f4c:	2c 97       	sbiw	r28, 0x0c	; 12
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	8f 83       	std	Y+7, r24	; 0x07
	/* Configuration struct members:		  {mode , prescaler, initial,  compare} */
	Timer1_ConfigType timer1_configurations = {CTC, F_CPU_256, BOTTOM, COMPARE};
    2f5a:	ce 01       	movw	r24, r28
    2f5c:	01 96       	adiw	r24, 0x01	; 1
    2f5e:	99 87       	std	Y+9, r25	; 0x09
    2f60:	88 87       	std	Y+8, r24	; 0x08
    2f62:	ea e9       	ldi	r30, 0x9A	; 154
    2f64:	f3 e0       	ldi	r31, 0x03	; 3
    2f66:	fb 87       	std	Y+11, r31	; 0x0b
    2f68:	ea 87       	std	Y+10, r30	; 0x0a
    2f6a:	f6 e0       	ldi	r31, 0x06	; 6
    2f6c:	fc 87       	std	Y+12, r31	; 0x0c
    2f6e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2f70:	fb 85       	ldd	r31, Y+11	; 0x0b
    2f72:	00 80       	ld	r0, Z
    2f74:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f76:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f78:	01 96       	adiw	r24, 0x01	; 1
    2f7a:	9b 87       	std	Y+11, r25	; 0x0b
    2f7c:	8a 87       	std	Y+10, r24	; 0x0a
    2f7e:	e8 85       	ldd	r30, Y+8	; 0x08
    2f80:	f9 85       	ldd	r31, Y+9	; 0x09
    2f82:	00 82       	st	Z, r0
    2f84:	88 85       	ldd	r24, Y+8	; 0x08
    2f86:	99 85       	ldd	r25, Y+9	; 0x09
    2f88:	01 96       	adiw	r24, 0x01	; 1
    2f8a:	99 87       	std	Y+9, r25	; 0x09
    2f8c:	88 87       	std	Y+8, r24	; 0x08
    2f8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f90:	91 50       	subi	r25, 0x01	; 1
    2f92:	9c 87       	std	Y+12, r25	; 0x0c
    2f94:	ec 85       	ldd	r30, Y+12	; 0x0c
    2f96:	ee 23       	and	r30, r30
    2f98:	51 f7       	brne	.-44     	; 0x2f6e <TIMER1_vStartTimerCTC+0x2a>

	/* Pass all desired configurations to the Timer1_init function */
	Timer1_init(&timer1_configurations);
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	01 96       	adiw	r24, 0x01	; 1
    2f9e:	0e 94 05 18 	call	0x300a	; 0x300a <Timer1_init>

	/* Start the timer counting decrementally from the given time interval till zero */
	timer1_counter = interval_in_seconds;
    2fa2:	8f 81       	ldd	r24, Y+7	; 0x07
    2fa4:	80 93 ba 03 	sts	0x03BA, r24

	/* Poll until reaching zero = required interval_in_seconds achieved */
	while(timer1_counter != ZERO);
    2fa8:	80 91 ba 03 	lds	r24, 0x03BA
    2fac:	88 23       	and	r24, r24
    2fae:	e1 f7       	brne	.-8      	; 0x2fa8 <TIMER1_vStartTimerCTC+0x64>
}
    2fb0:	2c 96       	adiw	r28, 0x0c	; 12
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	cf 91       	pop	r28
    2fbe:	df 91       	pop	r29
    2fc0:	08 95       	ret

00002fc2 <TIMER1_vStartTimer>:

void TIMER1_vStartTimer(Timer1_intervalType interval_in_seconds)
{
    2fc2:	df 93       	push	r29
    2fc4:	cf 93       	push	r28
    2fc6:	00 d0       	rcall	.+0      	; 0x2fc8 <TIMER1_vStartTimer+0x6>
    2fc8:	0f 92       	push	r0
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	89 83       	std	Y+1, r24	; 0x01
	switch(g_Timer1_mode_of_operation)
    2fd0:	80 91 b9 03 	lds	r24, 0x03B9
    2fd4:	28 2f       	mov	r18, r24
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	3b 83       	std	Y+3, r19	; 0x03
    2fda:	2a 83       	std	Y+2, r18	; 0x02
    2fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fde:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	31 f0       	breq	.+12     	; 0x2ff0 <TIMER1_vStartTimer+0x2e>
    2fe4:	2a 81       	ldd	r18, Y+2	; 0x02
    2fe6:	3b 81       	ldd	r19, Y+3	; 0x03
    2fe8:	24 30       	cpi	r18, 0x04	; 4
    2fea:	31 05       	cpc	r19, r1
    2fec:	29 f0       	breq	.+10     	; 0x2ff8 <TIMER1_vStartTimer+0x36>
    2fee:	07 c0       	rjmp	.+14     	; 0x2ffe <TIMER1_vStartTimer+0x3c>
	{
		case NORMAL	:
		{
			TIMER1_vStartTimerNormal(interval_in_seconds);
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <TIMER1_vStartTimerNormal>
    2ff6:	03 c0       	rjmp	.+6      	; 0x2ffe <TIMER1_vStartTimer+0x3c>
			break;
		}
		case CTC	:
		{
			TIMER1_vStartTimerCTC(interval_in_seconds);
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <TIMER1_vStartTimerCTC>
			break;
		}
	}
}
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	cf 91       	pop	r28
    3006:	df 91       	pop	r29
    3008:	08 95       	ret

0000300a <Timer1_init>:

/**
 *	\see	:	Timer1_init function prototype in timer1.h.
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	00 d0       	rcall	.+0      	; 0x3010 <Timer1_init+0x6>
    3010:	00 d0       	rcall	.+0      	; 0x3012 <Timer1_init+0x8>
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
    3016:	9a 83       	std	Y+2, r25	; 0x02
    3018:	89 83       	std	Y+1, r24	; 0x01
	/* Set timer1 initial value to required initial_value */
	TCNT1 = (uint16)(Config_Ptr -> initial_value);
    301a:	ac e4       	ldi	r26, 0x4C	; 76
    301c:	b0 e0       	ldi	r27, 0x00	; 0
    301e:	e9 81       	ldd	r30, Y+1	; 0x01
    3020:	fa 81       	ldd	r31, Y+2	; 0x02
    3022:	82 81       	ldd	r24, Z+2	; 0x02
    3024:	93 81       	ldd	r25, Z+3	; 0x03
    3026:	11 96       	adiw	r26, 0x01	; 1
    3028:	9c 93       	st	X, r25
    302a:	8e 93       	st	-X, r24

	/* Check the desired mode of operation */
	switch(Config_Ptr -> mode)
    302c:	e9 81       	ldd	r30, Y+1	; 0x01
    302e:	fa 81       	ldd	r31, Y+2	; 0x02
    3030:	80 81       	ld	r24, Z
    3032:	28 2f       	mov	r18, r24
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	3c 83       	std	Y+4, r19	; 0x04
    3038:	2b 83       	std	Y+3, r18	; 0x03
    303a:	8b 81       	ldd	r24, Y+3	; 0x03
    303c:	9c 81       	ldd	r25, Y+4	; 0x04
    303e:	00 97       	sbiw	r24, 0x00	; 0
    3040:	31 f0       	breq	.+12     	; 0x304e <Timer1_init+0x44>
    3042:	2b 81       	ldd	r18, Y+3	; 0x03
    3044:	3c 81       	ldd	r19, Y+4	; 0x04
    3046:	24 30       	cpi	r18, 0x04	; 4
    3048:	31 05       	cpc	r19, r1
    304a:	a9 f0       	breq	.+42     	; 0x3076 <Timer1_init+0x6c>
    304c:	3d c0       	rjmp	.+122    	; 0x30c8 <Timer1_init+0xbe>
	{
		case NORMAL:
		{
			/* Choose normal Mode WGM11=0 WGM10=0 (Mode Number 0) */
			TCCR1A = (TCCR1A & TCCR1A_NON_WGM_BITS) | (Config_Ptr -> mode);
    304e:	af e4       	ldi	r26, 0x4F	; 79
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	ef e4       	ldi	r30, 0x4F	; 79
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	80 81       	ld	r24, Z
    3058:	98 2f       	mov	r25, r24
    305a:	9c 7f       	andi	r25, 0xFC	; 252
    305c:	e9 81       	ldd	r30, Y+1	; 0x01
    305e:	fa 81       	ldd	r31, Y+2	; 0x02
    3060:	80 81       	ld	r24, Z
    3062:	89 2b       	or	r24, r25
    3064:	8c 93       	st	X, r24
			/* Enable the overflow interrupts */
			SET_BIT(TIMSK, TOIE1);
    3066:	a9 e5       	ldi	r26, 0x59	; 89
    3068:	b0 e0       	ldi	r27, 0x00	; 0
    306a:	e9 e5       	ldi	r30, 0x59	; 89
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	84 60       	ori	r24, 0x04	; 4
    3072:	8c 93       	st	X, r24
    3074:	29 c0       	rjmp	.+82     	; 0x30c8 <Timer1_init+0xbe>
			/*
			 *	1.	As a non-PWM mode, COM1A1=1 COM1A0=0 will clear OC1A on compare match.
			 *	2.	FOC1A and FOC1B are only active when the WGM13:0 bits specifies a non-PWM mode.
			 *	3.	Choose CTC Mode WGM12=1 WGM13=0 (Mode Number 4). Here (0x04 << 1) = 0000 1000.
			 */
			TCCR1A = (ENABLE << FOC1B) | (ENABLE << FOC1A) | (ENABLE << COM1A1) ;
    3076:	ef e4       	ldi	r30, 0x4F	; 79
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	8c e8       	ldi	r24, 0x8C	; 140
    307c:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & TCCR1B_NON_WGM_BITS) | ((Config_Ptr -> mode) << ONE_BIT);
    307e:	ae e4       	ldi	r26, 0x4E	; 78
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	ee e4       	ldi	r30, 0x4E	; 78
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	28 2f       	mov	r18, r24
    308a:	27 7e       	andi	r18, 0xE7	; 231
    308c:	e9 81       	ldd	r30, Y+1	; 0x01
    308e:	fa 81       	ldd	r31, Y+2	; 0x02
    3090:	80 81       	ld	r24, Z
    3092:	88 2f       	mov	r24, r24
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	88 0f       	add	r24, r24
    3098:	99 1f       	adc	r25, r25
    309a:	82 2b       	or	r24, r18
    309c:	8c 93       	st	X, r24

			/* Set the compare value to required compare_value */
			OCR1A = (uint16)(Config_Ptr -> compare_value);
    309e:	aa e4       	ldi	r26, 0x4A	; 74
    30a0:	b0 e0       	ldi	r27, 0x00	; 0
    30a2:	e9 81       	ldd	r30, Y+1	; 0x01
    30a4:	fa 81       	ldd	r31, Y+2	; 0x02
    30a6:	84 81       	ldd	r24, Z+4	; 0x04
    30a8:	95 81       	ldd	r25, Z+5	; 0x05
    30aa:	11 96       	adiw	r26, 0x01	; 1
    30ac:	9c 93       	st	X, r25
    30ae:	8e 93       	st	-X, r24

			/* Set PD5/OC1A pin as output */
			GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    30b0:	83 e0       	ldi	r24, 0x03	; 3
    30b2:	65 e0       	ldi	r22, 0x05	; 5
    30b4:	41 e0       	ldi	r20, 0x01	; 1
    30b6:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_setupPinDirection>

			/* Enable Timer1 Compare A Interrupt */
			SET_BIT(TIMSK, OCIE1A);
    30ba:	a9 e5       	ldi	r26, 0x59	; 89
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	e9 e5       	ldi	r30, 0x59	; 89
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	80 61       	ori	r24, 0x10	; 16
    30c6:	8c 93       	st	X, r24
			break;
		}
	}

	/* Choose the pre-scaler (CS bits) */
	TCCR1B = (TCCR1B & TCCR1B_NON_CS_BITS) | (Config_Ptr -> prescaler);
    30c8:	ae e4       	ldi	r26, 0x4E	; 78
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	ee e4       	ldi	r30, 0x4E	; 78
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	80 81       	ld	r24, Z
    30d2:	98 2f       	mov	r25, r24
    30d4:	98 7f       	andi	r25, 0xF8	; 248
    30d6:	e9 81       	ldd	r30, Y+1	; 0x01
    30d8:	fa 81       	ldd	r31, Y+2	; 0x02
    30da:	81 81       	ldd	r24, Z+1	; 0x01
    30dc:	89 2b       	or	r24, r25
    30de:	8c 93       	st	X, r24
}
    30e0:	0f 90       	pop	r0
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	cf 91       	pop	r28
    30ea:	df 91       	pop	r29
    30ec:	08 95       	ret

000030ee <Timer1_deInit>:

/**
 *	\see	:	Timer1_deInit function prototype in timer1.h.
 */
void Timer1_deInit(void)
{
    30ee:	df 93       	push	r29
    30f0:	cf 93       	push	r28
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer1 interrupt*/
    TIMSK = 0;
    30f6:	e9 e5       	ldi	r30, 0x59	; 89
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	10 82       	st	Z, r1

    /* Stop Timer1 by setting clock source to "No clock source */
    TCCR1B = 0;
    30fc:	ee e4       	ldi	r30, 0x4E	; 78
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	10 82       	st	Z, r1

    /* Reset Timer1 count value */
    TCNT1 = 0;
    3102:	ec e4       	ldi	r30, 0x4C	; 76
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	11 82       	std	Z+1, r1	; 0x01
    3108:	10 82       	st	Z, r1

    /* Reset Timer1 control registers to default values */
    TCCR1A = 0;
    310a:	ef e4       	ldi	r30, 0x4F	; 79
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	10 82       	st	Z, r1
    TCCR1B = 0;
    3110:	ee e4       	ldi	r30, 0x4E	; 78
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	10 82       	st	Z, r1

    /* Reset Timer1 output compare registers */
    OCR1A = 0;
    3116:	ea e4       	ldi	r30, 0x4A	; 74
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	11 82       	std	Z+1, r1	; 0x01
    311c:	10 82       	st	Z, r1
    OCR1B = 0;
    311e:	e8 e4       	ldi	r30, 0x48	; 72
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	11 82       	std	Z+1, r1	; 0x01
    3124:	10 82       	st	Z, r1
}
    3126:	cf 91       	pop	r28
    3128:	df 91       	pop	r29
    312a:	08 95       	ret

0000312c <Timer1_setCallBack>:

/**
 *	\see	:	Timer1_setNormalCallBack function prototype in timer1.h.
 */
void Timer1_setCallBack(const Timer1_CallbackType* TimerCallback)
{
    312c:	df 93       	push	r29
    312e:	cf 93       	push	r28
    3130:	00 d0       	rcall	.+0      	; 0x3132 <Timer1_setCallBack+0x6>
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	9a 83       	std	Y+2, r25	; 0x02
    3138:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Assigns the normal callback function pointer from the provided TimerCallback
	 * structure to the g_NormalcallBackPtr member of the Timer1_callbacks structure.
	 */
	Timer1_callbacks.g_NormalcallBackPtr = TimerCallback -> g_NormalcallBackPtr;
    313a:	e9 81       	ldd	r30, Y+1	; 0x01
    313c:	fa 81       	ldd	r31, Y+2	; 0x02
    313e:	80 81       	ld	r24, Z
    3140:	91 81       	ldd	r25, Z+1	; 0x01
    3142:	90 93 a4 03 	sts	0x03A4, r25
    3146:	80 93 a3 03 	sts	0x03A3, r24

	/*
	 * Assigns the CTC callback function pointer from the provided TimerCallback
	 * structure to the g_CTCcallBackPtr member of the Timer1_callbacks structure.
	 */
	Timer1_callbacks.g_CTCcallBackPtr = TimerCallback -> g_CTCcallBackPtr;
    314a:	e9 81       	ldd	r30, Y+1	; 0x01
    314c:	fa 81       	ldd	r31, Y+2	; 0x02
    314e:	82 81       	ldd	r24, Z+2	; 0x02
    3150:	93 81       	ldd	r25, Z+3	; 0x03
    3152:	90 93 a6 03 	sts	0x03A6, r25
    3156:	80 93 a5 03 	sts	0x03A5, r24
}
    315a:	0f 90       	pop	r0
    315c:	0f 90       	pop	r0
    315e:	cf 91       	pop	r28
    3160:	df 91       	pop	r29
    3162:	08 95       	ret

00003164 <__vector_13>:
/* Holds the address of the callback function */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

/* ISR that will execute when "USART, Rx Complete" interrupt occurs */
ISR(USART_RXC_vect)
{
    3164:	1f 92       	push	r1
    3166:	0f 92       	push	r0
    3168:	0f b6       	in	r0, 0x3f	; 63
    316a:	0f 92       	push	r0
    316c:	11 24       	eor	r1, r1
    316e:	2f 93       	push	r18
    3170:	3f 93       	push	r19
    3172:	4f 93       	push	r20
    3174:	5f 93       	push	r21
    3176:	6f 93       	push	r22
    3178:	7f 93       	push	r23
    317a:	8f 93       	push	r24
    317c:	9f 93       	push	r25
    317e:	af 93       	push	r26
    3180:	bf 93       	push	r27
    3182:	ef 93       	push	r30
    3184:	ff 93       	push	r31
    3186:	df 93       	push	r29
    3188:	cf 93       	push	r28
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
	 *  bit is written to one, the Global Interrupt Flag in SREG is written to
	 *  one and the RXC bit in UCSRA is set.
	 */

	/* Checks if the global pointer g_callBackPtr is not pointing to NULL. */
	if(g_callBackPtr != NULL_PTR)
    318e:	80 91 a7 03 	lds	r24, 0x03A7
    3192:	90 91 a8 03 	lds	r25, 0x03A8
    3196:	00 97       	sbiw	r24, 0x00	; 0
    3198:	29 f0       	breq	.+10     	; 0x31a4 <__vector_13+0x40>
	{
		/* Call the callback function using pointer to function g_callBackPtr(); */
		(*g_callBackPtr)();
    319a:	e0 91 a7 03 	lds	r30, 0x03A7
    319e:	f0 91 a8 03 	lds	r31, 0x03A8
    31a2:	09 95       	icall
	}
}
    31a4:	cf 91       	pop	r28
    31a6:	df 91       	pop	r29
    31a8:	ff 91       	pop	r31
    31aa:	ef 91       	pop	r30
    31ac:	bf 91       	pop	r27
    31ae:	af 91       	pop	r26
    31b0:	9f 91       	pop	r25
    31b2:	8f 91       	pop	r24
    31b4:	7f 91       	pop	r23
    31b6:	6f 91       	pop	r22
    31b8:	5f 91       	pop	r21
    31ba:	4f 91       	pop	r20
    31bc:	3f 91       	pop	r19
    31be:	2f 91       	pop	r18
    31c0:	0f 90       	pop	r0
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	0f 90       	pop	r0
    31c6:	1f 90       	pop	r1
    31c8:	18 95       	reti

000031ca <UARTRX_setCallBack>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void UARTRX_setCallBack(void(*a_ptr)(void))
{
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	00 d0       	rcall	.+0      	; 0x31d0 <UARTRX_setCallBack+0x6>
    31d0:	cd b7       	in	r28, 0x3d	; 61
    31d2:	de b7       	in	r29, 0x3e	; 62
    31d4:	9a 83       	std	Y+2, r25	; 0x02
    31d6:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	9a 81       	ldd	r25, Y+2	; 0x02
    31dc:	90 93 a8 03 	sts	0x03A8, r25
    31e0:	80 93 a7 03 	sts	0x03A7, r24
}
    31e4:	0f 90       	pop	r0
    31e6:	0f 90       	pop	r0
    31e8:	cf 91       	pop	r28
    31ea:	df 91       	pop	r29
    31ec:	08 95       	ret

000031ee <UART_Init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_Init(const UART_ConfigType *Config_Ptr)
{
    31ee:	df 93       	push	r29
    31f0:	cf 93       	push	r28
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
    31f6:	2b 97       	sbiw	r28, 0x0b	; 11
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61
    3202:	9d 83       	std	Y+5, r25	; 0x05
    3204:	8c 83       	std	Y+4, r24	; 0x04
#ifdef	U2X_MODE
	/* U2X = 1 for double transmission speed */
    UCSRA |= (1 << U2X);
    3206:	ab e2       	ldi	r26, 0x2B	; 43
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	eb e2       	ldi	r30, 0x2B	; 43
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	80 81       	ld	r24, Z
    3210:	82 60       	ori	r24, 0x02	; 2
    3212:	8c 93       	st	X, r24
#endif

    /* Enable receiver, transmitter, and RX complete interrupt */
    UCSRB = (ENABLE << TXEN) | (ENABLE << RXEN) | (ENABLE << RXCIE);
    3214:	ea e2       	ldi	r30, 0x2A	; 42
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	88 e9       	ldi	r24, 0x98	; 152
    321a:	80 83       	st	Z, r24

    /* Set frame format: data bits, parity, stop bits */
    uint8 UCSRC_value = 0;
    321c:	1b 82       	std	Y+3, r1	; 0x03
    UCSRC_value = (ENABLE << URSEL);
    321e:	80 e8       	ldi	r24, 0x80	; 128
    3220:	8b 83       	std	Y+3, r24	; 0x03

    switch (Config_Ptr->bit_data)
    3222:	ec 81       	ldd	r30, Y+4	; 0x04
    3224:	fd 81       	ldd	r31, Y+5	; 0x05
    3226:	80 81       	ld	r24, Z
    3228:	28 2f       	mov	r18, r24
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	3b 87       	std	Y+11, r19	; 0x0b
    322e:	2a 87       	std	Y+10, r18	; 0x0a
    3230:	8a 85       	ldd	r24, Y+10	; 0x0a
    3232:	9b 85       	ldd	r25, Y+11	; 0x0b
    3234:	82 30       	cpi	r24, 0x02	; 2
    3236:	91 05       	cpc	r25, r1
    3238:	f1 f0       	breq	.+60     	; 0x3276 <UART_Init+0x88>
    323a:	2a 85       	ldd	r18, Y+10	; 0x0a
    323c:	3b 85       	ldd	r19, Y+11	; 0x0b
    323e:	23 30       	cpi	r18, 0x03	; 3
    3240:	31 05       	cpc	r19, r1
    3242:	54 f4       	brge	.+20     	; 0x3258 <UART_Init+0x6a>
    3244:	8a 85       	ldd	r24, Y+10	; 0x0a
    3246:	9b 85       	ldd	r25, Y+11	; 0x0b
    3248:	00 97       	sbiw	r24, 0x00	; 0
    324a:	01 f1       	breq	.+64     	; 0x328c <UART_Init+0x9e>
    324c:	2a 85       	ldd	r18, Y+10	; 0x0a
    324e:	3b 85       	ldd	r19, Y+11	; 0x0b
    3250:	21 30       	cpi	r18, 0x01	; 1
    3252:	31 05       	cpc	r19, r1
    3254:	61 f0       	breq	.+24     	; 0x326e <UART_Init+0x80>
    3256:	1a c0       	rjmp	.+52     	; 0x328c <UART_Init+0x9e>
    3258:	8a 85       	ldd	r24, Y+10	; 0x0a
    325a:	9b 85       	ldd	r25, Y+11	; 0x0b
    325c:	83 30       	cpi	r24, 0x03	; 3
    325e:	91 05       	cpc	r25, r1
    3260:	71 f0       	breq	.+28     	; 0x327e <UART_Init+0x90>
    3262:	2a 85       	ldd	r18, Y+10	; 0x0a
    3264:	3b 85       	ldd	r19, Y+11	; 0x0b
    3266:	27 30       	cpi	r18, 0x07	; 7
    3268:	31 05       	cpc	r19, r1
    326a:	69 f0       	breq	.+26     	; 0x3286 <UART_Init+0x98>
    326c:	0f c0       	rjmp	.+30     	; 0x328c <UART_Init+0x9e>
        {
        	break;
        }
        case DATA_6_BIT	:
        {
            UCSRC_value |= (ENABLE << UCSZ0);
    326e:	8b 81       	ldd	r24, Y+3	; 0x03
    3270:	82 60       	ori	r24, 0x02	; 2
    3272:	8b 83       	std	Y+3, r24	; 0x03
    3274:	0b c0       	rjmp	.+22     	; 0x328c <UART_Init+0x9e>
            break;
        }
        case DATA_7_BIT	:
        {
        	UCSRC_value |= (ENABLE << UCSZ1);
    3276:	8b 81       	ldd	r24, Y+3	; 0x03
    3278:	84 60       	ori	r24, 0x04	; 4
    327a:	8b 83       	std	Y+3, r24	; 0x03
    327c:	07 c0       	rjmp	.+14     	; 0x328c <UART_Init+0x9e>
            break;
        }

        case DATA_8_BIT	:
        {
            UCSRC_value |= (ENABLE << UCSZ0) | (ENABLE << UCSZ1);
    327e:	8b 81       	ldd	r24, Y+3	; 0x03
    3280:	86 60       	ori	r24, 0x06	; 6
    3282:	8b 83       	std	Y+3, r24	; 0x03
    3284:	03 c0       	rjmp	.+6      	; 0x328c <UART_Init+0x9e>
            break;
        }

        case DATA_9_BIT	:
        {
            UCSRC_value |= (ENABLE << UCSZ0) | (ENABLE << UCSZ1) | (ENABLE << UCSZ2);
    3286:	8b 81       	ldd	r24, Y+3	; 0x03
    3288:	86 60       	ori	r24, 0x06	; 6
    328a:	8b 83       	std	Y+3, r24	; 0x03
            break;
        }
    }

    switch (Config_Ptr->parity)
    328c:	ec 81       	ldd	r30, Y+4	; 0x04
    328e:	fd 81       	ldd	r31, Y+5	; 0x05
    3290:	81 81       	ldd	r24, Z+1	; 0x01
    3292:	28 2f       	mov	r18, r24
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	39 87       	std	Y+9, r19	; 0x09
    3298:	28 87       	std	Y+8, r18	; 0x08
    329a:	88 85       	ldd	r24, Y+8	; 0x08
    329c:	99 85       	ldd	r25, Y+9	; 0x09
    329e:	82 30       	cpi	r24, 0x02	; 2
    32a0:	91 05       	cpc	r25, r1
    32a2:	31 f0       	breq	.+12     	; 0x32b0 <UART_Init+0xc2>
    32a4:	28 85       	ldd	r18, Y+8	; 0x08
    32a6:	39 85       	ldd	r19, Y+9	; 0x09
    32a8:	23 30       	cpi	r18, 0x03	; 3
    32aa:	31 05       	cpc	r19, r1
    32ac:	29 f0       	breq	.+10     	; 0x32b8 <UART_Init+0xca>
    32ae:	07 c0       	rjmp	.+14     	; 0x32be <UART_Init+0xd0>
		{
			break;
		}
        case EVEN_PARITY:
        {
           	UCSRC_value |= (ENABLE << UPM1);
    32b0:	8b 81       	ldd	r24, Y+3	; 0x03
    32b2:	80 62       	ori	r24, 0x20	; 32
    32b4:	8b 83       	std	Y+3, r24	; 0x03
    32b6:	03 c0       	rjmp	.+6      	; 0x32be <UART_Init+0xd0>
           	break;
        }
        case ODD_PARITY	:
        {
        	UCSRC_value |= (ENABLE << UPM1) | (ENABLE << UPM0);
    32b8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ba:	80 63       	ori	r24, 0x30	; 48
    32bc:	8b 83       	std	Y+3, r24	; 0x03
        	break;
        }
    }

    switch (Config_Ptr->stop_bit)
    32be:	ec 81       	ldd	r30, Y+4	; 0x04
    32c0:	fd 81       	ldd	r31, Y+5	; 0x05
    32c2:	82 81       	ldd	r24, Z+2	; 0x02
    32c4:	28 2f       	mov	r18, r24
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	3f 83       	std	Y+7, r19	; 0x07
    32ca:	2e 83       	std	Y+6, r18	; 0x06
    32cc:	8e 81       	ldd	r24, Y+6	; 0x06
    32ce:	9f 81       	ldd	r25, Y+7	; 0x07
    32d0:	00 97       	sbiw	r24, 0x00	; 0
    32d2:	41 f0       	breq	.+16     	; 0x32e4 <UART_Init+0xf6>
    32d4:	2e 81       	ldd	r18, Y+6	; 0x06
    32d6:	3f 81       	ldd	r19, Y+7	; 0x07
    32d8:	21 30       	cpi	r18, 0x01	; 1
    32da:	31 05       	cpc	r19, r1
    32dc:	19 f4       	brne	.+6      	; 0x32e4 <UART_Init+0xf6>
        {
            break;
        }
        case STOP_BIT_2	:
        {
            UCSRC_value |= (ENABLE << USBS);
    32de:	8b 81       	ldd	r24, Y+3	; 0x03
    32e0:	88 60       	ori	r24, 0x08	; 8
    32e2:	8b 83       	std	Y+3, r24	; 0x03
            break;
        }
    }

    UCSRC = UCSRC_value;
    32e4:	e0 e4       	ldi	r30, 0x40	; 64
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ea:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	 uint16 ubrr_value = (uint16_t)(((F_CPU / ((Config_Ptr->baud_rate) * BITS_PER_UART_FRAME))) - 1);
    32ec:	ec 81       	ldd	r30, Y+4	; 0x04
    32ee:	fd 81       	ldd	r31, Y+5	; 0x05
    32f0:	83 81       	ldd	r24, Z+3	; 0x03
    32f2:	94 81       	ldd	r25, Z+4	; 0x04
    32f4:	a5 81       	ldd	r26, Z+5	; 0x05
    32f6:	b6 81       	ldd	r27, Z+6	; 0x06
    32f8:	88 0f       	add	r24, r24
    32fa:	99 1f       	adc	r25, r25
    32fc:	aa 1f       	adc	r26, r26
    32fe:	bb 1f       	adc	r27, r27
    3300:	88 0f       	add	r24, r24
    3302:	99 1f       	adc	r25, r25
    3304:	aa 1f       	adc	r26, r26
    3306:	bb 1f       	adc	r27, r27
    3308:	88 0f       	add	r24, r24
    330a:	99 1f       	adc	r25, r25
    330c:	aa 1f       	adc	r26, r26
    330e:	bb 1f       	adc	r27, r27
    3310:	9c 01       	movw	r18, r24
    3312:	ad 01       	movw	r20, r26
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	92 e1       	ldi	r25, 0x12	; 18
    3318:	aa e7       	ldi	r26, 0x7A	; 122
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	bc 01       	movw	r22, r24
    331e:	cd 01       	movw	r24, r26
    3320:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__udivmodsi4>
    3324:	da 01       	movw	r26, r20
    3326:	c9 01       	movw	r24, r18
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	9a 83       	std	Y+2, r25	; 0x02
    332c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (uint8)(ubrr_value>>8);
    332e:	e0 e4       	ldi	r30, 0x40	; 64
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	89 81       	ldd	r24, Y+1	; 0x01
    3334:	9a 81       	ldd	r25, Y+2	; 0x02
    3336:	89 2f       	mov	r24, r25
    3338:	99 27       	eor	r25, r25
    333a:	80 83       	st	Z, r24
	UBRRL = (uint8)ubrr_value;
    333c:	e9 e2       	ldi	r30, 0x29	; 41
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	89 81       	ldd	r24, Y+1	; 0x01
    3342:	80 83       	st	Z, r24
}
    3344:	2b 96       	adiw	r28, 0x0b	; 11
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	f8 94       	cli
    334a:	de bf       	out	0x3e, r29	; 62
    334c:	0f be       	out	0x3f, r0	; 63
    334e:	cd bf       	out	0x3d, r28	; 61
    3350:	cf 91       	pop	r28
    3352:	df 91       	pop	r29
    3354:	08 95       	ret

00003356 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3356:	df 93       	push	r29
    3358:	cf 93       	push	r28
    335a:	0f 92       	push	r0
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62
    3360:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3362:	eb e2       	ldi	r30, 0x2B	; 43
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	80 81       	ld	r24, Z
    3368:	88 2f       	mov	r24, r24
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	80 72       	andi	r24, 0x20	; 32
    336e:	90 70       	andi	r25, 0x00	; 0
    3370:	00 97       	sbiw	r24, 0x00	; 0
    3372:	b9 f3       	breq	.-18     	; 0x3362 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3374:	ec e2       	ldi	r30, 0x2C	; 44
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	89 81       	ldd	r24, Y+1	; 0x01
    337a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    337c:	0f 90       	pop	r0
    337e:	cf 91       	pop	r28
    3380:	df 91       	pop	r29
    3382:	08 95       	ret

00003384 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3384:	df 93       	push	r29
    3386:	cf 93       	push	r28
    3388:	cd b7       	in	r28, 0x3d	; 61
    338a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    338c:	eb e2       	ldi	r30, 0x2B	; 43
    338e:	f0 e0       	ldi	r31, 0x00	; 0
    3390:	80 81       	ld	r24, Z
    3392:	88 23       	and	r24, r24
    3394:	dc f7       	brge	.-10     	; 0x338c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3396:	ec e2       	ldi	r30, 0x2C	; 44
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
}
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	08 95       	ret

000033a2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	00 d0       	rcall	.+0      	; 0x33a8 <UART_sendString+0x6>
    33a8:	0f 92       	push	r0
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
    33ae:	9b 83       	std	Y+3, r25	; 0x03
    33b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    33b2:	19 82       	std	Y+1, r1	; 0x01
    33b4:	0e c0       	rjmp	.+28     	; 0x33d2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
    33b8:	28 2f       	mov	r18, r24
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	8a 81       	ldd	r24, Y+2	; 0x02
    33be:	9b 81       	ldd	r25, Y+3	; 0x03
    33c0:	fc 01       	movw	r30, r24
    33c2:	e2 0f       	add	r30, r18
    33c4:	f3 1f       	adc	r31, r19
    33c6:	80 81       	ld	r24, Z
    33c8:	0e 94 ab 19 	call	0x3356	; 0x3356 <UART_sendByte>
		i++;
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	8f 5f       	subi	r24, 0xFF	; 255
    33d0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    33d2:	89 81       	ldd	r24, Y+1	; 0x01
    33d4:	28 2f       	mov	r18, r24
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	8a 81       	ldd	r24, Y+2	; 0x02
    33da:	9b 81       	ldd	r25, Y+3	; 0x03
    33dc:	fc 01       	movw	r30, r24
    33de:	e2 0f       	add	r30, r18
    33e0:	f3 1f       	adc	r31, r19
    33e2:	80 81       	ld	r24, Z
    33e4:	88 23       	and	r24, r24
    33e6:	39 f7       	brne	.-50     	; 0x33b6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	0f 90       	pop	r0
    33ee:	cf 91       	pop	r28
    33f0:	df 91       	pop	r29
    33f2:	08 95       	ret

000033f4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    33f4:	0f 93       	push	r16
    33f6:	1f 93       	push	r17
    33f8:	df 93       	push	r29
    33fa:	cf 93       	push	r28
    33fc:	00 d0       	rcall	.+0      	; 0x33fe <UART_receiveString+0xa>
    33fe:	0f 92       	push	r0
    3400:	cd b7       	in	r28, 0x3d	; 61
    3402:	de b7       	in	r29, 0x3e	; 62
    3404:	9b 83       	std	Y+3, r25	; 0x03
    3406:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3408:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	28 2f       	mov	r18, r24
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	8a 81       	ldd	r24, Y+2	; 0x02
    3412:	9b 81       	ldd	r25, Y+3	; 0x03
    3414:	8c 01       	movw	r16, r24
    3416:	02 0f       	add	r16, r18
    3418:	13 1f       	adc	r17, r19
    341a:	0e 94 c2 19 	call	0x3384	; 0x3384 <UART_recieveByte>
    341e:	f8 01       	movw	r30, r16
    3420:	80 83       	st	Z, r24
    3422:	0f c0       	rjmp	.+30     	; 0x3442 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3424:	89 81       	ldd	r24, Y+1	; 0x01
    3426:	8f 5f       	subi	r24, 0xFF	; 255
    3428:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    342a:	89 81       	ldd	r24, Y+1	; 0x01
    342c:	28 2f       	mov	r18, r24
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	8a 81       	ldd	r24, Y+2	; 0x02
    3432:	9b 81       	ldd	r25, Y+3	; 0x03
    3434:	8c 01       	movw	r16, r24
    3436:	02 0f       	add	r16, r18
    3438:	13 1f       	adc	r17, r19
    343a:	0e 94 c2 19 	call	0x3384	; 0x3384 <UART_recieveByte>
    343e:	f8 01       	movw	r30, r16
    3440:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3442:	89 81       	ldd	r24, Y+1	; 0x01
    3444:	28 2f       	mov	r18, r24
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	8a 81       	ldd	r24, Y+2	; 0x02
    344a:	9b 81       	ldd	r25, Y+3	; 0x03
    344c:	fc 01       	movw	r30, r24
    344e:	e2 0f       	add	r30, r18
    3450:	f3 1f       	adc	r31, r19
    3452:	80 81       	ld	r24, Z
    3454:	83 32       	cpi	r24, 0x23	; 35
    3456:	31 f7       	brne	.-52     	; 0x3424 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	28 2f       	mov	r18, r24
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	8a 81       	ldd	r24, Y+2	; 0x02
    3460:	9b 81       	ldd	r25, Y+3	; 0x03
    3462:	fc 01       	movw	r30, r24
    3464:	e2 0f       	add	r30, r18
    3466:	f3 1f       	adc	r31, r19
    3468:	10 82       	st	Z, r1
}
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
    346e:	0f 90       	pop	r0
    3470:	cf 91       	pop	r28
    3472:	df 91       	pop	r29
    3474:	1f 91       	pop	r17
    3476:	0f 91       	pop	r16
    3478:	08 95       	ret

0000347a <UART_sendGolabalFrame>:
/*
 * Description :
 * Functional responsible for send multiple bytes to another UART device.
 */
void UART_sendGolabalFrame(const uint8_t *frame_TX, uint8_t number_of_bytes)
{
    347a:	df 93       	push	r29
    347c:	cf 93       	push	r28
    347e:	00 d0       	rcall	.+0      	; 0x3480 <UART_sendGolabalFrame+0x6>
    3480:	00 d0       	rcall	.+0      	; 0x3482 <UART_sendGolabalFrame+0x8>
    3482:	cd b7       	in	r28, 0x3d	; 61
    3484:	de b7       	in	r29, 0x3e	; 62
    3486:	9b 83       	std	Y+3, r25	; 0x03
    3488:	8a 83       	std	Y+2, r24	; 0x02
    348a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 byte_index;
	// Iterate through each byte in the data array
	for (byte_index = 0 ; byte_index < number_of_bytes ; byte_index++)
    348c:	19 82       	std	Y+1, r1	; 0x01
    348e:	0e c0       	rjmp	.+28     	; 0x34ac <UART_sendGolabalFrame+0x32>
	{
		// Send the current byte
		UART_sendByte(frame_TX[byte_index]);
    3490:	89 81       	ldd	r24, Y+1	; 0x01
    3492:	28 2f       	mov	r18, r24
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	8a 81       	ldd	r24, Y+2	; 0x02
    3498:	9b 81       	ldd	r25, Y+3	; 0x03
    349a:	fc 01       	movw	r30, r24
    349c:	e2 0f       	add	r30, r18
    349e:	f3 1f       	adc	r31, r19
    34a0:	80 81       	ld	r24, Z
    34a2:	0e 94 ab 19 	call	0x3356	; 0x3356 <UART_sendByte>
 */
void UART_sendGolabalFrame(const uint8_t *frame_TX, uint8_t number_of_bytes)
{
	uint8 byte_index;
	// Iterate through each byte in the data array
	for (byte_index = 0 ; byte_index < number_of_bytes ; byte_index++)
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	8f 5f       	subi	r24, 0xFF	; 255
    34aa:	89 83       	std	Y+1, r24	; 0x01
    34ac:	99 81       	ldd	r25, Y+1	; 0x01
    34ae:	8c 81       	ldd	r24, Y+4	; 0x04
    34b0:	98 17       	cp	r25, r24
    34b2:	70 f3       	brcs	.-36     	; 0x3490 <UART_sendGolabalFrame+0x16>
	{
		// Send the current byte
		UART_sendByte(frame_TX[byte_index]);
	}
}
    34b4:	0f 90       	pop	r0
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	08 95       	ret

000034c2 <UART_receiveGlobalFrame>:
/*
 * Description :
 * Functional responsible for receive multiple bytes from another UART device.
 */
void UART_receiveGlobalFrame(uint8_t *frame_RX, uint8_t number_of_bytes)
{
    34c2:	0f 93       	push	r16
    34c4:	1f 93       	push	r17
    34c6:	df 93       	push	r29
    34c8:	cf 93       	push	r28
    34ca:	00 d0       	rcall	.+0      	; 0x34cc <UART_receiveGlobalFrame+0xa>
    34cc:	00 d0       	rcall	.+0      	; 0x34ce <UART_receiveGlobalFrame+0xc>
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	9b 83       	std	Y+3, r25	; 0x03
    34d4:	8a 83       	std	Y+2, r24	; 0x02
    34d6:	6c 83       	std	Y+4, r22	; 0x04
	uint8 byte_index;
	// Iterate through each byte to be received
	for (byte_index = 0 ; byte_index < number_of_bytes ; byte_index++)
    34d8:	19 82       	std	Y+1, r1	; 0x01
    34da:	0f c0       	rjmp	.+30     	; 0x34fa <UART_receiveGlobalFrame+0x38>
	{
		// Receive the byte and store it in the buffer
		frame_RX[byte_index] = UART_recieveByte();
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	28 2f       	mov	r18, r24
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	8a 81       	ldd	r24, Y+2	; 0x02
    34e4:	9b 81       	ldd	r25, Y+3	; 0x03
    34e6:	8c 01       	movw	r16, r24
    34e8:	02 0f       	add	r16, r18
    34ea:	13 1f       	adc	r17, r19
    34ec:	0e 94 c2 19 	call	0x3384	; 0x3384 <UART_recieveByte>
    34f0:	f8 01       	movw	r30, r16
    34f2:	80 83       	st	Z, r24
 */
void UART_receiveGlobalFrame(uint8_t *frame_RX, uint8_t number_of_bytes)
{
	uint8 byte_index;
	// Iterate through each byte to be received
	for (byte_index = 0 ; byte_index < number_of_bytes ; byte_index++)
    34f4:	89 81       	ldd	r24, Y+1	; 0x01
    34f6:	8f 5f       	subi	r24, 0xFF	; 255
    34f8:	89 83       	std	Y+1, r24	; 0x01
    34fa:	99 81       	ldd	r25, Y+1	; 0x01
    34fc:	8c 81       	ldd	r24, Y+4	; 0x04
    34fe:	98 17       	cp	r25, r24
    3500:	68 f3       	brcs	.-38     	; 0x34dc <UART_receiveGlobalFrame+0x1a>
	{
		// Receive the byte and store it in the buffer
		frame_RX[byte_index] = UART_recieveByte();
	}
}
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	0f 90       	pop	r0
    350a:	cf 91       	pop	r28
    350c:	df 91       	pop	r29
    350e:	1f 91       	pop	r17
    3510:	0f 91       	pop	r16
    3512:	08 95       	ret

00003514 <__udivmodsi4>:
    3514:	a1 e2       	ldi	r26, 0x21	; 33
    3516:	1a 2e       	mov	r1, r26
    3518:	aa 1b       	sub	r26, r26
    351a:	bb 1b       	sub	r27, r27
    351c:	fd 01       	movw	r30, r26
    351e:	0d c0       	rjmp	.+26     	; 0x353a <__udivmodsi4_ep>

00003520 <__udivmodsi4_loop>:
    3520:	aa 1f       	adc	r26, r26
    3522:	bb 1f       	adc	r27, r27
    3524:	ee 1f       	adc	r30, r30
    3526:	ff 1f       	adc	r31, r31
    3528:	a2 17       	cp	r26, r18
    352a:	b3 07       	cpc	r27, r19
    352c:	e4 07       	cpc	r30, r20
    352e:	f5 07       	cpc	r31, r21
    3530:	20 f0       	brcs	.+8      	; 0x353a <__udivmodsi4_ep>
    3532:	a2 1b       	sub	r26, r18
    3534:	b3 0b       	sbc	r27, r19
    3536:	e4 0b       	sbc	r30, r20
    3538:	f5 0b       	sbc	r31, r21

0000353a <__udivmodsi4_ep>:
    353a:	66 1f       	adc	r22, r22
    353c:	77 1f       	adc	r23, r23
    353e:	88 1f       	adc	r24, r24
    3540:	99 1f       	adc	r25, r25
    3542:	1a 94       	dec	r1
    3544:	69 f7       	brne	.-38     	; 0x3520 <__udivmodsi4_loop>
    3546:	60 95       	com	r22
    3548:	70 95       	com	r23
    354a:	80 95       	com	r24
    354c:	90 95       	com	r25
    354e:	9b 01       	movw	r18, r22
    3550:	ac 01       	movw	r20, r24
    3552:	bd 01       	movw	r22, r26
    3554:	cf 01       	movw	r24, r30
    3556:	08 95       	ret

00003558 <__prologue_saves__>:
    3558:	2f 92       	push	r2
    355a:	3f 92       	push	r3
    355c:	4f 92       	push	r4
    355e:	5f 92       	push	r5
    3560:	6f 92       	push	r6
    3562:	7f 92       	push	r7
    3564:	8f 92       	push	r8
    3566:	9f 92       	push	r9
    3568:	af 92       	push	r10
    356a:	bf 92       	push	r11
    356c:	cf 92       	push	r12
    356e:	df 92       	push	r13
    3570:	ef 92       	push	r14
    3572:	ff 92       	push	r15
    3574:	0f 93       	push	r16
    3576:	1f 93       	push	r17
    3578:	cf 93       	push	r28
    357a:	df 93       	push	r29
    357c:	cd b7       	in	r28, 0x3d	; 61
    357e:	de b7       	in	r29, 0x3e	; 62
    3580:	ca 1b       	sub	r28, r26
    3582:	db 0b       	sbc	r29, r27
    3584:	0f b6       	in	r0, 0x3f	; 63
    3586:	f8 94       	cli
    3588:	de bf       	out	0x3e, r29	; 62
    358a:	0f be       	out	0x3f, r0	; 63
    358c:	cd bf       	out	0x3d, r28	; 61
    358e:	09 94       	ijmp

00003590 <__epilogue_restores__>:
    3590:	2a 88       	ldd	r2, Y+18	; 0x12
    3592:	39 88       	ldd	r3, Y+17	; 0x11
    3594:	48 88       	ldd	r4, Y+16	; 0x10
    3596:	5f 84       	ldd	r5, Y+15	; 0x0f
    3598:	6e 84       	ldd	r6, Y+14	; 0x0e
    359a:	7d 84       	ldd	r7, Y+13	; 0x0d
    359c:	8c 84       	ldd	r8, Y+12	; 0x0c
    359e:	9b 84       	ldd	r9, Y+11	; 0x0b
    35a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    35a2:	b9 84       	ldd	r11, Y+9	; 0x09
    35a4:	c8 84       	ldd	r12, Y+8	; 0x08
    35a6:	df 80       	ldd	r13, Y+7	; 0x07
    35a8:	ee 80       	ldd	r14, Y+6	; 0x06
    35aa:	fd 80       	ldd	r15, Y+5	; 0x05
    35ac:	0c 81       	ldd	r16, Y+4	; 0x04
    35ae:	1b 81       	ldd	r17, Y+3	; 0x03
    35b0:	aa 81       	ldd	r26, Y+2	; 0x02
    35b2:	b9 81       	ldd	r27, Y+1	; 0x01
    35b4:	ce 0f       	add	r28, r30
    35b6:	d1 1d       	adc	r29, r1
    35b8:	0f b6       	in	r0, 0x3f	; 63
    35ba:	f8 94       	cli
    35bc:	de bf       	out	0x3e, r29	; 62
    35be:	0f be       	out	0x3f, r0	; 63
    35c0:	cd bf       	out	0x3d, r28	; 61
    35c2:	ed 01       	movw	r28, r26
    35c4:	08 95       	ret

000035c6 <itoa>:
    35c6:	fb 01       	movw	r30, r22
    35c8:	9f 01       	movw	r18, r30
    35ca:	e8 94       	clt
    35cc:	42 30       	cpi	r20, 0x02	; 2
    35ce:	c4 f0       	brlt	.+48     	; 0x3600 <itoa+0x3a>
    35d0:	45 32       	cpi	r20, 0x25	; 37
    35d2:	b4 f4       	brge	.+44     	; 0x3600 <itoa+0x3a>
    35d4:	4a 30       	cpi	r20, 0x0A	; 10
    35d6:	29 f4       	brne	.+10     	; 0x35e2 <itoa+0x1c>
    35d8:	97 fb       	bst	r25, 7
    35da:	1e f4       	brtc	.+6      	; 0x35e2 <itoa+0x1c>
    35dc:	90 95       	com	r25
    35de:	81 95       	neg	r24
    35e0:	9f 4f       	sbci	r25, 0xFF	; 255
    35e2:	64 2f       	mov	r22, r20
    35e4:	77 27       	eor	r23, r23
    35e6:	0e 94 14 1b 	call	0x3628	; 0x3628 <__udivmodhi4>
    35ea:	80 5d       	subi	r24, 0xD0	; 208
    35ec:	8a 33       	cpi	r24, 0x3A	; 58
    35ee:	0c f0       	brlt	.+2      	; 0x35f2 <itoa+0x2c>
    35f0:	89 5d       	subi	r24, 0xD9	; 217
    35f2:	81 93       	st	Z+, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	00 97       	sbiw	r24, 0x00	; 0
    35f8:	a1 f7       	brne	.-24     	; 0x35e2 <itoa+0x1c>
    35fa:	16 f4       	brtc	.+4      	; 0x3600 <itoa+0x3a>
    35fc:	5d e2       	ldi	r21, 0x2D	; 45
    35fe:	51 93       	st	Z+, r21
    3600:	10 82       	st	Z, r1
    3602:	c9 01       	movw	r24, r18
    3604:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <strrev>

00003608 <strrev>:
    3608:	dc 01       	movw	r26, r24
    360a:	fc 01       	movw	r30, r24
    360c:	67 2f       	mov	r22, r23
    360e:	71 91       	ld	r23, Z+
    3610:	77 23       	and	r23, r23
    3612:	e1 f7       	brne	.-8      	; 0x360c <strrev+0x4>
    3614:	32 97       	sbiw	r30, 0x02	; 2
    3616:	04 c0       	rjmp	.+8      	; 0x3620 <strrev+0x18>
    3618:	7c 91       	ld	r23, X
    361a:	6d 93       	st	X+, r22
    361c:	70 83       	st	Z, r23
    361e:	62 91       	ld	r22, -Z
    3620:	ae 17       	cp	r26, r30
    3622:	bf 07       	cpc	r27, r31
    3624:	c8 f3       	brcs	.-14     	; 0x3618 <strrev+0x10>
    3626:	08 95       	ret

00003628 <__udivmodhi4>:
    3628:	aa 1b       	sub	r26, r26
    362a:	bb 1b       	sub	r27, r27
    362c:	51 e1       	ldi	r21, 0x11	; 17
    362e:	07 c0       	rjmp	.+14     	; 0x363e <__udivmodhi4_ep>

00003630 <__udivmodhi4_loop>:
    3630:	aa 1f       	adc	r26, r26
    3632:	bb 1f       	adc	r27, r27
    3634:	a6 17       	cp	r26, r22
    3636:	b7 07       	cpc	r27, r23
    3638:	10 f0       	brcs	.+4      	; 0x363e <__udivmodhi4_ep>
    363a:	a6 1b       	sub	r26, r22
    363c:	b7 0b       	sbc	r27, r23

0000363e <__udivmodhi4_ep>:
    363e:	88 1f       	adc	r24, r24
    3640:	99 1f       	adc	r25, r25
    3642:	5a 95       	dec	r21
    3644:	a9 f7       	brne	.-22     	; 0x3630 <__udivmodhi4_loop>
    3646:	80 95       	com	r24
    3648:	90 95       	com	r25
    364a:	bc 01       	movw	r22, r24
    364c:	cd 01       	movw	r24, r26
    364e:	08 95       	ret

00003650 <_exit>:
    3650:	f8 94       	cli

00003652 <__stop_program>:
    3652:	ff cf       	rjmp	.-2      	; 0x3652 <__stop_program>
