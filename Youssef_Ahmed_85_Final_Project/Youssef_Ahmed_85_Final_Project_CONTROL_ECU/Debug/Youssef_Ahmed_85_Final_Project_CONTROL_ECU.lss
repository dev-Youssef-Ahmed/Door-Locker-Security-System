
Youssef_Ahmed_85_Final_Project_CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00002d60  00002df4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800186  00800186  00002f1a  2**0
                  ALLOC
  3 .stab         000038e8  00000000  00000000  00002f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002636  00000000  00000000  00006804  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00008e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00008fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000918b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000b19b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000c2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000d300  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000d4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000d75e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <main>
      8a:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <APP_init>:
 *	\brief	:	Iniitiate the application.
 *	\param	:	void.
 *	\return	:	void.
 **/
void APP_init(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	6a 97       	sbiw	r28, 0x1a	; 26
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
	/* Enter the first run system state, which will determine the following steps */
	g_current_control_state = FIRST_RUN;
     cb4:	10 92 a1 01 	sts	0x01A1, r1
	/* ====================================================================== */
	/*							 Timer1 configurations:						  */
	/* ====================================================================== */

	/* Holds the desired Timer1 mode */
	g_Timer1_mode_of_operation = TIMER1_MODE_OF_OPERATION;
     cb8:	84 e0       	ldi	r24, 0x04	; 4
     cba:	80 93 a2 01 	sts	0x01A2, r24

	/*
	 * Configure the callback functions for Timer1 ISRs, this
	 * enable flexibility in event handling and customization.
	 */
	Timer1_CallbackType	TimerCallback		= {APP_vTimer1NormalCallback, APP_vTimer1CTCCallback};
     cbe:	85 ef       	ldi	r24, 0xF5	; 245
     cc0:	9a e0       	ldi	r25, 0x0A	; 10
     cc2:	9a 83       	std	Y+2, r25	; 0x02
     cc4:	89 83       	std	Y+1, r24	; 0x01
     cc6:	83 e3       	ldi	r24, 0x33	; 51
     cc8:	9b e0       	ldi	r25, 0x0B	; 11
     cca:	9c 83       	std	Y+4, r25	; 0x04
     ccc:	8b 83       	std	Y+3, r24	; 0x03
	Timer1_setCallBack(&TimerCallback);
     cce:	ce 01       	movw	r24, r28
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <Timer1_setCallBack>
	/* ====================================================================== */
	/*						 Interrupt 2 configurations:					  */
	/* ====================================================================== */

	/* Initiate the parameters of INT2, which is responsible for RESET process */
	INT2_init();
     cd6:	0e 94 ce 10 	call	0x219c	; 0x219c <INT2_init>
	/* Select the callback function that will be called in INT2 ISR occurrences */
	INT2_setCallBack(APP_vINT2softResetCallBack);
     cda:	81 e7       	ldi	r24, 0x71	; 113
     cdc:	9b e0       	ldi	r25, 0x0B	; 11
     cde:	0e 94 bc 10 	call	0x2178	; 0x2178 <INT2_setCallBack>
	/* ====================================================================== */
	/* 						UART & TWI configurations:						  */
	/* ====================================================================== */

	/* Initial vlues: */
	g_RX_ready_flag		= FALSE;
     ce2:	10 92 9e 01 	sts	0x019E, r1
	g_bytes_recieved	= RX_FRAME_SIZE;
     ce6:	85 e0       	ldi	r24, 0x05	; 5
     ce8:	80 93 91 01 	sts	0x0191, r24

	/*
	 * Configuration struct members (in order):
	 * {character size, parity, stop bits, baud rate}
	 */
	UART_ConfigType		UART_configurations	= {DATA_8_BIT, EVEN_PARITY, STOP_BIT_1, UART_BAUD_RATE};
     cec:	ce 01       	movw	r24, r28
     cee:	05 96       	adiw	r24, 0x05	; 5
     cf0:	9a 8b       	std	Y+18, r25	; 0x12
     cf2:	89 8b       	std	Y+17, r24	; 0x11
     cf4:	ed e6       	ldi	r30, 0x6D	; 109
     cf6:	f1 e0       	ldi	r31, 0x01	; 1
     cf8:	fc 8b       	std	Y+20, r31	; 0x14
     cfa:	eb 8b       	std	Y+19, r30	; 0x13
     cfc:	f7 e0       	ldi	r31, 0x07	; 7
     cfe:	fd 8b       	std	Y+21, r31	; 0x15
     d00:	eb 89       	ldd	r30, Y+19	; 0x13
     d02:	fc 89       	ldd	r31, Y+20	; 0x14
     d04:	00 80       	ld	r0, Z
     d06:	8b 89       	ldd	r24, Y+19	; 0x13
     d08:	9c 89       	ldd	r25, Y+20	; 0x14
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	9c 8b       	std	Y+20, r25	; 0x14
     d0e:	8b 8b       	std	Y+19, r24	; 0x13
     d10:	e9 89       	ldd	r30, Y+17	; 0x11
     d12:	fa 89       	ldd	r31, Y+18	; 0x12
     d14:	00 82       	st	Z, r0
     d16:	89 89       	ldd	r24, Y+17	; 0x11
     d18:	9a 89       	ldd	r25, Y+18	; 0x12
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	9a 8b       	std	Y+18, r25	; 0x12
     d1e:	89 8b       	std	Y+17, r24	; 0x11
     d20:	9d 89       	ldd	r25, Y+21	; 0x15
     d22:	91 50       	subi	r25, 0x01	; 1
     d24:	9d 8b       	std	Y+21, r25	; 0x15
     d26:	ed 89       	ldd	r30, Y+21	; 0x15
     d28:	ee 23       	and	r30, r30
     d2a:	51 f7       	brne	.-44     	; 0xd00 <APP_init+0x60>
	UART_Init(&UART_configurations);
     d2c:	ce 01       	movw	r24, r28
     d2e:	05 96       	adiw	r24, 0x05	; 5
     d30:	0e 94 c2 14 	call	0x2984	; 0x2984 <UART_Init>

	/* Select the callback function that will be called in UART_RXC ISR occurrences */
	UARTRX_setCallBack(APP_vUartRxCallback);
     d34:	85 e4       	ldi	r24, 0x45	; 69
     d36:	9b e0       	ldi	r25, 0x0B	; 11
     d38:	0e 94 b0 14 	call	0x2960	; 0x2960 <UARTRX_setCallBack>

	TWI_ConfigType		TWI_configurations	= {TWI_ADDRESS, TWI_BAUD_RATE};
     d3c:	ce 01       	movw	r24, r28
     d3e:	0c 96       	adiw	r24, 0x0c	; 12
     d40:	9f 8b       	std	Y+23, r25	; 0x17
     d42:	8e 8b       	std	Y+22, r24	; 0x16
     d44:	e8 e6       	ldi	r30, 0x68	; 104
     d46:	f1 e0       	ldi	r31, 0x01	; 1
     d48:	f9 8f       	std	Y+25, r31	; 0x19
     d4a:	e8 8f       	std	Y+24, r30	; 0x18
     d4c:	f5 e0       	ldi	r31, 0x05	; 5
     d4e:	fa 8f       	std	Y+26, r31	; 0x1a
     d50:	e8 8d       	ldd	r30, Y+24	; 0x18
     d52:	f9 8d       	ldd	r31, Y+25	; 0x19
     d54:	00 80       	ld	r0, Z
     d56:	88 8d       	ldd	r24, Y+24	; 0x18
     d58:	99 8d       	ldd	r25, Y+25	; 0x19
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	99 8f       	std	Y+25, r25	; 0x19
     d5e:	88 8f       	std	Y+24, r24	; 0x18
     d60:	ee 89       	ldd	r30, Y+22	; 0x16
     d62:	ff 89       	ldd	r31, Y+23	; 0x17
     d64:	00 82       	st	Z, r0
     d66:	8e 89       	ldd	r24, Y+22	; 0x16
     d68:	9f 89       	ldd	r25, Y+23	; 0x17
     d6a:	01 96       	adiw	r24, 0x01	; 1
     d6c:	9f 8b       	std	Y+23, r25	; 0x17
     d6e:	8e 8b       	std	Y+22, r24	; 0x16
     d70:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d72:	91 50       	subi	r25, 0x01	; 1
     d74:	9a 8f       	std	Y+26, r25	; 0x1a
     d76:	ea 8d       	ldd	r30, Y+26	; 0x1a
     d78:	ee 23       	and	r30, r30
     d7a:	51 f7       	brne	.-44     	; 0xd50 <APP_init+0xb0>
	TWI_init(&TWI_configurations);
     d7c:	ce 01       	movw	r24, r28
     d7e:	0c 96       	adiw	r24, 0x0c	; 12
     d80:	0e 94 ef 13 	call	0x27de	; 0x27de <TWI_init>
	/* ====================================================================== */
	/* 						Components initializations:						  */
	/* ====================================================================== */

	/* GPIO is a static configurable in buzzer.h */
	Buzzer_init();
     d84:	0e 94 93 0b 	call	0x1726	; 0x1726 <Buzzer_init>

	/* GPIO is a static configurable in motor.h */
	DcMotor_Init();
     d88:	0e 94 72 11 	call	0x22e4	; 0x22e4 <DcMotor_Init>
	/* ====================================================================== */
	/*		General initial values for global invalid trials variables		  */
	/* ====================================================================== */

	/* The initial value of the decremental password conformation mismatching trials */
	g_invalid_mismatche_trials = MAX_INVALID_TRIALS;
     d8c:	83 e0       	ldi	r24, 0x03	; 3
     d8e:	80 93 9f 01 	sts	0x019F, r24

	/* The initial value of the decremental password invalid entering trials */
	g_invalid_enter_password_trials = MAX_INVALID_TRIALS;
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	80 93 a0 01 	sts	0x01A0, r24

	/* ====================================================================== */
	/*							Enable global interrupt						  */
	/* ====================================================================== */
	sei();
     d98:	78 94       	sei
}
     d9a:	6a 96       	adiw	r28, 0x1a	; 26
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <APP_vFirstRunState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = FIRST_RUN.
 **/
void APP_vFirstRunState(void)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
	/* Read the password state address in the EEPROM then update the global flag */
	EEPROM_readByte(EEPROM_PASS_STATE_ADDR, &g_password_state);
     db4:	26 e9       	ldi	r18, 0x96	; 150
     db6:	31 e0       	ldi	r19, 0x01	; 1
     db8:	89 e0       	ldi	r24, 0x09	; 9
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	b9 01       	movw	r22, r18
     dbe:	0e 94 75 0c 	call	0x18ea	; 0x18ea <EEPROM_readByte>

	/* Check the final decision of password state */
	if(g_password_state == password_existed || g_password_state == password_not_exist)
     dc2:	80 91 96 01 	lds	r24, 0x0196
     dc6:	8a 3a       	cpi	r24, 0xAA	; 170
     dc8:	21 f0       	breq	.+8      	; 0xdd2 <APP_vFirstRunState+0x26>
     dca:	80 91 96 01 	lds	r24, 0x0196
     dce:	8f 3f       	cpi	r24, 0xFF	; 255
     dd0:	c1 f4       	brne	.+48     	; 0xe02 <APP_vFirstRunState+0x56>
	{
		/* If password not previously entered, lets start getting a new password */
		if (g_password_state == password_not_exist)
     dd2:	80 91 96 01 	lds	r24, 0x0196
     dd6:	8f 3f       	cpi	r24, 0xFF	; 255
     dd8:	51 f4       	brne	.+20     	; 0xdee <APP_vFirstRunState+0x42>
		{
			/* CONTROL_ECU, end the current state and go to this next state! */
			g_current_control_state = NEW_PASSWORD;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	80 93 a1 01 	sts	0x01A1, r24

			/* Send a control byte indicates successful, making HMI ready to update its next system state */
			UART_sendByte(CTRL_SUCCESS);
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
			/* Send a control byte that indicates the HMI for the new current state */
			UART_sendByte(CTRL_GET_NEW_PASSWORD);
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
     dec:	12 c0       	rjmp	.+36     	; 0xe12 <APP_vFirstRunState+0x66>
		}
		/* If password already existing, lets enter it */
		else
		{
			/* CONTROL_ECU, end the current state and go to this next state! */
			g_current_control_state = ENTER_PASSWORD;
     dee:	85 e0       	ldi	r24, 0x05	; 5
     df0:	80 93 a1 01 	sts	0x01A1, r24

			/* Send a control byte indicates successful, making HMI ready to update its next system state */
			UART_sendByte(CTRL_SUCCESS);
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
			/* Send a control byte that indicates the HMI for the new current state */
			UART_sendByte(CTRL_ENTER_PASSWORD);
     dfa:	87 e0       	ldi	r24, 0x07	; 7
     dfc:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
     e00:	08 c0       	rjmp	.+16     	; 0xe12 <APP_vFirstRunState+0x66>
		}
	}
	else
	{
		/* CONTROL_ECU, redo this state! */
		g_current_control_state = FIRST_RUN;
     e02:	10 92 a1 01 	sts	0x01A1, r1
		/* Send a control byte indicates error occured, making HMI ready to restaet its current system state */
		UART_sendByte(CTRL_ERROR);
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		/* Send a control byte that refers to the error state, only first run have EMPTY error byte */
		UART_sendByte(CTRL_EMPTY);
     e0c:	8e ee       	ldi	r24, 0xEE	; 238
     e0e:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
	}
}
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <APP_vNewPasswordState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = NEW_PASSWORD.
 **/
void APP_vNewPasswordState(void)
{
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
	/* Reset the invalid trials if navigated here! */
	g_invalid_enter_password_trials = MAX_INVALID_TRIALS;
     e20:	83 e0       	ldi	r24, 0x03	; 3
     e22:	80 93 a0 01 	sts	0x01A0, r24

	/* Polling until recieving a RX frame */
	while(g_RX_ready_flag == FALSE);
     e26:	80 91 9e 01 	lds	r24, 0x019E
     e2a:	88 23       	and	r24, r24
     e2c:	e1 f3       	breq	.-8      	; 0xe26 <APP_vNewPasswordState+0xe>

	/* Maintain sync. by check the income control byte from the HMI */
	if (g_RX_frame[BYTE_0_CONTROL] == CTRL_GET_NEW_PASSWORD)
     e2e:	80 91 99 01 	lds	r24, 0x0199
     e32:	82 30       	cpi	r24, 0x02	; 2
     e34:	b1 f4       	brne	.+44     	; 0xe62 <APP_vNewPasswordState+0x4a>
	{
		/* Concatenate the 4 bytes recieved from HMI through the UART to update the g_password */
		g_password = APP_u32RecievePasswordUART();
     e36:	0e 94 07 0a 	call	0x140e	; 0x140e <APP_u32RecievePasswordUART>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	80 93 92 01 	sts	0x0192, r24
     e42:	90 93 93 01 	sts	0x0193, r25
     e46:	a0 93 94 01 	sts	0x0194, r26
     e4a:	b0 93 95 01 	sts	0x0195, r27

		/* CONTROL_ECU, end the current state and go to this next state! */
		g_current_control_state = CONFIRM_PASSWORD;
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	80 93 a1 01 	sts	0x01A1, r24

		/* Send a control byte indicates successful, making HMI ready to update its next system state */
		UART_sendByte(CTRL_SUCCESS);
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		UART_sendByte(CTRL_EMPTY);
     e5a:	8e ee       	ldi	r24, 0xEE	; 238
     e5c:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
     e60:	09 c0       	rjmp	.+18     	; 0xe74 <APP_vNewPasswordState+0x5c>
	}
	else
	{
		/* CONTROL_ECU, redo this state! */
		g_current_control_state = NEW_PASSWORD;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	80 93 a1 01 	sts	0x01A1, r24

		/* Send a control byte indicates error occured, making HMI ready to restaet its current system state */
		UART_sendByte(CTRL_ERROR);
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		/* Send a control byte that refers to the error state */
		UART_sendByte(CTRL_GET_NEW_PASSWORD);
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
	}

	/* Clear the RX flag to be re-usable */
	g_RX_ready_flag = FALSE;
     e74:	10 92 9e 01 	sts	0x019E, r1
}
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <APP_vConfirmNewPasswordState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = CONFIRM_PASSWORD.
 **/
void APP_vConfirmNewPasswordState(void)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <APP_vConfirmNewPasswordState+0x6>
     e84:	00 d0       	rcall	.+0      	; 0xe86 <APP_vConfirmNewPasswordState+0x8>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	/* Holds the g_password temporarily as a backup */
	uint32 temp_password = g_password;
     e8a:	80 91 92 01 	lds	r24, 0x0192
     e8e:	90 91 93 01 	lds	r25, 0x0193
     e92:	a0 91 94 01 	lds	r26, 0x0194
     e96:	b0 91 95 01 	lds	r27, 0x0195
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	9a 83       	std	Y+2, r25	; 0x02
     e9e:	ab 83       	std	Y+3, r26	; 0x03
     ea0:	bc 83       	std	Y+4, r27	; 0x04

	/* Polling until recieving a RX frame */
	while(g_RX_ready_flag == FALSE);
     ea2:	80 91 9e 01 	lds	r24, 0x019E
     ea6:	88 23       	and	r24, r24
     ea8:	e1 f3       	breq	.-8      	; 0xea2 <APP_vConfirmNewPasswordState+0x24>

	/* Maintain sync. by check the income control byte from the HMI */
	if (g_RX_frame[BYTE_0_CONTROL] == CTRL_CONFIRM_NEW_PASSWORD)
     eaa:	80 91 99 01 	lds	r24, 0x0199
     eae:	83 30       	cpi	r24, 0x03	; 3
     eb0:	e9 f5       	brne	.+122    	; 0xf2c <APP_vConfirmNewPasswordState+0xae>
	{
		/* Concatenate the 4 bytes recieved from HMI through the UART to update the g_password */
		g_password = APP_u32RecievePasswordUART();
     eb2:	0e 94 07 0a 	call	0x140e	; 0x140e <APP_u32RecievePasswordUART>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	80 93 92 01 	sts	0x0192, r24
     ebe:	90 93 93 01 	sts	0x0193, r25
     ec2:	a0 93 94 01 	sts	0x0194, r26
     ec6:	b0 93 95 01 	sts	0x0195, r27

		/* Check if the last recieved password is matched to the backup temp_password or not */
		if(g_password == temp_password)
     eca:	20 91 92 01 	lds	r18, 0x0192
     ece:	30 91 93 01 	lds	r19, 0x0193
     ed2:	40 91 94 01 	lds	r20, 0x0194
     ed6:	50 91 95 01 	lds	r21, 0x0195
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	9a 81       	ldd	r25, Y+2	; 0x02
     ede:	ab 81       	ldd	r26, Y+3	; 0x03
     ee0:	bc 81       	ldd	r27, Y+4	; 0x04
     ee2:	28 17       	cp	r18, r24
     ee4:	39 07       	cpc	r19, r25
     ee6:	4a 07       	cpc	r20, r26
     ee8:	5b 07       	cpc	r21, r27
     eea:	51 f4       	brne	.+20     	; 0xf00 <APP_vConfirmNewPasswordState+0x82>
		{
			/* CONTROL_ECU, end the current state and go to this next state! */
			g_current_control_state = MATCHED_PASSWORD;
     eec:	83 e0       	ldi	r24, 0x03	; 3
     eee:	80 93 a1 01 	sts	0x01A1, r24
			/* Send a control byte indicates successful, making HMI ready to update its next system state */
			UART_sendByte(CTRL_SUCCESS);
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
			/* Send a control byte that indicates the HMI for the new current state */
			UART_sendByte(CTRL_PASSWORD_MATCHED);
     ef8:	84 e0       	ldi	r24, 0x04	; 4
     efa:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
     efe:	1f c0       	rjmp	.+62     	; 0xf3e <APP_vConfirmNewPasswordState+0xc0>
		}
		else
		{
			/* Restore the original g_password to be re-usable in the next state */
			g_password = temp_password;
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	9a 81       	ldd	r25, Y+2	; 0x02
     f04:	ab 81       	ldd	r26, Y+3	; 0x03
     f06:	bc 81       	ldd	r27, Y+4	; 0x04
     f08:	80 93 92 01 	sts	0x0192, r24
     f0c:	90 93 93 01 	sts	0x0193, r25
     f10:	a0 93 94 01 	sts	0x0194, r26
     f14:	b0 93 95 01 	sts	0x0195, r27
			/* CONTROL_ECU, end the current state and go to this next state! */
			g_current_control_state = MISMACHTED_PASSWORD;
     f18:	84 e0       	ldi	r24, 0x04	; 4
     f1a:	80 93 a1 01 	sts	0x01A1, r24
			/* Send a control byte indicates successful, making HMI ready to update its next system state */
			UART_sendByte(CTRL_SUCCESS);
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
			/* Send a control byte that indicates the HMI for the new current state */
			UART_sendByte(CTRL_PASSWORD_MISMATCHED);
     f24:	85 e0       	ldi	r24, 0x05	; 5
     f26:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
     f2a:	09 c0       	rjmp	.+18     	; 0xf3e <APP_vConfirmNewPasswordState+0xc0>
		}
	}
	else
	{
		/* CONTROL_ECU, redo this state! */
		g_current_control_state = CONFIRM_PASSWORD;
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	80 93 a1 01 	sts	0x01A1, r24
		/* Send a control byte indicates error occured, making HMI ready to restaet its current system state */
		UART_sendByte(CTRL_ERROR);
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		/* Send a control byte that refers to the error state */
		UART_sendByte(CTRL_CONFIRM_NEW_PASSWORD);
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
	}

	/* Clear the RX flag to be re-usable */
	g_RX_ready_flag = FALSE;
     f3e:	10 92 9e 01 	sts	0x019E, r1
}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <APP_vMatchedPasswordState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = MATCHED_PASSWORD.
 **/
void APP_vMatchedPasswordState(void)
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <APP_vMatchedPasswordState+0x6>
     f56:	00 d0       	rcall	.+0      	; 0xf58 <APP_vMatchedPasswordState+0x8>
     f58:	00 d0       	rcall	.+0      	; 0xf5a <APP_vMatchedPasswordState+0xa>
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
	/* Holds the password saved in the EEPROM temporarily to check it */
	uint32	temp_password;
	/* Holds the password state saved in the EEPROM temporarily to check it */
	uint8	temp_state;
	/* Holds the invalid trials to write the password into the EEPROM */
	uint8	invalid_eeprom_trials = ONE;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	89 83       	std	Y+1, r24	; 0x01
	/* Resets any previous invalid confirming password */
	g_invalid_mismatche_trials = ZERO;
     f62:	10 92 9f 01 	sts	0x019F, r1

	/* Do the follwing instruction then check if reached the maximum number of invalid trials */
	do
	{
		/* Send the g_password to EEPROM and update the password state inside too */
		APP_vSendPasswordToEEPROM();
     f66:	0e 94 ad 0a 	call	0x155a	; 0x155a <APP_vSendPasswordToEEPROM>

		/* update the password state of CONTROL_ECU */
		g_password_state = password_existed;
     f6a:	8a ea       	ldi	r24, 0xAA	; 170
     f6c:	80 93 96 01 	sts	0x0196, r24

		/* === FOR SAFETY CHECHK === */
		/* In the following two steps will update the local vriables with the EEPROM values */
		temp_password = APP_u32PasswordInEEPROM();
     f70:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <APP_u32PasswordInEEPROM>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	8a 83       	std	Y+2, r24	; 0x02
     f7a:	9b 83       	std	Y+3, r25	; 0x03
     f7c:	ac 83       	std	Y+4, r26	; 0x04
     f7e:	bd 83       	std	Y+5, r27	; 0x05
		EEPROM_readByte(EEPROM_PASS_STATE_ADDR, &temp_state);
     f80:	9e 01       	movw	r18, r28
     f82:	2a 5f       	subi	r18, 0xFA	; 250
     f84:	3f 4f       	sbci	r19, 0xFF	; 255
     f86:	89 e0       	ldi	r24, 0x09	; 9
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	b9 01       	movw	r22, r18
     f8c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <EEPROM_readByte>

		/* Check if saved to EEPROM successfully */
		if((temp_password == g_password) && (temp_state == (uint8)g_password_state))
     f90:	20 91 92 01 	lds	r18, 0x0192
     f94:	30 91 93 01 	lds	r19, 0x0193
     f98:	40 91 94 01 	lds	r20, 0x0194
     f9c:	50 91 95 01 	lds	r21, 0x0195
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	9b 81       	ldd	r25, Y+3	; 0x03
     fa4:	ac 81       	ldd	r26, Y+4	; 0x04
     fa6:	bd 81       	ldd	r27, Y+5	; 0x05
     fa8:	82 17       	cp	r24, r18
     faa:	93 07       	cpc	r25, r19
     fac:	a4 07       	cpc	r26, r20
     fae:	b5 07       	cpc	r27, r21
     fb0:	79 f4       	brne	.+30     	; 0xfd0 <APP_vMatchedPasswordState+0x80>
     fb2:	9e 81       	ldd	r25, Y+6	; 0x06
     fb4:	80 91 96 01 	lds	r24, 0x0196
     fb8:	98 17       	cp	r25, r24
     fba:	51 f4       	brne	.+20     	; 0xfd0 <APP_vMatchedPasswordState+0x80>
		{
			/* CONTROL_ECU, end the current state and go to this next state! */
			g_current_control_state = ENTER_PASSWORD;
     fbc:	85 e0       	ldi	r24, 0x05	; 5
     fbe:	80 93 a1 01 	sts	0x01A1, r24
			/* Send a control byte indicates successful, making HMI ready to update its next system state */
			UART_sendByte(CTRL_SUCCESS);
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
			UART_sendByte(CTRL_EMPTY);
     fc8:	8e ee       	ldi	r24, 0xEE	; 238
     fca:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
     fce:	49 c0       	rjmp	.+146    	; 0x1062 <APP_vMatchedPasswordState+0x112>
			/*
			 * Increment the invalid EEPROM trials, then satisfy the do while loop
			 * Unless it reaches the maximum number of invalid trials the pass to
			 * the following if condition.
			 */
			invalid_eeprom_trials++;
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	8f 5f       	subi	r24, 0xFF	; 255
     fd4:	89 83       	std	Y+1, r24	; 0x01

			/* Navigate here only if maximum occured */
			if(invalid_eeprom_trials == MAX_INVALID_TRIALS)
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	83 30       	cpi	r24, 0x03	; 3
     fda:	09 f0       	breq	.+2      	; 0xfde <APP_vMatchedPasswordState+0x8e>
     fdc:	3e c0       	rjmp	.+124    	; 0x105a <APP_vMatchedPasswordState+0x10a>
			{
				/* Give a last chance! */
				APP_vSendPasswordToEEPROM();
     fde:	0e 94 ad 0a 	call	0x155a	; 0x155a <APP_vSendPasswordToEEPROM>
				g_password_state = password_existed;
     fe2:	8a ea       	ldi	r24, 0xAA	; 170
     fe4:	80 93 96 01 	sts	0x0196, r24

				temp_password = APP_u32PasswordInEEPROM();
     fe8:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <APP_u32PasswordInEEPROM>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	8a 83       	std	Y+2, r24	; 0x02
     ff2:	9b 83       	std	Y+3, r25	; 0x03
     ff4:	ac 83       	std	Y+4, r26	; 0x04
     ff6:	bd 83       	std	Y+5, r27	; 0x05
				EEPROM_readByte(EEPROM_PASS_STATE_ADDR, &temp_state);
     ff8:	9e 01       	movw	r18, r28
     ffa:	2a 5f       	subi	r18, 0xFA	; 250
     ffc:	3f 4f       	sbci	r19, 0xFF	; 255
     ffe:	89 e0       	ldi	r24, 0x09	; 9
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	b9 01       	movw	r22, r18
    1004:	0e 94 75 0c 	call	0x18ea	; 0x18ea <EEPROM_readByte>

				/* Check if last chance successed! */
				if((temp_password == g_password) && (temp_state == (uint8)g_password_state))
    1008:	20 91 92 01 	lds	r18, 0x0192
    100c:	30 91 93 01 	lds	r19, 0x0193
    1010:	40 91 94 01 	lds	r20, 0x0194
    1014:	50 91 95 01 	lds	r21, 0x0195
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	9b 81       	ldd	r25, Y+3	; 0x03
    101c:	ac 81       	ldd	r26, Y+4	; 0x04
    101e:	bd 81       	ldd	r27, Y+5	; 0x05
    1020:	82 17       	cp	r24, r18
    1022:	93 07       	cpc	r25, r19
    1024:	a4 07       	cpc	r26, r20
    1026:	b5 07       	cpc	r27, r21
    1028:	79 f4       	brne	.+30     	; 0x1048 <APP_vMatchedPasswordState+0xf8>
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	80 91 96 01 	lds	r24, 0x0196
    1030:	98 17       	cp	r25, r24
    1032:	51 f4       	brne	.+20     	; 0x1048 <APP_vMatchedPasswordState+0xf8>
				{
					/* CONTROL_ECU, end the current state and go to this next state! */
					g_current_control_state = ENTER_PASSWORD;
    1034:	85 e0       	ldi	r24, 0x05	; 5
    1036:	80 93 a1 01 	sts	0x01A1, r24
					/* Send a control byte indicates successful, making HMI ready to update its next system state */
					UART_sendByte(CTRL_SUCCESS);
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
					UART_sendByte(CTRL_EMPTY);
    1040:	8e ee       	ldi	r24, 0xEE	; 238
    1042:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
    1046:	0d c0       	rjmp	.+26     	; 0x1062 <APP_vMatchedPasswordState+0x112>
				}
				/* Trials suspended, retry to save form the beginning */
				else
				{
					/* CONTROL_ECU, redo this state! */
					g_current_control_state = MATCHED_PASSWORD;
    1048:	83 e0       	ldi	r24, 0x03	; 3
    104a:	80 93 a1 01 	sts	0x01A1, r24
					/* Send a control byte indicates error occured, making HMI ready to restaet its current system state */
					UART_sendByte(CTRL_ERROR);
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
					/* Send a control byte that refers to the error state */
					UART_sendByte(CTRL_PASSWORD_MATCHED);
    1054:	84 e0       	ldi	r24, 0x04	; 4
    1056:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
				}
			}
		}
	} while(invalid_eeprom_trials < MAX_INVALID_TRIALS);
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	83 30       	cpi	r24, 0x03	; 3
    105e:	08 f4       	brcc	.+2      	; 0x1062 <APP_vMatchedPasswordState+0x112>
    1060:	82 cf       	rjmp	.-252    	; 0xf66 <APP_vMatchedPasswordState+0x16>
}
    1062:	26 96       	adiw	r28, 0x06	; 6
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	cd bf       	out	0x3d, r28	; 61
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <APP_vMisMacthedPasswordState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = MISMACHTED_PASSWORD.
 **/
void APP_vMisMacthedPasswordState(void)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
	/* Polling until recieving a RX frame */
	while(g_RX_ready_flag == FALSE);
    107c:	80 91 9e 01 	lds	r24, 0x019E
    1080:	88 23       	and	r24, r24
    1082:	e1 f3       	breq	.-8      	; 0x107c <APP_vMisMacthedPasswordState+0x8>

	/* Maintain sync. by check the income control byte from the HMI */
	if(g_RX_frame[BYTE_0_CONTROL] == CTRL_PASSWORD_MISMATCHED)
    1084:	80 91 99 01 	lds	r24, 0x0199
    1088:	85 30       	cpi	r24, 0x05	; 5
    108a:	e9 f4       	brne	.+58     	; 0x10c6 <APP_vMisMacthedPasswordState+0x52>
	{

		if(--g_invalid_mismatche_trials > ZERO)
    108c:	80 91 9f 01 	lds	r24, 0x019F
    1090:	81 50       	subi	r24, 0x01	; 1
    1092:	80 93 9f 01 	sts	0x019F, r24
    1096:	80 91 9f 01 	lds	r24, 0x019F
    109a:	88 23       	and	r24, r24
    109c:	51 f0       	breq	.+20     	; 0x10b2 <APP_vMisMacthedPasswordState+0x3e>
		{
			/* CONTROL_ECU, end the current state and go to this next state! */
			g_current_control_state = CONFIRM_PASSWORD;
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	80 93 a1 01 	sts	0x01A1, r24
			/* Send a control byte indicates successful, making HMI ready to update its next system state */
			UART_sendByte(CTRL_SUCCESS);
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
			/* Send a control byte that indicates the HMI for the new current state */
			UART_sendByte(CTRL_CONFIRM_NEW_PASSWORD);
    10aa:	83 e0       	ldi	r24, 0x03	; 3
    10ac:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
    10b0:	13 c0       	rjmp	.+38     	; 0x10d8 <APP_vMisMacthedPasswordState+0x64>
		}
		else
		{
			/* CONTROL_ECU, end the current state and go to this next state! */
			g_current_control_state = NEW_PASSWORD;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	80 93 a1 01 	sts	0x01A1, r24
			/* Send a control byte indicates successful, making HMI ready to update its next system state */
			UART_sendByte(CTRL_SUCCESS);
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
			/* Send a control byte that indicates the HMI for the new current state */
			UART_sendByte(CTRL_GET_NEW_PASSWORD);
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
    10c4:	09 c0       	rjmp	.+18     	; 0x10d8 <APP_vMisMacthedPasswordState+0x64>
		}
	}
	else
	{
		/* CONTROL_ECU, rdo this state! */
		g_current_control_state = MISMACHTED_PASSWORD;
    10c6:	84 e0       	ldi	r24, 0x04	; 4
    10c8:	80 93 a1 01 	sts	0x01A1, r24
		/* Send a control byte indicates error occured, making HMI ready to restaet its current system state */
		UART_sendByte(CTRL_ERROR);
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		/* Send a control byte that refers to the error state */
		UART_sendByte(CTRL_PASSWORD_MISMATCHED);
    10d2:	85 e0       	ldi	r24, 0x05	; 5
    10d4:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
	}

	/* Clear the RX flag to be re-usable */
	g_RX_ready_flag = FALSE;
    10d8:	10 92 9e 01 	sts	0x019E, r1
}
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <APP_vEnterThePasswordState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = ENTER_PASSWORD.
 **/
void APP_vEnterThePasswordState(void)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <APP_vEnterThePasswordState+0x6>
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <APP_vEnterThePasswordState+0x8>
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
	/* A temp password that holds the password extracted to the EEPROM */
	uint32 temp_password = ZERO;
    10ee:	19 82       	std	Y+1, r1	; 0x01
    10f0:	1a 82       	std	Y+2, r1	; 0x02
    10f2:	1b 82       	std	Y+3, r1	; 0x03
    10f4:	1c 82       	std	Y+4, r1	; 0x04
	g_password = ZERO;
    10f6:	10 92 92 01 	sts	0x0192, r1
    10fa:	10 92 93 01 	sts	0x0193, r1
    10fe:	10 92 94 01 	sts	0x0194, r1
    1102:	10 92 95 01 	sts	0x0195, r1

	/* Polling until recieving a RX frame */
	while(g_RX_ready_flag == FALSE);
    1106:	80 91 9e 01 	lds	r24, 0x019E
    110a:	88 23       	and	r24, r24
    110c:	e1 f3       	breq	.-8      	; 0x1106 <APP_vEnterThePasswordState+0x24>

	/* Maintain sync. by check the income control byte from the HMI */
	if(g_RX_frame[BYTE_0_CONTROL] == CTRL_ENTER_PASSWORD)
    110e:	80 91 99 01 	lds	r24, 0x0199
    1112:	87 30       	cpi	r24, 0x07	; 7
    1114:	09 f0       	breq	.+2      	; 0x1118 <APP_vEnterThePasswordState+0x36>
    1116:	4f c0       	rjmp	.+158    	; 0x11b6 <APP_vEnterThePasswordState+0xd4>
	{
		/* Reference password */
		g_password	 = APP_u32PasswordInEEPROM();
    1118:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <APP_u32PasswordInEEPROM>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	80 93 92 01 	sts	0x0192, r24
    1124:	90 93 93 01 	sts	0x0193, r25
    1128:	a0 93 94 01 	sts	0x0194, r26
    112c:	b0 93 95 01 	sts	0x0195, r27
		/* User's password */
		temp_password= APP_u32RecievePasswordUART();
    1130:	0e 94 07 0a 	call	0x140e	; 0x140e <APP_u32RecievePasswordUART>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	9a 83       	std	Y+2, r25	; 0x02
    113c:	ab 83       	std	Y+3, r26	; 0x03
    113e:	bc 83       	std	Y+4, r27	; 0x04

		/* Check if they're matching! */
		if(g_password == temp_password)
    1140:	20 91 92 01 	lds	r18, 0x0192
    1144:	30 91 93 01 	lds	r19, 0x0193
    1148:	40 91 94 01 	lds	r20, 0x0194
    114c:	50 91 95 01 	lds	r21, 0x0195
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	9a 81       	ldd	r25, Y+2	; 0x02
    1154:	ab 81       	ldd	r26, Y+3	; 0x03
    1156:	bc 81       	ldd	r27, Y+4	; 0x04
    1158:	28 17       	cp	r18, r24
    115a:	39 07       	cpc	r19, r25
    115c:	4a 07       	cpc	r20, r26
    115e:	5b 07       	cpc	r21, r27
    1160:	69 f4       	brne	.+26     	; 0x117c <APP_vEnterThePasswordState+0x9a>
		{
			/* Reset the invalid trials if navigated here! */
			g_invalid_enter_password_trials = MAX_INVALID_TRIALS;
    1162:	83 e0       	ldi	r24, 0x03	; 3
    1164:	80 93 a0 01 	sts	0x01A0, r24
			/* CONTROL_ECU, end the current state and go to this next state! */
			g_current_control_state = MAIN_MENU;
    1168:	86 e0       	ldi	r24, 0x06	; 6
    116a:	80 93 a1 01 	sts	0x01A1, r24
			/* Send a control byte indicates successful, making HMI ready to update its next system state */
			UART_sendByte(CTRL_SUCCESS);
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
			/* Send a control byte that indicates the HMI for the new current state */
			UART_sendByte(CTRL_MAIN_MENU);
    1174:	88 e0       	ldi	r24, 0x08	; 8
    1176:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
    117a:	26 c0       	rjmp	.+76     	; 0x11c8 <APP_vEnterThePasswordState+0xe6>
		}
		/* Entered a wrong password! take care, you maybe a theif! */
		else
		{
			if(--g_invalid_enter_password_trials > ZERO)
    117c:	80 91 a0 01 	lds	r24, 0x01A0
    1180:	81 50       	subi	r24, 0x01	; 1
    1182:	80 93 a0 01 	sts	0x01A0, r24
    1186:	80 91 a0 01 	lds	r24, 0x01A0
    118a:	88 23       	and	r24, r24
    118c:	51 f0       	breq	.+20     	; 0x11a2 <APP_vEnterThePasswordState+0xc0>
			{
				/* CONTROL_ECU, end the current state and go to this next state! */
				g_current_control_state = WRONG_PASSWORD;
    118e:	8a e0       	ldi	r24, 0x0A	; 10
    1190:	80 93 a1 01 	sts	0x01A1, r24
				/* Send a control byte indicates successful, making HMI ready to update its next system state */
				UART_sendByte(CTRL_SUCCESS);
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
				/* Send a control byte that indicates the HMI for the new current state */
				UART_sendByte(CTRL_WRONG_PASSWORD);
    119a:	8c e0       	ldi	r24, 0x0C	; 12
    119c:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
    11a0:	13 c0       	rjmp	.+38     	; 0x11c8 <APP_vEnterThePasswordState+0xe6>
			}
			else
			{
				/* CONTROL_ECU, end the current state and go to this next state! */
				g_current_control_state = LOCK_SYSTEM;
    11a2:	8b e0       	ldi	r24, 0x0B	; 11
    11a4:	80 93 a1 01 	sts	0x01A1, r24
				/* Send a control byte indicates successful, making HMI ready to update its next system state */
				UART_sendByte(CTRL_SUCCESS);
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
				/* Send a control byte that indicates the HMI for the new current state */
				UART_sendByte(CTRL_LOCK_SYSTEM);
    11ae:	8d e0       	ldi	r24, 0x0D	; 13
    11b0:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
    11b4:	09 c0       	rjmp	.+18     	; 0x11c8 <APP_vEnterThePasswordState+0xe6>
		}
	}
	else
	{
		/* CONTROL_ECU, redo this state! */
		g_current_control_state = ENTER_PASSWORD;
    11b6:	85 e0       	ldi	r24, 0x05	; 5
    11b8:	80 93 a1 01 	sts	0x01A1, r24
		/* Send a control byte indicates error occured, making HMI ready to restaet its current system state */
		UART_sendByte(CTRL_ERROR);
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		/* Send a control byte that refers to the error state */
		UART_sendByte(CTRL_ENTER_PASSWORD);
    11c2:	87 e0       	ldi	r24, 0x07	; 7
    11c4:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
	}

	/* Clear the RX flag to be re-usable */
	g_RX_ready_flag = FALSE;
    11c8:	10 92 9e 01 	sts	0x019E, r1
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <APP_vMainMenuState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = MAIN_MENU.
 **/
void APP_vMainMenuState(void)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <APP_vMainMenuState+0x6>
    11e0:	0f 92       	push	r0
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
	/* Holds the command that user asked for */
	userCommandsType user_command;

	/* Polling until recieving a RX frame */
	while(g_RX_ready_flag == FALSE);
    11e6:	80 91 9e 01 	lds	r24, 0x019E
    11ea:	88 23       	and	r24, r24
    11ec:	e1 f3       	breq	.-8      	; 0x11e6 <APP_vMainMenuState+0xc>

	/* Maintain sync. by check the income control byte from the HMI */
	if(g_RX_frame[BYTE_0_CONTROL] == CTRL_MAIN_MENU)
    11ee:	80 91 99 01 	lds	r24, 0x0199
    11f2:	88 30       	cpi	r24, 0x08	; 8
    11f4:	39 f5       	brne	.+78     	; 0x1244 <APP_vMainMenuState+0x6a>
	{
		/* Get the 2nd byte of the RX frame and enusre to cast it as a userCommandType */
		user_command = (userCommandsType)(g_RX_frame[BYTE_1_PASS0_OR_CMD]);
    11f6:	80 91 9a 01 	lds	r24, 0x019A
    11fa:	89 83       	std	Y+1, r24	; 0x01

		/* Check if + for openning the door, or - to change the password */
		switch(user_command)
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3b 83       	std	Y+3, r19	; 0x03
    1204:	2a 83       	std	Y+2, r18	; 0x02
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	9b 81       	ldd	r25, Y+3	; 0x03
    120a:	8b 32       	cpi	r24, 0x2B	; 43
    120c:	91 05       	cpc	r25, r1
    120e:	31 f0       	breq	.+12     	; 0x121c <APP_vMainMenuState+0x42>
    1210:	2a 81       	ldd	r18, Y+2	; 0x02
    1212:	3b 81       	ldd	r19, Y+3	; 0x03
    1214:	2d 32       	cpi	r18, 0x2D	; 45
    1216:	31 05       	cpc	r19, r1
    1218:	59 f0       	breq	.+22     	; 0x1230 <APP_vMainMenuState+0x56>
    121a:	1d c0       	rjmp	.+58     	; 0x1256 <APP_vMainMenuState+0x7c>
		{
			case CMD_OPN_DOOR	:
			{
				/* CONTROL_ECU, end the current state and go to this next state! */
				g_current_control_state = DOOR_OPEN;
    121c:	87 e0       	ldi	r24, 0x07	; 7
    121e:	80 93 a1 01 	sts	0x01A1, r24
				/* Send a control byte indicates successful, making HMI ready to update its next system state */
				UART_sendByte(CTRL_SUCCESS);
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
				/* Send a control byte that indicates the HMI for the new current state */
				UART_sendByte(CTRL_DOOR_OPEN);
    1228:	89 e0       	ldi	r24, 0x09	; 9
    122a:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
    122e:	13 c0       	rjmp	.+38     	; 0x1256 <APP_vMainMenuState+0x7c>
				break;
			}
			case CMD_CHNG_PSWRD	:
			{
				/* CONTROL_ECU, end the current state and go to this next state! */
				g_current_control_state = NEW_PASSWORD;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	80 93 a1 01 	sts	0x01A1, r24
				/* Send a control byte indicates successful, making HMI ready to update its next system state */
				UART_sendByte(CTRL_SUCCESS);
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
				/* Send a control byte that indicates the HMI for the new current state */
				UART_sendByte(CTRL_GET_NEW_PASSWORD);
    123c:	82 e0       	ldi	r24, 0x02	; 2
    123e:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
    1242:	09 c0       	rjmp	.+18     	; 0x1256 <APP_vMainMenuState+0x7c>
		}
	}
	else
	{
		/* CONTROL_ECU, redo this state! */
		g_current_control_state = MAIN_MENU;
    1244:	86 e0       	ldi	r24, 0x06	; 6
    1246:	80 93 a1 01 	sts	0x01A1, r24
		/* Send a control byte indicates error occured, making HMI ready to restaet its current system state */
		UART_sendByte(CTRL_ERROR);
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		/* Send a control byte that refers to the error state */
		UART_sendByte(CTRL_MAIN_MENU);
    1250:	88 e0       	ldi	r24, 0x08	; 8
    1252:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
	}

	/* Clear the RX flag to be re-usable */
	g_RX_ready_flag = FALSE;
    1256:	10 92 9e 01 	sts	0x019E, r1
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <APP_vDoorOpenState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = DOOR_OPEN.
 **/
void APP_vDoorOpenState(void)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	/* Polling until recieving a RX frame */
	while(g_RX_ready_flag == FALSE);
    126e:	80 91 9e 01 	lds	r24, 0x019E
    1272:	88 23       	and	r24, r24
    1274:	e1 f3       	breq	.-8      	; 0x126e <APP_vDoorOpenState+0x8>

	/* Maintain sync. by check the income control byte from the HMI */
	if(g_RX_frame[BYTE_0_CONTROL] == CTRL_DOOR_OPEN)
    1276:	80 91 99 01 	lds	r24, 0x0199
    127a:	89 30       	cpi	r24, 0x09	; 9
    127c:	89 f4       	brne	.+34     	; 0x12a0 <APP_vDoorOpenState+0x3a>
	{
		/* Start motor openning process */
		DcMotor_Rotate(MOTOR_DIRECTION_CW, MOTOR_SPEED_100);
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	64 e6       	ldi	r22, 0x64	; 100
    1282:	0e 94 a5 11 	call	0x234a	; 0x234a <DcMotor_Rotate>
		/* Start a 15 seconds timer */
		TIMER1_vStartTimer(TIMER1_DOOR_OPEN_OR_CLOSE);
    1286:	83 e0       	ldi	r24, 0x03	; 3
    1288:	0e 94 1e 13 	call	0x263c	; 0x263c <TIMER1_vStartTimer>

		/* CONTROL_ECU, end the current state and go to this next state! */
		g_current_control_state = DOOR_HOLD;
    128c:	88 e0       	ldi	r24, 0x08	; 8
    128e:	80 93 a1 01 	sts	0x01A1, r24

		/* Send a control byte indicates successful, making HMI ready to update its next system state */
		UART_sendByte(CTRL_SUCCESS);
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		UART_sendByte(CTRL_EMPTY);
    1298:	8e ee       	ldi	r24, 0xEE	; 238
    129a:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
    129e:	09 c0       	rjmp	.+18     	; 0x12b2 <APP_vDoorOpenState+0x4c>
	}
	else
	{
		/* CONTROL_ECU, redo this state! */
		g_current_control_state = DOOR_OPEN;
    12a0:	87 e0       	ldi	r24, 0x07	; 7
    12a2:	80 93 a1 01 	sts	0x01A1, r24
		/* Send a control byte indicates error occured, making HMI ready to restaet its current system state */
		UART_sendByte(CTRL_ERROR);
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		/* Send a control byte that refers to the error state */
		UART_sendByte(CTRL_DOOR_OPEN);
    12ac:	89 e0       	ldi	r24, 0x09	; 9
    12ae:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
	}

	/* Clear the RX flag to be re-usable */
	g_RX_ready_flag = FALSE;
    12b2:	10 92 9e 01 	sts	0x019E, r1
}
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <APP_vDoorHoldState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = DOOR_HOLD.
 **/
void APP_vDoorHoldState(void)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
	/* Polling until recieving a RX frame */
	while(g_RX_ready_flag == FALSE);
    12c4:	80 91 9e 01 	lds	r24, 0x019E
    12c8:	88 23       	and	r24, r24
    12ca:	e1 f3       	breq	.-8      	; 0x12c4 <APP_vDoorHoldState+0x8>

	/* Maintain sync. by check the income control byte from the HMI */
	if(g_RX_frame[BYTE_0_CONTROL] == CTRL_DOOR_HOLD)
    12cc:	80 91 99 01 	lds	r24, 0x0199
    12d0:	8a 30       	cpi	r24, 0x0A	; 10
    12d2:	89 f4       	brne	.+34     	; 0x12f6 <APP_vDoorHoldState+0x3a>
	{
		/* Start motor holding process */
		DcMotor_Rotate(MOTOR_DIRECTION_OFF, MOTOR_SPEED_OFF);
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	0e 94 a5 11 	call	0x234a	; 0x234a <DcMotor_Rotate>

		/* Start a 3 seconds timer */
		TIMER1_vStartTimer(TIMER1_DOOR_HOLD_AND_LCD_MESSAGES);
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	0e 94 1e 13 	call	0x263c	; 0x263c <TIMER1_vStartTimer>

		/* CONTROL_ECU, end the current state and go to this next state! */
		g_current_control_state = DOOR_CLOSE;
    12e2:	89 e0       	ldi	r24, 0x09	; 9
    12e4:	80 93 a1 01 	sts	0x01A1, r24

		/* Send a control byte indicates successful, making HMI ready to update its next system state */
		UART_sendByte(CTRL_SUCCESS);
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		UART_sendByte(CTRL_EMPTY);
    12ee:	8e ee       	ldi	r24, 0xEE	; 238
    12f0:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
    12f4:	09 c0       	rjmp	.+18     	; 0x1308 <APP_vDoorHoldState+0x4c>
	}
	else
	{
		/* CONTROL_ECU, redo this state! */
		g_current_control_state = DOOR_HOLD;
    12f6:	88 e0       	ldi	r24, 0x08	; 8
    12f8:	80 93 a1 01 	sts	0x01A1, r24
		/* Send a control byte indicates error occured, making HMI ready to restaet its current system state */
		UART_sendByte(CTRL_ERROR);
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		/* Send a control byte that refers to the error state */
		UART_sendByte(CTRL_DOOR_HOLD);
    1302:	8a e0       	ldi	r24, 0x0A	; 10
    1304:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
	}

	/* Clear the RX flag to be re-usable */
	g_RX_ready_flag = FALSE;
    1308:	10 92 9e 01 	sts	0x019E, r1
}
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <APP_vDoorCloseState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = DOOR_CLOSE.
 **/
void APP_vDoorCloseState(void)
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
	/* Polling until recieving a RX frame */
	while(g_RX_ready_flag == FALSE);
    131a:	80 91 9e 01 	lds	r24, 0x019E
    131e:	88 23       	and	r24, r24
    1320:	e1 f3       	breq	.-8      	; 0x131a <APP_vDoorCloseState+0x8>

	/* Maintain sync. by check the income control byte from the HMI */
	if(g_RX_frame[BYTE_0_CONTROL] == CTRL_DOOR_CLOSE)
    1322:	80 91 99 01 	lds	r24, 0x0199
    1326:	8b 30       	cpi	r24, 0x0B	; 11
    1328:	a9 f4       	brne	.+42     	; 0x1354 <APP_vDoorCloseState+0x42>
	{
		/* Start motor holding process */
		DcMotor_Rotate(MOTOR_DIRECTION_ACW, MOTOR_SPEED_100);
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	64 e6       	ldi	r22, 0x64	; 100
    132e:	0e 94 a5 11 	call	0x234a	; 0x234a <DcMotor_Rotate>

		/* Start a 15 seconds timer */
		TIMER1_vStartTimer(TIMER1_DOOR_OPEN_OR_CLOSE);
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	0e 94 1e 13 	call	0x263c	; 0x263c <TIMER1_vStartTimer>

		/* Stop the motor */
		DcMotor_Rotate(MOTOR_DIRECTION_OFF, MOTOR_SPEED_OFF);
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	0e 94 a5 11 	call	0x234a	; 0x234a <DcMotor_Rotate>

		/* CONTROL_ECU, end the current state and go to this next state! */
		g_current_control_state = ENTER_PASSWORD;
    1340:	85 e0       	ldi	r24, 0x05	; 5
    1342:	80 93 a1 01 	sts	0x01A1, r24

		UART_sendByte(CTRL_SUCCESS);
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		UART_sendByte(CTRL_EMPTY);
    134c:	8e ee       	ldi	r24, 0xEE	; 238
    134e:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
    1352:	09 c0       	rjmp	.+18     	; 0x1366 <APP_vDoorCloseState+0x54>
	}
	else
	{
		/* CONTROL_ECU, redo this state! */
		g_current_control_state = DOOR_CLOSE;
    1354:	89 e0       	ldi	r24, 0x09	; 9
    1356:	80 93 a1 01 	sts	0x01A1, r24
		/* Send a control byte indicates successful, making HMI ready to update its next system state */
		UART_sendByte(CTRL_ERROR);
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		/* Send a control byte that refers to the error state */
		UART_sendByte(CTRL_DOOR_CLOSE);
    1360:	8b e0       	ldi	r24, 0x0B	; 11
    1362:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
	}

	/* Clear the RX flag to be re-usable */
	g_RX_ready_flag = FALSE;
    1366:	10 92 9e 01 	sts	0x019E, r1
}
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <APP_vWrongPasswordState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = WRONG_PASSWORD.
 **/
void APP_vWrongPasswordState(void)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
	while(g_RX_ready_flag == FALSE);
    1378:	80 91 9e 01 	lds	r24, 0x019E
    137c:	88 23       	and	r24, r24
    137e:	e1 f3       	breq	.-8      	; 0x1378 <APP_vWrongPasswordState+0x8>
	if(g_RX_frame[BYTE_0_CONTROL] == CTRL_WRONG_PASSWORD)
    1380:	80 91 99 01 	lds	r24, 0x0199
    1384:	8c 30       	cpi	r24, 0x0C	; 12
    1386:	51 f4       	brne	.+20     	; 0x139c <APP_vWrongPasswordState+0x2c>
	{
		/* CONTROL_ECU, redo this state! */
		g_current_control_state = ENTER_PASSWORD;
    1388:	85 e0       	ldi	r24, 0x05	; 5
    138a:	80 93 a1 01 	sts	0x01A1, r24
		/* Send a control byte indicates error occured, making HMI ready to restaet its current system state */
		UART_sendByte(CTRL_SUCCESS);
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		UART_sendByte(CTRL_EMPTY);
    1394:	8e ee       	ldi	r24, 0xEE	; 238
    1396:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
    139a:	09 c0       	rjmp	.+18     	; 0x13ae <APP_vWrongPasswordState+0x3e>
	}
	else
	{
		/* CONTROL_ECU, redo this state! */
		g_current_control_state = WRONG_PASSWORD;
    139c:	8a e0       	ldi	r24, 0x0A	; 10
    139e:	80 93 a1 01 	sts	0x01A1, r24
		/* Send a control byte indicates error occured, making HMI ready to restaet its current system state */
		UART_sendByte(CTRL_ERROR);
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		/* Send a control byte that refers to the error state */
		UART_sendByte(CTRL_WRONG_PASSWORD);
    13a8:	8c e0       	ldi	r24, 0x0C	; 12
    13aa:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
	}

	g_RX_ready_flag = FALSE;
    13ae:	10 92 9e 01 	sts	0x019E, r1
}
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <APP_vLockSystemState>:
 *	\param	:	void.
 *	\return	:	void.
 *	\note	: 	Now in current_system_state = LOCK_SYSTEM.
 **/
void APP_vLockSystemState(void)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
	/* Polling until recieving a RX frame */
	while(g_RX_ready_flag == FALSE);
    13c0:	80 91 9e 01 	lds	r24, 0x019E
    13c4:	88 23       	and	r24, r24
    13c6:	e1 f3       	breq	.-8      	; 0x13c0 <APP_vLockSystemState+0x8>
	/* Maintain sync. by check the income control byte from the HMI */
	if(g_RX_frame[BYTE_0_CONTROL] == CTRL_LOCK_SYSTEM)
    13c8:	80 91 99 01 	lds	r24, 0x0199
    13cc:	8d 30       	cpi	r24, 0x0D	; 13
    13ce:	89 f4       	brne	.+34     	; 0x13f2 <APP_vLockSystemState+0x3a>
	{
		/* Turn on the buzzer, your trails are suspected! */
		Buzzer_on();
    13d0:	0e 94 b0 0b 	call	0x1760	; 0x1760 <Buzzer_on>

		/* Start a 60 seconds timer */
		TIMER1_vStartTimer(TIMER1_BUZZER_ON_AND_SYSTEM_LOCK);
    13d4:	8a e0       	ldi	r24, 0x0A	; 10
    13d6:	0e 94 1e 13 	call	0x263c	; 0x263c <TIMER1_vStartTimer>

		/* Turn off the buzzer if it was active! */
		Buzzer_off();
    13da:	0e 94 a4 0b 	call	0x1748	; 0x1748 <Buzzer_off>

		/* CONTROL_ECU, end the current state and go to this next state! */
		g_current_control_state = ENTER_PASSWORD;
    13de:	85 e0       	ldi	r24, 0x05	; 5
    13e0:	80 93 a1 01 	sts	0x01A1, r24

		/* Send a control byte indicates successful, making HMI ready to update its next system state */
		UART_sendByte(CTRL_SUCCESS);
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		UART_sendByte(CTRL_EMPTY);
    13ea:	8e ee       	ldi	r24, 0xEE	; 238
    13ec:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
    13f0:	09 c0       	rjmp	.+18     	; 0x1404 <APP_vLockSystemState+0x4c>
	}
	else
	{
		/* CONTROL_ECU, we failed! redo the current state! */
		g_current_control_state = LOCK_SYSTEM;
    13f2:	8b e0       	ldi	r24, 0x0B	; 11
    13f4:	80 93 a1 01 	sts	0x01A1, r24
		/* Send a control byte indicates error occured, making HMI ready to restaet its current system state */
		UART_sendByte(CTRL_ERROR);
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		/* Send a control byte that refers to the error state */
		UART_sendByte(CTRL_LOCK_SYSTEM);
    13fe:	8d e0       	ldi	r24, 0x0D	; 13
    1400:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
	}

	/* Clear the RX flag to be re-usable */
	g_RX_ready_flag = FALSE;
    1404:	10 92 9e 01 	sts	0x019E, r1
}
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <APP_u32RecievePasswordUART>:
 *	\brief	:	Concatenate the 4 bytes recieved from UART and return its value.
 *	\param	:	void.
 *	\return	:	uint32 password from EEPROM.
 **/
uint32 APP_u32RecievePasswordUART(void)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	00 d0       	rcall	.+0      	; 0x1414 <APP_u32RecievePasswordUART+0x6>
    1414:	00 d0       	rcall	.+0      	; 0x1416 <APP_u32RecievePasswordUART+0x8>
    1416:	00 d0       	rcall	.+0      	; 0x1418 <APP_u32RecievePasswordUART+0xa>
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
	frameType	byte_index;
	uint8		byte;
	uint32		password = ZERO;
    141c:	19 82       	std	Y+1, r1	; 0x01
    141e:	1a 82       	std	Y+2, r1	; 0x02
    1420:	1b 82       	std	Y+3, r1	; 0x03
    1422:	1c 82       	std	Y+4, r1	; 0x04
	/* Send the uint32 password byte by byte (32/8 = 4 iterations) */
	for(byte_index = BYTE_1_PASS0_OR_CMD ; byte_index <= BYTE_4_PASS3 ; byte_index++)
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	8e 83       	std	Y+6, r24	; 0x06
    1428:	32 c0       	rjmp	.+100    	; 0x148e <APP_u32RecievePasswordUART+0x80>
	{
		byte = g_RX_frame[BYTE_1_PASS0_OR_CMD + (byte_index - INDEX_SHIFT)];
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	88 2f       	mov	r24, r24
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	fc 01       	movw	r30, r24
    1432:	e7 56       	subi	r30, 0x67	; 103
    1434:	fe 4f       	sbci	r31, 0xFE	; 254
    1436:	80 81       	ld	r24, Z
    1438:	8d 83       	std	Y+5, r24	; 0x05
		password |= ((uint32)(byte)) << ((BYTES_PER_UINT32 - byte_index) * BITS_PER_BYTE);
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	48 2f       	mov	r20, r24
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	8e 81       	ldd	r24, Y+6	; 0x06
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	84 e0       	ldi	r24, 0x04	; 4
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	82 1b       	sub	r24, r18
    1450:	93 0b       	sbc	r25, r19
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	9a 01       	movw	r18, r20
    1460:	ab 01       	movw	r20, r22
    1462:	04 c0       	rjmp	.+8      	; 0x146c <APP_u32RecievePasswordUART+0x5e>
    1464:	22 0f       	add	r18, r18
    1466:	33 1f       	adc	r19, r19
    1468:	44 1f       	adc	r20, r20
    146a:	55 1f       	adc	r21, r21
    146c:	8a 95       	dec	r24
    146e:	d2 f7       	brpl	.-12     	; 0x1464 <APP_u32RecievePasswordUART+0x56>
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	ab 81       	ldd	r26, Y+3	; 0x03
    1476:	bc 81       	ldd	r27, Y+4	; 0x04
    1478:	82 2b       	or	r24, r18
    147a:	93 2b       	or	r25, r19
    147c:	a4 2b       	or	r26, r20
    147e:	b5 2b       	or	r27, r21
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	9a 83       	std	Y+2, r25	; 0x02
    1484:	ab 83       	std	Y+3, r26	; 0x03
    1486:	bc 83       	std	Y+4, r27	; 0x04
{
	frameType	byte_index;
	uint8		byte;
	uint32		password = ZERO;
	/* Send the uint32 password byte by byte (32/8 = 4 iterations) */
	for(byte_index = BYTE_1_PASS0_OR_CMD ; byte_index <= BYTE_4_PASS3 ; byte_index++)
    1488:	8e 81       	ldd	r24, Y+6	; 0x06
    148a:	8f 5f       	subi	r24, 0xFF	; 255
    148c:	8e 83       	std	Y+6, r24	; 0x06
    148e:	8e 81       	ldd	r24, Y+6	; 0x06
    1490:	85 30       	cpi	r24, 0x05	; 5
    1492:	58 f2       	brcs	.-106    	; 0x142a <APP_u32RecievePasswordUART+0x1c>
	{
		byte = g_RX_frame[BYTE_1_PASS0_OR_CMD + (byte_index - INDEX_SHIFT)];
		password |= ((uint32)(byte)) << ((BYTES_PER_UINT32 - byte_index) * BITS_PER_BYTE);
	}
	return password;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	ab 81       	ldd	r26, Y+3	; 0x03
    149a:	bc 81       	ldd	r27, Y+4	; 0x04
}
    149c:	bc 01       	movw	r22, r24
    149e:	cd 01       	movw	r24, r26
    14a0:	26 96       	adiw	r28, 0x06	; 6
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <APP_u32PasswordInEEPROM>:
 *	\brief	:	Concatenate the 4 bytes recieved from EEPROM and return its value.
 *	\param	:	void.
 *	\return	:	uint32 password from EEPROM.
 **/
uint32 APP_u32PasswordInEEPROM(void)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <APP_u32PasswordInEEPROM+0x6>
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <APP_u32PasswordInEEPROM+0x8>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <APP_u32PasswordInEEPROM+0xa>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
	frameType	byte_index;
	uint8		byte;
	uint32		password = ZERO;
    14c0:	19 82       	std	Y+1, r1	; 0x01
    14c2:	1a 82       	std	Y+2, r1	; 0x02
    14c4:	1b 82       	std	Y+3, r1	; 0x03
    14c6:	1c 82       	std	Y+4, r1	; 0x04
	/* Send the uint32 password byte by byte (32/8 = 4 iterations) */
	for(byte_index = BYTE_1_PASS0_OR_CMD ; byte_index <= BYTE_4_PASS3 ; byte_index++)
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	8d 83       	std	Y+5, r24	; 0x05
    14cc:	34 c0       	rjmp	.+104    	; 0x1536 <APP_u32PasswordInEEPROM+0x84>
	{
		EEPROM_readByte((EEPROM_PASS_BYTE1_ADDR + (byte_index - INDEX_SHIFT)), &byte);
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	88 2f       	mov	r24, r24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	09 96       	adiw	r24, 0x09	; 9
    14d6:	9e 01       	movw	r18, r28
    14d8:	2a 5f       	subi	r18, 0xFA	; 250
    14da:	3f 4f       	sbci	r19, 0xFF	; 255
    14dc:	b9 01       	movw	r22, r18
    14de:	0e 94 75 0c 	call	0x18ea	; 0x18ea <EEPROM_readByte>
		password |= ((uint32)(byte)) << ((BYTES_PER_UINT32 - byte_index) * BITS_PER_BYTE);
    14e2:	8e 81       	ldd	r24, Y+6	; 0x06
    14e4:	48 2f       	mov	r20, r24
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	84 e0       	ldi	r24, 0x04	; 4
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	82 1b       	sub	r24, r18
    14f8:	93 0b       	sbc	r25, r19
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	9a 01       	movw	r18, r20
    1508:	ab 01       	movw	r20, r22
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <APP_u32PasswordInEEPROM+0x62>
    150c:	22 0f       	add	r18, r18
    150e:	33 1f       	adc	r19, r19
    1510:	44 1f       	adc	r20, r20
    1512:	55 1f       	adc	r21, r21
    1514:	8a 95       	dec	r24
    1516:	d2 f7       	brpl	.-12     	; 0x150c <APP_u32PasswordInEEPROM+0x5a>
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
    151c:	ab 81       	ldd	r26, Y+3	; 0x03
    151e:	bc 81       	ldd	r27, Y+4	; 0x04
    1520:	82 2b       	or	r24, r18
    1522:	93 2b       	or	r25, r19
    1524:	a4 2b       	or	r26, r20
    1526:	b5 2b       	or	r27, r21
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	9a 83       	std	Y+2, r25	; 0x02
    152c:	ab 83       	std	Y+3, r26	; 0x03
    152e:	bc 83       	std	Y+4, r27	; 0x04
{
	frameType	byte_index;
	uint8		byte;
	uint32		password = ZERO;
	/* Send the uint32 password byte by byte (32/8 = 4 iterations) */
	for(byte_index = BYTE_1_PASS0_OR_CMD ; byte_index <= BYTE_4_PASS3 ; byte_index++)
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	8f 5f       	subi	r24, 0xFF	; 255
    1534:	8d 83       	std	Y+5, r24	; 0x05
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	85 30       	cpi	r24, 0x05	; 5
    153a:	48 f2       	brcs	.-110    	; 0x14ce <APP_u32PasswordInEEPROM+0x1c>
	{
		EEPROM_readByte((EEPROM_PASS_BYTE1_ADDR + (byte_index - INDEX_SHIFT)), &byte);
		password |= ((uint32)(byte)) << ((BYTES_PER_UINT32 - byte_index) * BITS_PER_BYTE);
	}

	return password;
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	9a 81       	ldd	r25, Y+2	; 0x02
    1540:	ab 81       	ldd	r26, Y+3	; 0x03
    1542:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	26 96       	adiw	r28, 0x06	; 6
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <APP_vSendPasswordToEEPROM>:
 *				and update state in the EEPROM.
 *	\param	:	void.
 *	\return	:	uint32 password from EEPROM.
 **/
void APP_vSendPasswordToEEPROM(void)
{
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <APP_vSendPasswordToEEPROM+0xa>
    1564:	0f 92       	push	r0
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
	uint8 	byte_index;
	uint8	byte;
	uint8	password_state_in_EEPROM = password_existed;
    156a:	8a ea       	ldi	r24, 0xAA	; 170
    156c:	89 83       	std	Y+1, r24	; 0x01
	for(byte_index = BYTE_1_PASS0_OR_CMD ; byte_index <= BYTE_4_PASS3 ; byte_index++)
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	8b 83       	std	Y+3, r24	; 0x03
    1572:	2b c0       	rjmp	.+86     	; 0x15ca <APP_vSendPasswordToEEPROM+0x70>
	{
		byte = (uint8)(g_password >> ((BYTES_PER_UINT32 - byte_index) * BITS_PER_BYTE));
    1574:	40 91 92 01 	lds	r20, 0x0192
    1578:	50 91 93 01 	lds	r21, 0x0193
    157c:	60 91 94 01 	lds	r22, 0x0194
    1580:	70 91 95 01 	lds	r23, 0x0195
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	84 e0       	ldi	r24, 0x04	; 4
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	82 1b       	sub	r24, r18
    1590:	93 0b       	sbc	r25, r19
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	8a 01       	movw	r16, r20
    15a0:	9b 01       	movw	r18, r22
    15a2:	04 c0       	rjmp	.+8      	; 0x15ac <APP_vSendPasswordToEEPROM+0x52>
    15a4:	36 95       	lsr	r19
    15a6:	27 95       	ror	r18
    15a8:	17 95       	ror	r17
    15aa:	07 95       	ror	r16
    15ac:	8a 95       	dec	r24
    15ae:	d2 f7       	brpl	.-12     	; 0x15a4 <APP_vSendPasswordToEEPROM+0x4a>
    15b0:	d9 01       	movw	r26, r18
    15b2:	c8 01       	movw	r24, r16
    15b4:	8a 83       	std	Y+2, r24	; 0x02
		EEPROM_writeByte((EEPROM_PASS_BYTE1_ADDR + (byte_index - INDEX_SHIFT)), byte);
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	09 96       	adiw	r24, 0x09	; 9
    15be:	6a 81       	ldd	r22, Y+2	; 0x02
    15c0:	0e 94 bc 0b 	call	0x1778	; 0x1778 <EEPROM_writeByte>
void APP_vSendPasswordToEEPROM(void)
{
	uint8 	byte_index;
	uint8	byte;
	uint8	password_state_in_EEPROM = password_existed;
	for(byte_index = BYTE_1_PASS0_OR_CMD ; byte_index <= BYTE_4_PASS3 ; byte_index++)
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	8f 5f       	subi	r24, 0xFF	; 255
    15c8:	8b 83       	std	Y+3, r24	; 0x03
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	85 30       	cpi	r24, 0x05	; 5
    15ce:	90 f2       	brcs	.-92     	; 0x1574 <APP_vSendPasswordToEEPROM+0x1a>
	{
		byte = (uint8)(g_password >> ((BYTES_PER_UINT32 - byte_index) * BITS_PER_BYTE));
		EEPROM_writeByte((EEPROM_PASS_BYTE1_ADDR + (byte_index - INDEX_SHIFT)), byte);
	}
	EEPROM_writeByte(EEPROM_PASS_STATE_ADDR, password_state_in_EEPROM);
    15d0:	89 e0       	ldi	r24, 0x09	; 9
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	69 81       	ldd	r22, Y+1	; 0x01
    15d6:	0e 94 bc 0b 	call	0x1778	; 0x1778 <EEPROM_writeByte>
}
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	08 95       	ret

000015ea <APP_vTimer1NormalCallback>:
 *				desired time have been completed. \see timer1.c for more information.
 *	\param	:	void.
 *	\return	:	void.
 **/
void APP_vTimer1NormalCallback(void)
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	2b 97       	sbiw	r28, 0x0b	; 11
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Every time ISR occurs, we should deInit the timer then reInit
	 * it with the same configuration.
	 */
	Timer1_deInit();
    15fe:	0e 94 b4 13 	call	0x2768	; 0x2768 <Timer1_deInit>
	Timer1_ConfigType timer1_configurations = {NORMAL, F_CPU_256, PRELOAD, NOT_CTC};
    1602:	ce 01       	movw	r24, r28
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	98 87       	std	Y+8, r25	; 0x08
    1608:	8f 83       	std	Y+7, r24	; 0x07
    160a:	e4 e7       	ldi	r30, 0x74	; 116
    160c:	f1 e0       	ldi	r31, 0x01	; 1
    160e:	fa 87       	std	Y+10, r31	; 0x0a
    1610:	e9 87       	std	Y+9, r30	; 0x09
    1612:	f6 e0       	ldi	r31, 0x06	; 6
    1614:	fb 87       	std	Y+11, r31	; 0x0b
    1616:	e9 85       	ldd	r30, Y+9	; 0x09
    1618:	fa 85       	ldd	r31, Y+10	; 0x0a
    161a:	00 80       	ld	r0, Z
    161c:	89 85       	ldd	r24, Y+9	; 0x09
    161e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	9a 87       	std	Y+10, r25	; 0x0a
    1624:	89 87       	std	Y+9, r24	; 0x09
    1626:	ef 81       	ldd	r30, Y+7	; 0x07
    1628:	f8 85       	ldd	r31, Y+8	; 0x08
    162a:	00 82       	st	Z, r0
    162c:	8f 81       	ldd	r24, Y+7	; 0x07
    162e:	98 85       	ldd	r25, Y+8	; 0x08
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	98 87       	std	Y+8, r25	; 0x08
    1634:	8f 83       	std	Y+7, r24	; 0x07
    1636:	9b 85       	ldd	r25, Y+11	; 0x0b
    1638:	91 50       	subi	r25, 0x01	; 1
    163a:	9b 87       	std	Y+11, r25	; 0x0b
    163c:	eb 85       	ldd	r30, Y+11	; 0x0b
    163e:	ee 23       	and	r30, r30
    1640:	51 f7       	brne	.-44     	; 0x1616 <APP_vTimer1NormalCallback+0x2c>
	Timer1_init(&timer1_configurations);
    1642:	ce 01       	movw	r24, r28
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	0e 94 42 13 	call	0x2684	; 0x2684 <Timer1_init>

	/* Decrement the global timer seconds counter */
	timer1_counter--;
    164a:	80 91 a3 01 	lds	r24, 0x01A3
    164e:	81 50       	subi	r24, 0x01	; 1
    1650:	80 93 a3 01 	sts	0x01A3, r24
}
    1654:	2b 96       	adiw	r28, 0x0b	; 11
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <APP_vTimer1CTCCallback>:
 *				and de-init the timer. \see timer1.c for more information.
 *	\param	:	void.
 *	\return	:	void.
 **/
void APP_vTimer1CTCCallback(void)
{
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
	/* Decrement the timer counter until zero, then deinit the timer1 */
	if(--timer1_counter == ZERO)
    166e:	80 91 a3 01 	lds	r24, 0x01A3
    1672:	81 50       	subi	r24, 0x01	; 1
    1674:	80 93 a3 01 	sts	0x01A3, r24
    1678:	80 91 a3 01 	lds	r24, 0x01A3
    167c:	88 23       	and	r24, r24
    167e:	11 f4       	brne	.+4      	; 0x1684 <APP_vTimer1CTCCallback+0x1e>
	{
		Timer1_deInit();
    1680:	0e 94 b4 13 	call	0x2768	; 0x2768 <Timer1_deInit>
	}
}
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <APP_vUartRxCallback>:
 *					3: Raise up the RX flag.
 *	\param	:	void.
 *	\return	:	void.
 **/
void APP_vUartRxCallback(void)
{
    168a:	ff 92       	push	r15
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
	 * Assign each received byte to its corresponding index in RX frame.
	 * It increments the value of frame_index by 1 after its current
	 * value has been used. This means that the value of frame_index
	 * is increased after the assignment operation.
	 */
	g_RX_frame[frame_index++] = UART_recieveByte();
    1698:	f0 90 86 01 	lds	r15, 0x0186
    169c:	0f 2d       	mov	r16, r15
    169e:	10 e0       	ldi	r17, 0x00	; 0
    16a0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <UART_recieveByte>
    16a4:	f8 01       	movw	r30, r16
    16a6:	e7 56       	subi	r30, 0x67	; 103
    16a8:	fe 4f       	sbci	r31, 0xFE	; 254
    16aa:	80 83       	st	Z, r24
    16ac:	8f 2d       	mov	r24, r15
    16ae:	8f 5f       	subi	r24, 0xFF	; 255
    16b0:	80 93 86 01 	sts	0x0186, r24

	/* Raise up RX flag when five bytes been completely recieved */
	if(--g_bytes_recieved == ZERO)
    16b4:	80 91 91 01 	lds	r24, 0x0191
    16b8:	81 50       	subi	r24, 0x01	; 1
    16ba:	80 93 91 01 	sts	0x0191, r24
    16be:	80 91 91 01 	lds	r24, 0x0191
    16c2:	88 23       	and	r24, r24
    16c4:	41 f4       	brne	.+16     	; 0x16d6 <APP_vUartRxCallback+0x4c>
	{
		g_RX_ready_flag = TRUE;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	80 93 9e 01 	sts	0x019E, r24

		/* Reset the frame index */
		frame_index = ZERO;
    16cc:	10 92 86 01 	sts	0x0186, r1

		/* Reset to the initial value of number of bytes to recieve */
		g_bytes_recieved = RX_FRAME_SIZE;
    16d0:	85 e0       	ldi	r24, 0x05	; 5
    16d2:	80 93 91 01 	sts	0x0191, r24
	}
}
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	08 95       	ret

000016e2 <APP_vINT2softResetCallBack>:
 *				INT2 of HMI_ECU; thus, they will reset together.
 *	\param	:	void.
 *	\return	:	void.
 **/
void APP_vINT2softResetCallBack(void)
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
	/* Reset the password state byte */
	EEPROM_writeByte(EEPROM_PASS_STATE_ADDR		, EEPROM_M24C16_INIT_VAL);
    16ea:	89 e0       	ldi	r24, 0x09	; 9
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	6f ef       	ldi	r22, 0xFF	; 255
    16f0:	0e 94 bc 0b 	call	0x1778	; 0x1778 <EEPROM_writeByte>

	/* Reset the password 4 bytes */
	EEPROM_writeByte(EEPROM_PASS_BYTE1_ADDR+0	, EEPROM_M24C16_INIT_VAL);
    16f4:	8a e0       	ldi	r24, 0x0A	; 10
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	6f ef       	ldi	r22, 0xFF	; 255
    16fa:	0e 94 bc 0b 	call	0x1778	; 0x1778 <EEPROM_writeByte>
	EEPROM_writeByte(EEPROM_PASS_BYTE1_ADDR+1	, EEPROM_M24C16_INIT_VAL);
    16fe:	8b e0       	ldi	r24, 0x0B	; 11
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	6f ef       	ldi	r22, 0xFF	; 255
    1704:	0e 94 bc 0b 	call	0x1778	; 0x1778 <EEPROM_writeByte>
	EEPROM_writeByte(EEPROM_PASS_BYTE1_ADDR+2	, EEPROM_M24C16_INIT_VAL);
    1708:	8c e0       	ldi	r24, 0x0C	; 12
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	6f ef       	ldi	r22, 0xFF	; 255
    170e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <EEPROM_writeByte>
	EEPROM_writeByte(EEPROM_PASS_BYTE1_ADDR+3	, EEPROM_M24C16_INIT_VAL);
    1712:	8d e0       	ldi	r24, 0x0D	; 13
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	6f ef       	ldi	r22, 0xFF	; 255
    1718:	0e 94 bc 0b 	call	0x1778	; 0x1778 <EEPROM_writeByte>

	/* Use assembly instruction to jump to RESET address 0 */
	asm volatile("jmp 0");
    171c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
}
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <Buzzer_init>:
#include <buzzer.h>
/******************************************************************************/
void Buzzer_init(void)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	66 e0       	ldi	r22, 0x06	; 6
    1732:	41 e0       	ldi	r20, 0x01	; 1
    1734:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	66 e0       	ldi	r22, 0x06	; 6
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GPIO_writePin>
}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <Buzzer_off>:

void Buzzer_off(void)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	66 e0       	ldi	r22, 0x06	; 6
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GPIO_writePin>
}
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <Buzzer_on>:

void Buzzer_on(void)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	66 e0       	ldi	r22, 0x06	; 6
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GPIO_writePin>
}
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <EEPROM_writeByte>:
 *
 *******************************************************************************/
#include "external_eeprom.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	62 97       	sbiw	r28, 0x12	; 18
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	98 8b       	std	Y+16, r25	; 0x10
    178e:	8f 87       	std	Y+15, r24	; 0x0f
    1790:	69 8b       	std	Y+17, r22	; 0x11
	/* Send the Start Bit */
    TWI_start();
    1792:	0e 94 16 14 	call	0x282c	; 0x282c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1796:	0e 94 6e 14 	call	0x28dc	; 0x28dc <TWI_getStatus>
    179a:	88 30       	cpi	r24, 0x08	; 8
    179c:	11 f0       	breq	.+4      	; 0x17a2 <EEPROM_writeByte+0x2a>
        return ERROR;
    179e:	1a 8a       	std	Y+18, r1	; 0x12
    17a0:	9a c0       	rjmp	.+308    	; 0x18d6 <EEPROM_writeByte+0x15e>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    17a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a4:	98 89       	ldd	r25, Y+16	; 0x10
    17a6:	80 70       	andi	r24, 0x00	; 0
    17a8:	97 70       	andi	r25, 0x07	; 7
    17aa:	88 0f       	add	r24, r24
    17ac:	89 2f       	mov	r24, r25
    17ae:	88 1f       	adc	r24, r24
    17b0:	99 0b       	sbc	r25, r25
    17b2:	91 95       	neg	r25
    17b4:	80 6a       	ori	r24, 0xA0	; 160
    17b6:	0e 94 31 14 	call	0x2862	; 0x2862 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    17ba:	0e 94 6e 14 	call	0x28dc	; 0x28dc <TWI_getStatus>
    17be:	88 31       	cpi	r24, 0x18	; 24
    17c0:	11 f0       	breq	.+4      	; 0x17c6 <EEPROM_writeByte+0x4e>
        return ERROR; 
    17c2:	1a 8a       	std	Y+18, r1	; 0x12
    17c4:	88 c0       	rjmp	.+272    	; 0x18d6 <EEPROM_writeByte+0x15e>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    17c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c8:	0e 94 31 14 	call	0x2862	; 0x2862 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    17cc:	0e 94 6e 14 	call	0x28dc	; 0x28dc <TWI_getStatus>
    17d0:	88 32       	cpi	r24, 0x28	; 40
    17d2:	11 f0       	breq	.+4      	; 0x17d8 <EEPROM_writeByte+0x60>
        return ERROR;
    17d4:	1a 8a       	std	Y+18, r1	; 0x12
    17d6:	7f c0       	rjmp	.+254    	; 0x18d6 <EEPROM_writeByte+0x15e>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    17d8:	89 89       	ldd	r24, Y+17	; 0x11
    17da:	0e 94 31 14 	call	0x2862	; 0x2862 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    17de:	0e 94 6e 14 	call	0x28dc	; 0x28dc <TWI_getStatus>
    17e2:	88 32       	cpi	r24, 0x28	; 40
    17e4:	11 f0       	breq	.+4      	; 0x17ea <EEPROM_writeByte+0x72>
        return ERROR;
    17e6:	1a 8a       	std	Y+18, r1	; 0x12
    17e8:	76 c0       	rjmp	.+236    	; 0x18d6 <EEPROM_writeByte+0x15e>

    /* Send the Stop Bit */
    TWI_stop();
    17ea:	0e 94 26 14 	call	0x284c	; 0x284c <TWI_stop>
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a0 e2       	ldi	r26, 0x20	; 32
    17f4:	b1 e4       	ldi	r27, 0x41	; 65
    17f6:	8b 87       	std	Y+11, r24	; 0x0b
    17f8:	9c 87       	std	Y+12, r25	; 0x0c
    17fa:	ad 87       	std	Y+13, r26	; 0x0d
    17fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1800:	7c 85       	ldd	r23, Y+12	; 0x0c
    1802:	8d 85       	ldd	r24, Y+13	; 0x0d
    1804:	9e 85       	ldd	r25, Y+14	; 0x0e
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	4a ef       	ldi	r20, 0xFA	; 250
    180c:	54 e4       	ldi	r21, 0x44	; 68
    180e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	8f 83       	std	Y+7, r24	; 0x07
    1818:	98 87       	std	Y+8, r25	; 0x08
    181a:	a9 87       	std	Y+9, r26	; 0x09
    181c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    181e:	6f 81       	ldd	r22, Y+7	; 0x07
    1820:	78 85       	ldd	r23, Y+8	; 0x08
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e8       	ldi	r20, 0x80	; 128
    182c:	5f e3       	ldi	r21, 0x3F	; 63
    182e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1832:	88 23       	and	r24, r24
    1834:	2c f4       	brge	.+10     	; 0x1840 <EEPROM_writeByte+0xc8>
		__ticks = 1;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	9e 83       	std	Y+6, r25	; 0x06
    183c:	8d 83       	std	Y+5, r24	; 0x05
    183e:	3f c0       	rjmp	.+126    	; 0x18be <EEPROM_writeByte+0x146>
	else if (__tmp > 65535)
    1840:	6f 81       	ldd	r22, Y+7	; 0x07
    1842:	78 85       	ldd	r23, Y+8	; 0x08
    1844:	89 85       	ldd	r24, Y+9	; 0x09
    1846:	9a 85       	ldd	r25, Y+10	; 0x0a
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	3f ef       	ldi	r19, 0xFF	; 255
    184c:	4f e7       	ldi	r20, 0x7F	; 127
    184e:	57 e4       	ldi	r21, 0x47	; 71
    1850:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1854:	18 16       	cp	r1, r24
    1856:	4c f5       	brge	.+82     	; 0x18aa <EEPROM_writeByte+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1858:	6b 85       	ldd	r22, Y+11	; 0x0b
    185a:	7c 85       	ldd	r23, Y+12	; 0x0c
    185c:	8d 85       	ldd	r24, Y+13	; 0x0d
    185e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e2       	ldi	r20, 0x20	; 32
    1866:	51 e4       	ldi	r21, 0x41	; 65
    1868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	bc 01       	movw	r22, r24
    1872:	cd 01       	movw	r24, r26
    1874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	9e 83       	std	Y+6, r25	; 0x06
    187e:	8d 83       	std	Y+5, r24	; 0x05
    1880:	0f c0       	rjmp	.+30     	; 0x18a0 <EEPROM_writeByte+0x128>
    1882:	88 ec       	ldi	r24, 0xC8	; 200
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	9c 83       	std	Y+4, r25	; 0x04
    1888:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	9c 81       	ldd	r25, Y+4	; 0x04
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	f1 f7       	brne	.-4      	; 0x188e <EEPROM_writeByte+0x116>
    1892:	9c 83       	std	Y+4, r25	; 0x04
    1894:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1896:	8d 81       	ldd	r24, Y+5	; 0x05
    1898:	9e 81       	ldd	r25, Y+6	; 0x06
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	9e 83       	std	Y+6, r25	; 0x06
    189e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	9e 81       	ldd	r25, Y+6	; 0x06
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	69 f7       	brne	.-38     	; 0x1882 <EEPROM_writeByte+0x10a>
    18a8:	14 c0       	rjmp	.+40     	; 0x18d2 <EEPROM_writeByte+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18aa:	6f 81       	ldd	r22, Y+7	; 0x07
    18ac:	78 85       	ldd	r23, Y+8	; 0x08
    18ae:	89 85       	ldd	r24, Y+9	; 0x09
    18b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	9e 83       	std	Y+6, r25	; 0x06
    18bc:	8d 83       	std	Y+5, r24	; 0x05
    18be:	8d 81       	ldd	r24, Y+5	; 0x05
    18c0:	9e 81       	ldd	r25, Y+6	; 0x06
    18c2:	9a 83       	std	Y+2, r25	; 0x02
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <EEPROM_writeByte+0x152>
    18ce:	9a 83       	std	Y+2, r25	; 0x02
    18d0:	89 83       	std	Y+1, r24	; 0x01

    EEPROM_POST_DELAY;
	
    return SUCCESS;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	8a 8b       	std	Y+18, r24	; 0x12
    18d6:	8a 89       	ldd	r24, Y+18	; 0x12
}
    18d8:	62 96       	adiw	r28, 0x12	; 18
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	63 97       	sbiw	r28, 0x13	; 19
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	98 8b       	std	Y+16, r25	; 0x10
    1900:	8f 87       	std	Y+15, r24	; 0x0f
    1902:	7a 8b       	std	Y+18, r23	; 0x12
    1904:	69 8b       	std	Y+17, r22	; 0x11
	/* Send the Start Bit */
    TWI_start();
    1906:	0e 94 16 14 	call	0x282c	; 0x282c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    190a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <TWI_getStatus>
    190e:	88 30       	cpi	r24, 0x08	; 8
    1910:	11 f0       	breq	.+4      	; 0x1916 <EEPROM_readByte+0x2c>
        return ERROR;
    1912:	1b 8a       	std	Y+19, r1	; 0x13
    1914:	b6 c0       	rjmp	.+364    	; 0x1a82 <EEPROM_readByte+0x198>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1916:	8f 85       	ldd	r24, Y+15	; 0x0f
    1918:	98 89       	ldd	r25, Y+16	; 0x10
    191a:	80 70       	andi	r24, 0x00	; 0
    191c:	97 70       	andi	r25, 0x07	; 7
    191e:	88 0f       	add	r24, r24
    1920:	89 2f       	mov	r24, r25
    1922:	88 1f       	adc	r24, r24
    1924:	99 0b       	sbc	r25, r25
    1926:	91 95       	neg	r25
    1928:	80 6a       	ori	r24, 0xA0	; 160
    192a:	0e 94 31 14 	call	0x2862	; 0x2862 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    192e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <TWI_getStatus>
    1932:	88 31       	cpi	r24, 0x18	; 24
    1934:	11 f0       	breq	.+4      	; 0x193a <EEPROM_readByte+0x50>
        return ERROR;
    1936:	1b 8a       	std	Y+19, r1	; 0x13
    1938:	a4 c0       	rjmp	.+328    	; 0x1a82 <EEPROM_readByte+0x198>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    193a:	8f 85       	ldd	r24, Y+15	; 0x0f
    193c:	0e 94 31 14 	call	0x2862	; 0x2862 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1940:	0e 94 6e 14 	call	0x28dc	; 0x28dc <TWI_getStatus>
    1944:	88 32       	cpi	r24, 0x28	; 40
    1946:	11 f0       	breq	.+4      	; 0x194c <EEPROM_readByte+0x62>
        return ERROR;
    1948:	1b 8a       	std	Y+19, r1	; 0x13
    194a:	9b c0       	rjmp	.+310    	; 0x1a82 <EEPROM_readByte+0x198>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    194c:	0e 94 16 14 	call	0x282c	; 0x282c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1950:	0e 94 6e 14 	call	0x28dc	; 0x28dc <TWI_getStatus>
    1954:	80 31       	cpi	r24, 0x10	; 16
    1956:	11 f0       	breq	.+4      	; 0x195c <EEPROM_readByte+0x72>
        return ERROR;
    1958:	1b 8a       	std	Y+19, r1	; 0x13
    195a:	93 c0       	rjmp	.+294    	; 0x1a82 <EEPROM_readByte+0x198>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    195c:	8f 85       	ldd	r24, Y+15	; 0x0f
    195e:	98 89       	ldd	r25, Y+16	; 0x10
    1960:	80 70       	andi	r24, 0x00	; 0
    1962:	97 70       	andi	r25, 0x07	; 7
    1964:	88 0f       	add	r24, r24
    1966:	89 2f       	mov	r24, r25
    1968:	88 1f       	adc	r24, r24
    196a:	99 0b       	sbc	r25, r25
    196c:	91 95       	neg	r25
    196e:	81 6a       	ori	r24, 0xA1	; 161
    1970:	0e 94 31 14 	call	0x2862	; 0x2862 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1974:	0e 94 6e 14 	call	0x28dc	; 0x28dc <TWI_getStatus>
    1978:	80 34       	cpi	r24, 0x40	; 64
    197a:	11 f0       	breq	.+4      	; 0x1980 <EEPROM_readByte+0x96>
        return ERROR;
    197c:	1b 8a       	std	Y+19, r1	; 0x13
    197e:	81 c0       	rjmp	.+258    	; 0x1a82 <EEPROM_readByte+0x198>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1980:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <TWI_readByteWithNACK>
    1984:	e9 89       	ldd	r30, Y+17	; 0x11
    1986:	fa 89       	ldd	r31, Y+18	; 0x12
    1988:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    198a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <TWI_getStatus>
    198e:	88 35       	cpi	r24, 0x58	; 88
    1990:	11 f0       	breq	.+4      	; 0x1996 <EEPROM_readByte+0xac>
        return ERROR;
    1992:	1b 8a       	std	Y+19, r1	; 0x13
    1994:	76 c0       	rjmp	.+236    	; 0x1a82 <EEPROM_readByte+0x198>

    /* Send the Stop Bit */
    TWI_stop();
    1996:	0e 94 26 14 	call	0x284c	; 0x284c <TWI_stop>
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a0 e2       	ldi	r26, 0x20	; 32
    19a0:	b1 e4       	ldi	r27, 0x41	; 65
    19a2:	8b 87       	std	Y+11, r24	; 0x0b
    19a4:	9c 87       	std	Y+12, r25	; 0x0c
    19a6:	ad 87       	std	Y+13, r26	; 0x0d
    19a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	4a ef       	ldi	r20, 0xFA	; 250
    19b8:	54 e4       	ldi	r21, 0x44	; 68
    19ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	8f 83       	std	Y+7, r24	; 0x07
    19c4:	98 87       	std	Y+8, r25	; 0x08
    19c6:	a9 87       	std	Y+9, r26	; 0x09
    19c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ca:	6f 81       	ldd	r22, Y+7	; 0x07
    19cc:	78 85       	ldd	r23, Y+8	; 0x08
    19ce:	89 85       	ldd	r24, Y+9	; 0x09
    19d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e8       	ldi	r20, 0x80	; 128
    19d8:	5f e3       	ldi	r21, 0x3F	; 63
    19da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19de:	88 23       	and	r24, r24
    19e0:	2c f4       	brge	.+10     	; 0x19ec <EEPROM_readByte+0x102>
		__ticks = 1;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	9e 83       	std	Y+6, r25	; 0x06
    19e8:	8d 83       	std	Y+5, r24	; 0x05
    19ea:	3f c0       	rjmp	.+126    	; 0x1a6a <EEPROM_readByte+0x180>
	else if (__tmp > 65535)
    19ec:	6f 81       	ldd	r22, Y+7	; 0x07
    19ee:	78 85       	ldd	r23, Y+8	; 0x08
    19f0:	89 85       	ldd	r24, Y+9	; 0x09
    19f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	3f ef       	ldi	r19, 0xFF	; 255
    19f8:	4f e7       	ldi	r20, 0x7F	; 127
    19fa:	57 e4       	ldi	r21, 0x47	; 71
    19fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a00:	18 16       	cp	r1, r24
    1a02:	4c f5       	brge	.+82     	; 0x1a56 <EEPROM_readByte+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e2       	ldi	r20, 0x20	; 32
    1a12:	51 e4       	ldi	r21, 0x41	; 65
    1a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9e 83       	std	Y+6, r25	; 0x06
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
    1a2c:	0f c0       	rjmp	.+30     	; 0x1a4c <EEPROM_readByte+0x162>
    1a2e:	88 ec       	ldi	r24, 0xC8	; 200
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	9c 83       	std	Y+4, r25	; 0x04
    1a34:	8b 83       	std	Y+3, r24	; 0x03
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <EEPROM_readByte+0x150>
    1a3e:	9c 83       	std	Y+4, r25	; 0x04
    1a40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a42:	8d 81       	ldd	r24, Y+5	; 0x05
    1a44:	9e 81       	ldd	r25, Y+6	; 0x06
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	69 f7       	brne	.-38     	; 0x1a2e <EEPROM_readByte+0x144>
    1a54:	14 c0       	rjmp	.+40     	; 0x1a7e <EEPROM_readByte+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a56:	6f 81       	ldd	r22, Y+7	; 0x07
    1a58:	78 85       	ldd	r23, Y+8	; 0x08
    1a5a:	89 85       	ldd	r24, Y+9	; 0x09
    1a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9e 83       	std	Y+6, r25	; 0x06
    1a68:	8d 83       	std	Y+5, r24	; 0x05
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <EEPROM_readByte+0x18c>
    1a7a:	9a 83       	std	Y+2, r25	; 0x02
    1a7c:	89 83       	std	Y+1, r24	; 0x01

    EEPROM_POST_DELAY;

    return SUCCESS;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	8b 8b       	std	Y+19, r24	; 0x13
    1a82:	8b 89       	ldd	r24, Y+19	; 0x13
}
    1a84:	63 96       	adiw	r28, 0x13	; 19
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <GPIO_setupPinDirection+0x6>
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <GPIO_setupPinDirection+0x8>
    1a9e:	0f 92       	push	r0
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	6a 83       	std	Y+2, r22	; 0x02
    1aa8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	88 30       	cpi	r24, 0x08	; 8
    1aae:	08 f0       	brcs	.+2      	; 0x1ab2 <GPIO_setupPinDirection+0x1c>
    1ab0:	d5 c0       	rjmp	.+426    	; 0x1c5c <GPIO_setupPinDirection+0x1c6>
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	84 30       	cpi	r24, 0x04	; 4
    1ab6:	08 f0       	brcs	.+2      	; 0x1aba <GPIO_setupPinDirection+0x24>
    1ab8:	d1 c0       	rjmp	.+418    	; 0x1c5c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	3d 83       	std	Y+5, r19	; 0x05
    1ac2:	2c 83       	std	Y+4, r18	; 0x04
    1ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	91 05       	cpc	r25, r1
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <GPIO_setupPinDirection+0x3a>
    1ace:	43 c0       	rjmp	.+134    	; 0x1b56 <GPIO_setupPinDirection+0xc0>
    1ad0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad4:	22 30       	cpi	r18, 0x02	; 2
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	2c f4       	brge	.+10     	; 0x1ae4 <GPIO_setupPinDirection+0x4e>
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	71 f0       	breq	.+28     	; 0x1afe <GPIO_setupPinDirection+0x68>
    1ae2:	bc c0       	rjmp	.+376    	; 0x1c5c <GPIO_setupPinDirection+0x1c6>
    1ae4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <GPIO_setupPinDirection+0x5a>
    1aee:	5f c0       	rjmp	.+190    	; 0x1bae <GPIO_setupPinDirection+0x118>
    1af0:	8c 81       	ldd	r24, Y+4	; 0x04
    1af2:	9d 81       	ldd	r25, Y+5	; 0x05
    1af4:	83 30       	cpi	r24, 0x03	; 3
    1af6:	91 05       	cpc	r25, r1
    1af8:	09 f4       	brne	.+2      	; 0x1afc <GPIO_setupPinDirection+0x66>
    1afa:	85 c0       	rjmp	.+266    	; 0x1c06 <GPIO_setupPinDirection+0x170>
    1afc:	af c0       	rjmp	.+350    	; 0x1c5c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	a1 f4       	brne	.+40     	; 0x1b2c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1b04:	aa e3       	ldi	r26, 0x3A	; 58
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	ea e3       	ldi	r30, 0x3A	; 58
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 2e       	mov	r0, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <GPIO_setupPinDirection+0x8c>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <GPIO_setupPinDirection+0x88>
    1b26:	84 2b       	or	r24, r20
    1b28:	8c 93       	st	X, r24
    1b2a:	98 c0       	rjmp	.+304    	; 0x1c5c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1b2c:	aa e3       	ldi	r26, 0x3A	; 58
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	ea e3       	ldi	r30, 0x3A	; 58
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	48 2f       	mov	r20, r24
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 2e       	mov	r0, r18
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <GPIO_setupPinDirection+0xb4>
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	0a 94       	dec	r0
    1b4c:	e2 f7       	brpl	.-8      	; 0x1b46 <GPIO_setupPinDirection+0xb0>
    1b4e:	80 95       	com	r24
    1b50:	84 23       	and	r24, r20
    1b52:	8c 93       	st	X, r24
    1b54:	83 c0       	rjmp	.+262    	; 0x1c5c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	a1 f4       	brne	.+40     	; 0x1b84 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1b5c:	a7 e3       	ldi	r26, 0x37	; 55
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e7 e3       	ldi	r30, 0x37	; 55
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	48 2f       	mov	r20, r24
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	02 2e       	mov	r0, r18
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <GPIO_setupPinDirection+0xe4>
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	0a 94       	dec	r0
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <GPIO_setupPinDirection+0xe0>
    1b7e:	84 2b       	or	r24, r20
    1b80:	8c 93       	st	X, r24
    1b82:	6c c0       	rjmp	.+216    	; 0x1c5c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1b84:	a7 e3       	ldi	r26, 0x37	; 55
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e7 e3       	ldi	r30, 0x37	; 55
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	48 2f       	mov	r20, r24
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	02 2e       	mov	r0, r18
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <GPIO_setupPinDirection+0x10c>
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	0a 94       	dec	r0
    1ba4:	e2 f7       	brpl	.-8      	; 0x1b9e <GPIO_setupPinDirection+0x108>
    1ba6:	80 95       	com	r24
    1ba8:	84 23       	and	r24, r20
    1baa:	8c 93       	st	X, r24
    1bac:	57 c0       	rjmp	.+174    	; 0x1c5c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	a1 f4       	brne	.+40     	; 0x1bdc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1bb4:	a4 e3       	ldi	r26, 0x34	; 52
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e4 e3       	ldi	r30, 0x34	; 52
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <GPIO_setupPinDirection+0x13c>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <GPIO_setupPinDirection+0x138>
    1bd6:	84 2b       	or	r24, r20
    1bd8:	8c 93       	st	X, r24
    1bda:	40 c0       	rjmp	.+128    	; 0x1c5c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1bdc:	a4 e3       	ldi	r26, 0x34	; 52
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e4 e3       	ldi	r30, 0x34	; 52
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	48 2f       	mov	r20, r24
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	02 2e       	mov	r0, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <GPIO_setupPinDirection+0x164>
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	0a 94       	dec	r0
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <GPIO_setupPinDirection+0x160>
    1bfe:	80 95       	com	r24
    1c00:	84 23       	and	r24, r20
    1c02:	8c 93       	st	X, r24
    1c04:	2b c0       	rjmp	.+86     	; 0x1c5c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	81 30       	cpi	r24, 0x01	; 1
    1c0a:	a1 f4       	brne	.+40     	; 0x1c34 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1c0c:	a1 e3       	ldi	r26, 0x31	; 49
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e1 e3       	ldi	r30, 0x31	; 49
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	48 2f       	mov	r20, r24
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	02 2e       	mov	r0, r18
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <GPIO_setupPinDirection+0x194>
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	0a 94       	dec	r0
    1c2c:	e2 f7       	brpl	.-8      	; 0x1c26 <GPIO_setupPinDirection+0x190>
    1c2e:	84 2b       	or	r24, r20
    1c30:	8c 93       	st	X, r24
    1c32:	14 c0       	rjmp	.+40     	; 0x1c5c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1c34:	a1 e3       	ldi	r26, 0x31	; 49
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e1 e3       	ldi	r30, 0x31	; 49
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	48 2f       	mov	r20, r24
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	02 2e       	mov	r0, r18
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <GPIO_setupPinDirection+0x1bc>
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	0a 94       	dec	r0
    1c54:	e2 f7       	brpl	.-8      	; 0x1c4e <GPIO_setupPinDirection+0x1b8>
    1c56:	80 95       	com	r24
    1c58:	84 23       	and	r24, r20
    1c5a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <GPIO_writePin+0x6>
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <GPIO_writePin+0x8>
    1c74:	0f 92       	push	r0
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	6a 83       	std	Y+2, r22	; 0x02
    1c7e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	88 30       	cpi	r24, 0x08	; 8
    1c84:	08 f0       	brcs	.+2      	; 0x1c88 <GPIO_writePin+0x1c>
    1c86:	d5 c0       	rjmp	.+426    	; 0x1e32 <GPIO_writePin+0x1c6>
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	84 30       	cpi	r24, 0x04	; 4
    1c8c:	08 f0       	brcs	.+2      	; 0x1c90 <GPIO_writePin+0x24>
    1c8e:	d1 c0       	rjmp	.+418    	; 0x1e32 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	3d 83       	std	Y+5, r19	; 0x05
    1c98:	2c 83       	std	Y+4, r18	; 0x04
    1c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <GPIO_writePin+0x3a>
    1ca4:	43 c0       	rjmp	.+134    	; 0x1d2c <GPIO_writePin+0xc0>
    1ca6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca8:	3d 81       	ldd	r19, Y+5	; 0x05
    1caa:	22 30       	cpi	r18, 0x02	; 2
    1cac:	31 05       	cpc	r19, r1
    1cae:	2c f4       	brge	.+10     	; 0x1cba <GPIO_writePin+0x4e>
    1cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	71 f0       	breq	.+28     	; 0x1cd4 <GPIO_writePin+0x68>
    1cb8:	bc c0       	rjmp	.+376    	; 0x1e32 <GPIO_writePin+0x1c6>
    1cba:	2c 81       	ldd	r18, Y+4	; 0x04
    1cbc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cbe:	22 30       	cpi	r18, 0x02	; 2
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <GPIO_writePin+0x5a>
    1cc4:	5f c0       	rjmp	.+190    	; 0x1d84 <GPIO_writePin+0x118>
    1cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cca:	83 30       	cpi	r24, 0x03	; 3
    1ccc:	91 05       	cpc	r25, r1
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <GPIO_writePin+0x66>
    1cd0:	85 c0       	rjmp	.+266    	; 0x1ddc <GPIO_writePin+0x170>
    1cd2:	af c0       	rjmp	.+350    	; 0x1e32 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	a1 f4       	brne	.+40     	; 0x1d02 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1cda:	ab e3       	ldi	r26, 0x3B	; 59
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	eb e3       	ldi	r30, 0x3B	; 59
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	48 2f       	mov	r20, r24
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	02 2e       	mov	r0, r18
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <GPIO_writePin+0x8c>
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	0a 94       	dec	r0
    1cfa:	e2 f7       	brpl	.-8      	; 0x1cf4 <GPIO_writePin+0x88>
    1cfc:	84 2b       	or	r24, r20
    1cfe:	8c 93       	st	X, r24
    1d00:	98 c0       	rjmp	.+304    	; 0x1e32 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1d02:	ab e3       	ldi	r26, 0x3B	; 59
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	eb e3       	ldi	r30, 0x3B	; 59
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	48 2f       	mov	r20, r24
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 2e       	mov	r0, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <GPIO_writePin+0xb4>
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	0a 94       	dec	r0
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <GPIO_writePin+0xb0>
    1d24:	80 95       	com	r24
    1d26:	84 23       	and	r24, r20
    1d28:	8c 93       	st	X, r24
    1d2a:	83 c0       	rjmp	.+262    	; 0x1e32 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	a1 f4       	brne	.+40     	; 0x1d5a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1d32:	a8 e3       	ldi	r26, 0x38	; 56
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e8 e3       	ldi	r30, 0x38	; 56
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	48 2f       	mov	r20, r24
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	02 2e       	mov	r0, r18
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <GPIO_writePin+0xe4>
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	0a 94       	dec	r0
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <GPIO_writePin+0xe0>
    1d54:	84 2b       	or	r24, r20
    1d56:	8c 93       	st	X, r24
    1d58:	6c c0       	rjmp	.+216    	; 0x1e32 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1d5a:	a8 e3       	ldi	r26, 0x38	; 56
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e8 e3       	ldi	r30, 0x38	; 56
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	48 2f       	mov	r20, r24
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 2e       	mov	r0, r18
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <GPIO_writePin+0x10c>
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	0a 94       	dec	r0
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <GPIO_writePin+0x108>
    1d7c:	80 95       	com	r24
    1d7e:	84 23       	and	r24, r20
    1d80:	8c 93       	st	X, r24
    1d82:	57 c0       	rjmp	.+174    	; 0x1e32 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	81 30       	cpi	r24, 0x01	; 1
    1d88:	a1 f4       	brne	.+40     	; 0x1db2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1d8a:	a5 e3       	ldi	r26, 0x35	; 53
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e5 e3       	ldi	r30, 0x35	; 53
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	48 2f       	mov	r20, r24
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	02 2e       	mov	r0, r18
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <GPIO_writePin+0x13c>
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	0a 94       	dec	r0
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <GPIO_writePin+0x138>
    1dac:	84 2b       	or	r24, r20
    1dae:	8c 93       	st	X, r24
    1db0:	40 c0       	rjmp	.+128    	; 0x1e32 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1db2:	a5 e3       	ldi	r26, 0x35	; 53
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e5 e3       	ldi	r30, 0x35	; 53
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	48 2f       	mov	r20, r24
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	02 2e       	mov	r0, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <GPIO_writePin+0x164>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	0a 94       	dec	r0
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <GPIO_writePin+0x160>
    1dd4:	80 95       	com	r24
    1dd6:	84 23       	and	r24, r20
    1dd8:	8c 93       	st	X, r24
    1dda:	2b c0       	rjmp	.+86     	; 0x1e32 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	81 30       	cpi	r24, 0x01	; 1
    1de0:	a1 f4       	brne	.+40     	; 0x1e0a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1de2:	a2 e3       	ldi	r26, 0x32	; 50
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e2 e3       	ldi	r30, 0x32	; 50
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	48 2f       	mov	r20, r24
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	02 2e       	mov	r0, r18
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <GPIO_writePin+0x194>
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	0a 94       	dec	r0
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <GPIO_writePin+0x190>
    1e04:	84 2b       	or	r24, r20
    1e06:	8c 93       	st	X, r24
    1e08:	14 c0       	rjmp	.+40     	; 0x1e32 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1e0a:	a2 e3       	ldi	r26, 0x32	; 50
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e2 e3       	ldi	r30, 0x32	; 50
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	48 2f       	mov	r20, r24
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	02 2e       	mov	r0, r18
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <GPIO_writePin+0x1bc>
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	0a 94       	dec	r0
    1e2a:	e2 f7       	brpl	.-8      	; 0x1e24 <GPIO_writePin+0x1b8>
    1e2c:	80 95       	com	r24
    1e2e:	84 23       	and	r24, r20
    1e30:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	08 95       	ret

00001e42 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <GPIO_readPin+0x6>
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <GPIO_readPin+0x8>
    1e4a:	0f 92       	push	r0
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	8a 83       	std	Y+2, r24	; 0x02
    1e52:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1e54:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	88 30       	cpi	r24, 0x08	; 8
    1e5a:	08 f0       	brcs	.+2      	; 0x1e5e <GPIO_readPin+0x1c>
    1e5c:	84 c0       	rjmp	.+264    	; 0x1f66 <GPIO_readPin+0x124>
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	84 30       	cpi	r24, 0x04	; 4
    1e62:	08 f0       	brcs	.+2      	; 0x1e66 <GPIO_readPin+0x24>
    1e64:	80 c0       	rjmp	.+256    	; 0x1f66 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	3d 83       	std	Y+5, r19	; 0x05
    1e6e:	2c 83       	std	Y+4, r18	; 0x04
    1e70:	4c 81       	ldd	r20, Y+4	; 0x04
    1e72:	5d 81       	ldd	r21, Y+5	; 0x05
    1e74:	41 30       	cpi	r20, 0x01	; 1
    1e76:	51 05       	cpc	r21, r1
    1e78:	79 f1       	breq	.+94     	; 0x1ed8 <GPIO_readPin+0x96>
    1e7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7e:	82 30       	cpi	r24, 0x02	; 2
    1e80:	91 05       	cpc	r25, r1
    1e82:	34 f4       	brge	.+12     	; 0x1e90 <GPIO_readPin+0x4e>
    1e84:	2c 81       	ldd	r18, Y+4	; 0x04
    1e86:	3d 81       	ldd	r19, Y+5	; 0x05
    1e88:	21 15       	cp	r18, r1
    1e8a:	31 05       	cpc	r19, r1
    1e8c:	69 f0       	breq	.+26     	; 0x1ea8 <GPIO_readPin+0x66>
    1e8e:	6b c0       	rjmp	.+214    	; 0x1f66 <GPIO_readPin+0x124>
    1e90:	4c 81       	ldd	r20, Y+4	; 0x04
    1e92:	5d 81       	ldd	r21, Y+5	; 0x05
    1e94:	42 30       	cpi	r20, 0x02	; 2
    1e96:	51 05       	cpc	r21, r1
    1e98:	b9 f1       	breq	.+110    	; 0x1f08 <GPIO_readPin+0xc6>
    1e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9e:	83 30       	cpi	r24, 0x03	; 3
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <GPIO_readPin+0x64>
    1ea4:	49 c0       	rjmp	.+146    	; 0x1f38 <GPIO_readPin+0xf6>
    1ea6:	5f c0       	rjmp	.+190    	; 0x1f66 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1ea8:	e9 e3       	ldi	r30, 0x39	; 57
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	88 2f       	mov	r24, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	a9 01       	movw	r20, r18
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <GPIO_readPin+0x7e>
    1ebc:	55 95       	asr	r21
    1ebe:	47 95       	ror	r20
    1ec0:	8a 95       	dec	r24
    1ec2:	e2 f7       	brpl	.-8      	; 0x1ebc <GPIO_readPin+0x7a>
    1ec4:	ca 01       	movw	r24, r20
    1ec6:	81 70       	andi	r24, 0x01	; 1
    1ec8:	90 70       	andi	r25, 0x00	; 0
    1eca:	88 23       	and	r24, r24
    1ecc:	19 f0       	breq	.+6      	; 0x1ed4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	49 c0       	rjmp	.+146    	; 0x1f66 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ed4:	19 82       	std	Y+1, r1	; 0x01
    1ed6:	47 c0       	rjmp	.+142    	; 0x1f66 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ed8:	e6 e3       	ldi	r30, 0x36	; 54
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	88 2f       	mov	r24, r24
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	a9 01       	movw	r20, r18
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <GPIO_readPin+0xae>
    1eec:	55 95       	asr	r21
    1eee:	47 95       	ror	r20
    1ef0:	8a 95       	dec	r24
    1ef2:	e2 f7       	brpl	.-8      	; 0x1eec <GPIO_readPin+0xaa>
    1ef4:	ca 01       	movw	r24, r20
    1ef6:	81 70       	andi	r24, 0x01	; 1
    1ef8:	90 70       	andi	r25, 0x00	; 0
    1efa:	88 23       	and	r24, r24
    1efc:	19 f0       	breq	.+6      	; 0x1f04 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	31 c0       	rjmp	.+98     	; 0x1f66 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f04:	19 82       	std	Y+1, r1	; 0x01
    1f06:	2f c0       	rjmp	.+94     	; 0x1f66 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1f08:	e3 e3       	ldi	r30, 0x33	; 51
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	88 2f       	mov	r24, r24
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	a9 01       	movw	r20, r18
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <GPIO_readPin+0xde>
    1f1c:	55 95       	asr	r21
    1f1e:	47 95       	ror	r20
    1f20:	8a 95       	dec	r24
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <GPIO_readPin+0xda>
    1f24:	ca 01       	movw	r24, r20
    1f26:	81 70       	andi	r24, 0x01	; 1
    1f28:	90 70       	andi	r25, 0x00	; 0
    1f2a:	88 23       	and	r24, r24
    1f2c:	19 f0       	breq	.+6      	; 0x1f34 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	89 83       	std	Y+1, r24	; 0x01
    1f32:	19 c0       	rjmp	.+50     	; 0x1f66 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f34:	19 82       	std	Y+1, r1	; 0x01
    1f36:	17 c0       	rjmp	.+46     	; 0x1f66 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1f38:	e0 e3       	ldi	r30, 0x30	; 48
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	88 2f       	mov	r24, r24
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a9 01       	movw	r20, r18
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <GPIO_readPin+0x10e>
    1f4c:	55 95       	asr	r21
    1f4e:	47 95       	ror	r20
    1f50:	8a 95       	dec	r24
    1f52:	e2 f7       	brpl	.-8      	; 0x1f4c <GPIO_readPin+0x10a>
    1f54:	ca 01       	movw	r24, r20
    1f56:	81 70       	andi	r24, 0x01	; 1
    1f58:	90 70       	andi	r25, 0x00	; 0
    1f5a:	88 23       	and	r24, r24
    1f5c:	19 f0       	breq	.+6      	; 0x1f64 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	89 83       	std	Y+1, r24	; 0x01
    1f62:	01 c0       	rjmp	.+2      	; 0x1f66 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f64:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <GPIO_setupPortDirection+0x6>
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <GPIO_setupPortDirection+0x8>
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	89 83       	std	Y+1, r24	; 0x01
    1f86:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	84 30       	cpi	r24, 0x04	; 4
    1f8c:	90 f5       	brcc	.+100    	; 0x1ff2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	3c 83       	std	Y+4, r19	; 0x04
    1f96:	2b 83       	std	Y+3, r18	; 0x03
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	81 30       	cpi	r24, 0x01	; 1
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	d1 f0       	breq	.+52     	; 0x1fd6 <GPIO_setupPortDirection+0x5e>
    1fa2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa6:	22 30       	cpi	r18, 0x02	; 2
    1fa8:	31 05       	cpc	r19, r1
    1faa:	2c f4       	brge	.+10     	; 0x1fb6 <GPIO_setupPortDirection+0x3e>
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	61 f0       	breq	.+24     	; 0x1fcc <GPIO_setupPortDirection+0x54>
    1fb4:	1e c0       	rjmp	.+60     	; 0x1ff2 <GPIO_setupPortDirection+0x7a>
    1fb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fba:	22 30       	cpi	r18, 0x02	; 2
    1fbc:	31 05       	cpc	r19, r1
    1fbe:	81 f0       	breq	.+32     	; 0x1fe0 <GPIO_setupPortDirection+0x68>
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	83 30       	cpi	r24, 0x03	; 3
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	81 f0       	breq	.+32     	; 0x1fea <GPIO_setupPortDirection+0x72>
    1fca:	13 c0       	rjmp	.+38     	; 0x1ff2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1fcc:	ea e3       	ldi	r30, 0x3A	; 58
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	80 83       	st	Z, r24
    1fd4:	0e c0       	rjmp	.+28     	; 0x1ff2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1fd6:	e7 e3       	ldi	r30, 0x37	; 55
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	80 83       	st	Z, r24
    1fde:	09 c0       	rjmp	.+18     	; 0x1ff2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1fe0:	e4 e3       	ldi	r30, 0x34	; 52
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	80 83       	st	Z, r24
    1fe8:	04 c0       	rjmp	.+8      	; 0x1ff2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1fea:	e1 e3       	ldi	r30, 0x31	; 49
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	00 d0       	rcall	.+0      	; 0x2006 <GPIO_writePort+0x6>
    2006:	00 d0       	rcall	.+0      	; 0x2008 <GPIO_writePort+0x8>
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	89 83       	std	Y+1, r24	; 0x01
    200e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	84 30       	cpi	r24, 0x04	; 4
    2014:	90 f5       	brcc	.+100    	; 0x207a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	3c 83       	std	Y+4, r19	; 0x04
    201e:	2b 83       	std	Y+3, r18	; 0x03
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	9c 81       	ldd	r25, Y+4	; 0x04
    2024:	81 30       	cpi	r24, 0x01	; 1
    2026:	91 05       	cpc	r25, r1
    2028:	d1 f0       	breq	.+52     	; 0x205e <GPIO_writePort+0x5e>
    202a:	2b 81       	ldd	r18, Y+3	; 0x03
    202c:	3c 81       	ldd	r19, Y+4	; 0x04
    202e:	22 30       	cpi	r18, 0x02	; 2
    2030:	31 05       	cpc	r19, r1
    2032:	2c f4       	brge	.+10     	; 0x203e <GPIO_writePort+0x3e>
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	61 f0       	breq	.+24     	; 0x2054 <GPIO_writePort+0x54>
    203c:	1e c0       	rjmp	.+60     	; 0x207a <GPIO_writePort+0x7a>
    203e:	2b 81       	ldd	r18, Y+3	; 0x03
    2040:	3c 81       	ldd	r19, Y+4	; 0x04
    2042:	22 30       	cpi	r18, 0x02	; 2
    2044:	31 05       	cpc	r19, r1
    2046:	81 f0       	breq	.+32     	; 0x2068 <GPIO_writePort+0x68>
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	83 30       	cpi	r24, 0x03	; 3
    204e:	91 05       	cpc	r25, r1
    2050:	81 f0       	breq	.+32     	; 0x2072 <GPIO_writePort+0x72>
    2052:	13 c0       	rjmp	.+38     	; 0x207a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2054:	eb e3       	ldi	r30, 0x3B	; 59
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	80 83       	st	Z, r24
    205c:	0e c0       	rjmp	.+28     	; 0x207a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    205e:	e8 e3       	ldi	r30, 0x38	; 56
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	80 83       	st	Z, r24
    2066:	09 c0       	rjmp	.+18     	; 0x207a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2068:	e5 e3       	ldi	r30, 0x35	; 53
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	80 83       	st	Z, r24
    2070:	04 c0       	rjmp	.+8      	; 0x207a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2072:	e2 e3       	ldi	r30, 0x32	; 50
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	80 83       	st	Z, r24
			break;
		}
	}
}
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	00 d0       	rcall	.+0      	; 0x208e <GPIO_readPort+0x6>
    208e:	00 d0       	rcall	.+0      	; 0x2090 <GPIO_readPort+0x8>
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2096:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	84 30       	cpi	r24, 0x04	; 4
    209c:	90 f5       	brcc	.+100    	; 0x2102 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	3c 83       	std	Y+4, r19	; 0x04
    20a6:	2b 83       	std	Y+3, r18	; 0x03
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	9c 81       	ldd	r25, Y+4	; 0x04
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	91 05       	cpc	r25, r1
    20b0:	d1 f0       	breq	.+52     	; 0x20e6 <GPIO_readPort+0x5e>
    20b2:	2b 81       	ldd	r18, Y+3	; 0x03
    20b4:	3c 81       	ldd	r19, Y+4	; 0x04
    20b6:	22 30       	cpi	r18, 0x02	; 2
    20b8:	31 05       	cpc	r19, r1
    20ba:	2c f4       	brge	.+10     	; 0x20c6 <GPIO_readPort+0x3e>
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	61 f0       	breq	.+24     	; 0x20dc <GPIO_readPort+0x54>
    20c4:	1e c0       	rjmp	.+60     	; 0x2102 <GPIO_readPort+0x7a>
    20c6:	2b 81       	ldd	r18, Y+3	; 0x03
    20c8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ca:	22 30       	cpi	r18, 0x02	; 2
    20cc:	31 05       	cpc	r19, r1
    20ce:	81 f0       	breq	.+32     	; 0x20f0 <GPIO_readPort+0x68>
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	83 30       	cpi	r24, 0x03	; 3
    20d6:	91 05       	cpc	r25, r1
    20d8:	81 f0       	breq	.+32     	; 0x20fa <GPIO_readPort+0x72>
    20da:	13 c0       	rjmp	.+38     	; 0x2102 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    20dc:	e9 e3       	ldi	r30, 0x39	; 57
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	0e c0       	rjmp	.+28     	; 0x2102 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    20e6:	e6 e3       	ldi	r30, 0x36	; 54
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	09 c0       	rjmp	.+18     	; 0x2102 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    20f0:	e3 e3       	ldi	r30, 0x33	; 51
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	04 c0       	rjmp	.+8      	; 0x2102 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    20fa:	e0 e3       	ldi	r30, 0x30	; 48
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2102:	89 81       	ldd	r24, Y+1	; 0x01
}
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <__vector_3>:

/* Holds the address of the callback function */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(INT2_vect)
{
    2112:	1f 92       	push	r1
    2114:	0f 92       	push	r0
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	0f 92       	push	r0
    211a:	11 24       	eor	r1, r1
    211c:	2f 93       	push	r18
    211e:	3f 93       	push	r19
    2120:	4f 93       	push	r20
    2122:	5f 93       	push	r21
    2124:	6f 93       	push	r22
    2126:	7f 93       	push	r23
    2128:	8f 93       	push	r24
    212a:	9f 93       	push	r25
    212c:	af 93       	push	r26
    212e:	bf 93       	push	r27
    2130:	ef 93       	push	r30
    2132:	ff 93       	push	r31
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
	 *  bit is written to one, the Global Interrupt Flag in SREG is written to
	 *  one and the RXC bit in UCSRA is set.
	 */

	/* Checks if the global pointer g_callBackPtr is not pointing to NULL. */
	if(g_callBackPtr != NULL_PTR)
    213c:	80 91 87 01 	lds	r24, 0x0187
    2140:	90 91 88 01 	lds	r25, 0x0188
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	29 f0       	breq	.+10     	; 0x2152 <__vector_3+0x40>
	{
		/* Call the callback function using pointer to function g_callBackPtr(); */
		(*g_callBackPtr)();
    2148:	e0 91 87 01 	lds	r30, 0x0187
    214c:	f0 91 88 01 	lds	r31, 0x0188
    2150:	09 95       	icall
	}
}
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	ff 91       	pop	r31
    2158:	ef 91       	pop	r30
    215a:	bf 91       	pop	r27
    215c:	af 91       	pop	r26
    215e:	9f 91       	pop	r25
    2160:	8f 91       	pop	r24
    2162:	7f 91       	pop	r23
    2164:	6f 91       	pop	r22
    2166:	5f 91       	pop	r21
    2168:	4f 91       	pop	r20
    216a:	3f 91       	pop	r19
    216c:	2f 91       	pop	r18
    216e:	0f 90       	pop	r0
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	0f 90       	pop	r0
    2174:	1f 90       	pop	r1
    2176:	18 95       	reti

00002178 <INT2_setCallBack>:

void INT2_setCallBack(void(*a_ptr)(void))
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <INT2_setCallBack+0x6>
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	9a 83       	std	Y+2, r25	; 0x02
    2184:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	9a 81       	ldd	r25, Y+2	; 0x02
    218a:	90 93 88 01 	sts	0x0188, r25
    218e:	80 93 87 01 	sts	0x0187, r24
}
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <INT2_init>:

void INT2_init(void)
{
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
	/* Port B Data Direction Register – DDRB */
	/* Set the RESUME button as input - PB2 */
	CLEAR_BIT(DDRB,PB2);
    21a4:	a7 e3       	ldi	r26, 0x37	; 55
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e7 e3       	ldi	r30, 0x37	; 55
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	8b 7f       	andi	r24, 0xFB	; 251
    21b0:	8c 93       	st	X, r24

	/* Port B Data Register – PORTB */
	/* Activate the internal pull-up resistor - PB2 */
	SET_BIT(PORTB,PB2);
    21b2:	a8 e3       	ldi	r26, 0x38	; 56
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e8 e3       	ldi	r30, 0x38	; 56
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	84 60       	ori	r24, 0x04	; 4
    21be:	8c 93       	st	X, r24

	/*MCU Control and Status Register – MCUCSR*/
	/* Interrupt Sense Control 2 - ISC2: CLR for Falling edge */
	SET_BIT(MCUCSR,ISC2);
    21c0:	a4 e5       	ldi	r26, 0x54	; 84
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e4 e5       	ldi	r30, 0x54	; 84
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	80 64       	ori	r24, 0x40	; 64
    21cc:	8c 93       	st	X, r24

	/* General Interrupt Control Register – GICR */
	/* External Interrupt Request 0 Enable - INT2 */
	SET_BIT(GICR,INT2);
    21ce:	ab e5       	ldi	r26, 0x5B	; 91
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	eb e5       	ldi	r30, 0x5B	; 91
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	80 62       	ori	r24, 0x20	; 32
    21da:	8c 93       	st	X, r24

	/* General Interrupt Flag Register – GIFR */
	/* External Interrupt Request 0 Enable - INTF2 */
	/* SET_BIT(GIFR,INTF2); */
}
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <main>:
systemStateType g_current_control_state;

/********************** THE STATE-MACHINE ALGORITHM ***************************/

int main (void)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <main+0x6>
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
	/* Set the initial values and configurations of the application */
	APP_init();
    21ec:	0e 94 50 06 	call	0xca0	; 0xca0 <APP_init>
	{
		/*
		 * Switch on the value of g_current_control_state to determine the desired
		 * next state to proceed with.
		 */
		switch(g_current_control_state)
    21f0:	80 91 a1 01 	lds	r24, 0x01A1
    21f4:	28 2f       	mov	r18, r24
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	3a 83       	std	Y+2, r19	; 0x02
    21fa:	29 83       	std	Y+1, r18	; 0x01
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2200:	85 30       	cpi	r24, 0x05	; 5
    2202:	91 05       	cpc	r25, r1
    2204:	09 f4       	brne	.+2      	; 0x2208 <main+0x26>
    2206:	59 c0       	rjmp	.+178    	; 0x22ba <main+0xd8>
    2208:	29 81       	ldd	r18, Y+1	; 0x01
    220a:	3a 81       	ldd	r19, Y+2	; 0x02
    220c:	26 30       	cpi	r18, 0x06	; 6
    220e:	31 05       	cpc	r19, r1
    2210:	04 f5       	brge	.+64     	; 0x2252 <main+0x70>
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	9a 81       	ldd	r25, Y+2	; 0x02
    2216:	82 30       	cpi	r24, 0x02	; 2
    2218:	91 05       	cpc	r25, r1
    221a:	09 f4       	brne	.+2      	; 0x221e <main+0x3c>
    221c:	45 c0       	rjmp	.+138    	; 0x22a8 <main+0xc6>
    221e:	29 81       	ldd	r18, Y+1	; 0x01
    2220:	3a 81       	ldd	r19, Y+2	; 0x02
    2222:	23 30       	cpi	r18, 0x03	; 3
    2224:	31 05       	cpc	r19, r1
    2226:	54 f4       	brge	.+20     	; 0x223c <main+0x5a>
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	9a 81       	ldd	r25, Y+2	; 0x02
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	b1 f1       	breq	.+108    	; 0x229c <main+0xba>
    2230:	29 81       	ldd	r18, Y+1	; 0x01
    2232:	3a 81       	ldd	r19, Y+2	; 0x02
    2234:	21 30       	cpi	r18, 0x01	; 1
    2236:	31 05       	cpc	r19, r1
    2238:	a1 f1       	breq	.+104    	; 0x22a2 <main+0xc0>
    223a:	da cf       	rjmp	.-76     	; 0x21f0 <main+0xe>
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	9a 81       	ldd	r25, Y+2	; 0x02
    2240:	83 30       	cpi	r24, 0x03	; 3
    2242:	91 05       	cpc	r25, r1
    2244:	a1 f1       	breq	.+104    	; 0x22ae <main+0xcc>
    2246:	29 81       	ldd	r18, Y+1	; 0x01
    2248:	3a 81       	ldd	r19, Y+2	; 0x02
    224a:	24 30       	cpi	r18, 0x04	; 4
    224c:	31 05       	cpc	r19, r1
    224e:	91 f1       	breq	.+100    	; 0x22b4 <main+0xd2>
    2250:	cf cf       	rjmp	.-98     	; 0x21f0 <main+0xe>
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	9a 81       	ldd	r25, Y+2	; 0x02
    2256:	88 30       	cpi	r24, 0x08	; 8
    2258:	91 05       	cpc	r25, r1
    225a:	c1 f1       	breq	.+112    	; 0x22cc <main+0xea>
    225c:	29 81       	ldd	r18, Y+1	; 0x01
    225e:	3a 81       	ldd	r19, Y+2	; 0x02
    2260:	29 30       	cpi	r18, 0x09	; 9
    2262:	31 05       	cpc	r19, r1
    2264:	5c f4       	brge	.+22     	; 0x227c <main+0x9a>
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
    226a:	86 30       	cpi	r24, 0x06	; 6
    226c:	91 05       	cpc	r25, r1
    226e:	41 f1       	breq	.+80     	; 0x22c0 <main+0xde>
    2270:	29 81       	ldd	r18, Y+1	; 0x01
    2272:	3a 81       	ldd	r19, Y+2	; 0x02
    2274:	27 30       	cpi	r18, 0x07	; 7
    2276:	31 05       	cpc	r19, r1
    2278:	31 f1       	breq	.+76     	; 0x22c6 <main+0xe4>
    227a:	ba cf       	rjmp	.-140    	; 0x21f0 <main+0xe>
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	9a 81       	ldd	r25, Y+2	; 0x02
    2280:	8a 30       	cpi	r24, 0x0A	; 10
    2282:	91 05       	cpc	r25, r1
    2284:	49 f1       	breq	.+82     	; 0x22d8 <main+0xf6>
    2286:	29 81       	ldd	r18, Y+1	; 0x01
    2288:	3a 81       	ldd	r19, Y+2	; 0x02
    228a:	2a 30       	cpi	r18, 0x0A	; 10
    228c:	31 05       	cpc	r19, r1
    228e:	0c f1       	brlt	.+66     	; 0x22d2 <main+0xf0>
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	9a 81       	ldd	r25, Y+2	; 0x02
    2294:	8b 30       	cpi	r24, 0x0B	; 11
    2296:	91 05       	cpc	r25, r1
    2298:	11 f1       	breq	.+68     	; 0x22de <main+0xfc>
    229a:	aa cf       	rjmp	.-172    	; 0x21f0 <main+0xe>
			 * indicates the password is existed or not. Then send it to the
			 * HMI_ECU.
			 */
			case FIRST_RUN			:
			{
				APP_vFirstRunState();
    229c:	0e 94 d6 06 	call	0xdac	; 0xdac <APP_vFirstRunState>
    22a0:	a7 cf       	rjmp	.-178    	; 0x21f0 <main+0xe>
			 * HMI_ECU, then update the g_password with it. At the end, it sends
			 * a control byte to the HMI_ECU to resume the working.
			 */
			case NEW_PASSWORD		:
			{
				APP_vNewPasswordState();
    22a2:	0e 94 0c 07 	call	0xe18	; 0xe18 <APP_vNewPasswordState>
    22a6:	a4 cf       	rjmp	.-184    	; 0x21f0 <main+0xe>
			 * the next state according to its result. At the end, it sends a
			 * control byte to the HMI_ECU to resume the working.
			 */
			case CONFIRM_PASSWORD	:
			{
				APP_vConfirmNewPasswordState();
    22a8:	0e 94 3f 07 	call	0xe7e	; 0xe7e <APP_vConfirmNewPasswordState>
    22ac:	a1 cf       	rjmp	.-190    	; 0x21f0 <main+0xe>
			 * At the end, it sends a control byte to the HMI_ECU to resume
			 * the working.
			 */
			case MATCHED_PASSWORD	:
			{
				APP_vMatchedPasswordState();
    22ae:	0e 94 a8 07 	call	0xf50	; 0xf50 <APP_vMatchedPasswordState>
    22b2:	9e cf       	rjmp	.-196    	; 0x21f0 <main+0xe>
			 * will be CONFIRM_PASSWORD, otherwise, re-enter a new password. At
			 * the end, it sends a control byte to the HMI_ECU to resume the working.
			 */
			case MISMACHTED_PASSWORD:
			{
				APP_vMisMacthedPasswordState();
    22b4:	0e 94 3a 08 	call	0x1074	; 0x1074 <APP_vMisMacthedPasswordState>
    22b8:	9b cf       	rjmp	.-202    	; 0x21f0 <main+0xe>
			 * locked. At the end, it sends a control byte to the HMI_ECU to
			 * resume the working.
			 */
			case ENTER_PASSWORD		:
			{
				APP_vEnterThePasswordState();
    22ba:	0e 94 71 08 	call	0x10e2	; 0x10e2 <APP_vEnterThePasswordState>
    22be:	98 cf       	rjmp	.-208    	; 0x21f0 <main+0xe>
			 * HMI_ECU and switch the current system state accordingly. At the
			 * end, it sends a control byte to the HMI_ECU to resume the working.
			 */
			case MAIN_MENU			:
			{
				APP_vMainMenuState();
    22c0:	0e 94 ed 08 	call	0x11da	; 0x11da <APP_vMainMenuState>
    22c4:	95 cf       	rjmp	.-214    	; 0x21f0 <main+0xe>
			 * to DOOR_HOLD state. At the end, it sends a control byte to the
			 * HMI_ECU to resume the working.
			 */
			case DOOR_OPEN			:
			{
				APP_vDoorOpenState();
    22c6:	0e 94 33 09 	call	0x1266	; 0x1266 <APP_vDoorOpenState>
    22ca:	92 cf       	rjmp	.-220    	; 0x21f0 <main+0xe>
			 * a certain part of time. Then switch to DOOR_CLOSE state. At the
			 * end, it sends a control byte to the HMI_ECU to resume the working.
			 */
			case DOOR_HOLD			:
			{
				APP_vDoorHoldState();
    22cc:	0e 94 5e 09 	call	0x12bc	; 0x12bc <APP_vDoorHoldState>
    22d0:	8f cf       	rjmp	.-226    	; 0x21f0 <main+0xe>
			 * to ENTER_PASSWORD state. At the end, it sends a control byte to the
			 * HMI_ECU to resume the working.
			 */
			case DOOR_CLOSE			:
			{
				APP_vDoorCloseState();
    22d2:	0e 94 89 09 	call	0x1312	; 0x1312 <APP_vDoorCloseState>
    22d6:	8c cf       	rjmp	.-232    	; 0x21f0 <main+0xe>
			 * state. At the end, it sends a control byte to the HMI_ECU to resume
			 * the working.
			 */
			case WRONG_PASSWORD		:
			{
				APP_vWrongPasswordState();
    22d8:	0e 94 b8 09 	call	0x1370	; 0x1370 <APP_vWrongPasswordState>
    22dc:	89 cf       	rjmp	.-238    	; 0x21f0 <main+0xe>
			 * state. At the end, it sends a control byte to the HMI_ECU to resume
			 * the working.
			 */
			case LOCK_SYSTEM		:
			{
				APP_vLockSystemState();
    22de:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <APP_vLockSystemState>
    22e2:	86 cf       	rjmp	.-244    	; 0x21f0 <main+0xe>

000022e4 <DcMotor_Init>:

static DcMotor_DirectionType motor_state;
static DcMotor_SpeedType motor_speed;

void DcMotor_Init(void)
{
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
	/* initialize motor EN1 pin */
	GPIO_setupPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, PIN_OUTPUT);
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	63 e0       	ldi	r22, 0x03	; 3
    22f0:	41 e0       	ldi	r20, 0x01	; 1
    22f2:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR_EN1_PORT, MOTOR_EN1_PIN, LOGIC_LOW);
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	63 e0       	ldi	r22, 0x03	; 3
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GPIO_writePin>

	/* initialize IN1 pin */
	GPIO_setupPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, PIN_OUTPUT);
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	64 e0       	ldi	r22, 0x04	; 4
    2304:	41 e0       	ldi	r20, 0x01	; 1
    2306:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, LOGIC_LOW);
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	64 e0       	ldi	r22, 0x04	; 4
    230e:	40 e0       	ldi	r20, 0x00	; 0
    2310:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GPIO_writePin>

	/* initialize IN2 pin */
	GPIO_setupPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, PIN_OUTPUT);
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	65 e0       	ldi	r22, 0x05	; 5
    2318:	41 e0       	ldi	r20, 0x01	; 1
    231a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, LOGIC_LOW);
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	65 e0       	ldi	r22, 0x05	; 5
    2322:	40 e0       	ldi	r20, 0x00	; 0
    2324:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GPIO_writePin>

	/* Set timer to 0 duty cycle */
	Timer0_PWM_Init(STOP);
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <Timer0_PWM_Init>

	/* set the initial motor state as STOP */
	motor_state = MOTOR_DIRECTION_OFF;
    232e:	10 92 89 01 	sts	0x0189, r1
	motor_speed = MOTOR_SPEED_OFF;
    2332:	10 92 8a 01 	sts	0x018A, r1
	DcMotor_Rotate(motor_state, motor_speed);
    2336:	80 91 89 01 	lds	r24, 0x0189
    233a:	90 91 8a 01 	lds	r25, 0x018A
    233e:	69 2f       	mov	r22, r25
    2340:	0e 94 a5 11 	call	0x234a	; 0x234a <DcMotor_Rotate>
}
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <DcMotor_Rotate>:

/* This function will rotate the motor with a direction and speed which are passed to it as inputs*/
/* The states are: stop, clockwise (CW), and anti-clockwise (A_CW), A_CW will not be used in our application */
void DcMotor_Rotate(DcMotor_DirectionType state, DcMotor_SpeedType speed)
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	00 d0       	rcall	.+0      	; 0x2350 <DcMotor_Rotate+0x6>
    2350:	00 d0       	rcall	.+0      	; 0x2352 <DcMotor_Rotate+0x8>
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	6a 83       	std	Y+2, r22	; 0x02
	/* check if current state was changed that that stored in the global variable */
	if (state != motor_state)
    235a:	90 91 89 01 	lds	r25, 0x0189
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	89 17       	cp	r24, r25
    2362:	09 f4       	brne	.+2      	; 0x2366 <DcMotor_Rotate+0x1c>
    2364:	42 c0       	rjmp	.+132    	; 0x23ea <DcMotor_Rotate+0xa0>
	{
		/* Now the motor state changed, so lets check to which state exactly */
		switch(state)
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	28 2f       	mov	r18, r24
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	3c 83       	std	Y+4, r19	; 0x04
    236e:	2b 83       	std	Y+3, r18	; 0x03
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	9c 81       	ldd	r25, Y+4	; 0x04
    2374:	81 30       	cpi	r24, 0x01	; 1
    2376:	91 05       	cpc	r25, r1
    2378:	31 f0       	breq	.+12     	; 0x2386 <DcMotor_Rotate+0x3c>
    237a:	2b 81       	ldd	r18, Y+3	; 0x03
    237c:	3c 81       	ldd	r19, Y+4	; 0x04
    237e:	22 30       	cpi	r18, 0x02	; 2
    2380:	31 05       	cpc	r19, r1
    2382:	91 f0       	breq	.+36     	; 0x23a8 <DcMotor_Rotate+0x5e>
    2384:	22 c0       	rjmp	.+68     	; 0x23ca <DcMotor_Rotate+0x80>
		{
			case MOTOR_DIRECTION_CW:
			{
				/* start PWM with the given speed */
				Timer0_PWM_Init(speed);
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	0e 94 ff 11 	call	0x23fe	; 0x23fe <Timer0_PWM_Init>

				/* Rotate the motor CW */
				GPIO_writePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, LOGIC_HIGH);
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	64 e0       	ldi	r22, 0x04	; 4
    2390:	41 e0       	ldi	r20, 0x01	; 1
    2392:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GPIO_writePin>
				GPIO_writePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, LOGIC_LOW);
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	65 e0       	ldi	r22, 0x05	; 5
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GPIO_writePin>

				/* Change the current state of the global variable */
				motor_state = MOTOR_DIRECTION_CW;
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	80 93 89 01 	sts	0x0189, r24
    23a6:	24 c0       	rjmp	.+72     	; 0x23f0 <DcMotor_Rotate+0xa6>
			}

			case MOTOR_DIRECTION_ACW:
			{
				/* start PWM with the given speed */
				Timer0_PWM_Init(speed);
    23a8:	8a 81       	ldd	r24, Y+2	; 0x02
    23aa:	0e 94 ff 11 	call	0x23fe	; 0x23fe <Timer0_PWM_Init>

				/* Rotate the motor A-CW */
				GPIO_writePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, LOGIC_LOW);
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	64 e0       	ldi	r22, 0x04	; 4
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GPIO_writePin>
				GPIO_writePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, LOGIC_HIGH);
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	65 e0       	ldi	r22, 0x05	; 5
    23bc:	41 e0       	ldi	r20, 0x01	; 1
    23be:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GPIO_writePin>

				/* Change the current state of the global variable */
				motor_state = MOTOR_DIRECTION_ACW;
    23c2:	82 e0       	ldi	r24, 0x02	; 2
    23c4:	80 93 89 01 	sts	0x0189, r24
    23c8:	13 c0       	rjmp	.+38     	; 0x23f0 <DcMotor_Rotate+0xa6>
			default:

			case MOTOR_DIRECTION_OFF:
			{
				/* stop the PWM and the EN1 */
				Timer0_PWM_Init(STOP);
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	0e 94 ff 11 	call	0x23fe	; 0x23fe <Timer0_PWM_Init>
				/*
				 * Stop the motor by applying HIGH on both of its INs
				 * Note:	Applying LOW works too! but HIGH is better to
				 * 			be not care to any noise signals may occur
				 */
				GPIO_writePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, LOGIC_HIGH);
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	64 e0       	ldi	r22, 0x04	; 4
    23d4:	41 e0       	ldi	r20, 0x01	; 1
    23d6:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GPIO_writePin>
				GPIO_writePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, LOGIC_HIGH);
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	65 e0       	ldi	r22, 0x05	; 5
    23de:	41 e0       	ldi	r20, 0x01	; 1
    23e0:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GPIO_writePin>

				/* Change the current state of the global variable */
				motor_state = MOTOR_DIRECTION_OFF;
    23e4:	10 92 89 01 	sts	0x0189, r1
    23e8:	03 c0       	rjmp	.+6      	; 0x23f0 <DcMotor_Rotate+0xa6>
		}
	}
	/* if the state not changed, keep rotating the motor with the required speed */
	else
	{
		Timer0_PWM_Init(speed);
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	0e 94 ff 11 	call	0x23fe	; 0x23fe <Timer0_PWM_Init>
	}
}
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <Timer0_PWM_Init>:
 * F_PWM=(F_CPU)/(256*N) = (10^6)/(256*8) = 500Hz
 * Duty Cycle can be changed by updating the value
 * in The Compare Register
 */
void Timer0_PWM_Init(uint8 set_duty_cycle)
{
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	0f 92       	push	r0
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
    240e:	e2 e5       	ldi	r30, 0x52	; 82
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle * SCALER_TO_255; //Set Compare value using percentage as ratio
    2414:	0c e5       	ldi	r16, 0x5C	; 92
    2416:	10 e0       	ldi	r17, 0x00	; 0
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	88 2f       	mov	r24, r24
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	aa 27       	eor	r26, r26
    2420:	97 fd       	sbrc	r25, 7
    2422:	a0 95       	com	r26
    2424:	ba 2f       	mov	r27, r26
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	bc 01       	movw	r22, r24
    2434:	cd 01       	movw	r24, r26
    2436:	23 e3       	ldi	r18, 0x33	; 51
    2438:	33 e3       	ldi	r19, 0x33	; 51
    243a:	43 e2       	ldi	r20, 0x23	; 35
    243c:	50 e4       	ldi	r21, 0x40	; 64
    243e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	bc 01       	movw	r22, r24
    2448:	cd 01       	movw	r24, r26
    244a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	f8 01       	movw	r30, r16
    2454:	80 83       	st	Z, r24

	GPIO_setupPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, PIN_OUTPUT);; // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	63 e0       	ldi	r22, 0x03	; 3
    245a:	41 e0       	ldi	r20, 0x01	; 1
    245c:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2460:	e3 e5       	ldi	r30, 0x53	; 83
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	8a e6       	ldi	r24, 0x6A	; 106
    2466:	80 83       	st	Z, r24
}
    2468:	0f 90       	pop	r0
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	1f 91       	pop	r17
    2470:	0f 91       	pop	r16
    2472:	08 95       	ret

00002474 <__vector_9>:
 *					\note:	Section #2:	Interrupt Service Routines (ISRs)		*
********************************************************************************/

/* ISR that will execute when "Timer/Counter1 Overflow" interrupt occurs */
ISR(TIMER1_OVF_vect)
{
    2474:	1f 92       	push	r1
    2476:	0f 92       	push	r0
    2478:	0f b6       	in	r0, 0x3f	; 63
    247a:	0f 92       	push	r0
    247c:	11 24       	eor	r1, r1
    247e:	2f 93       	push	r18
    2480:	3f 93       	push	r19
    2482:	4f 93       	push	r20
    2484:	5f 93       	push	r21
    2486:	6f 93       	push	r22
    2488:	7f 93       	push	r23
    248a:	8f 93       	push	r24
    248c:	9f 93       	push	r25
    248e:	af 93       	push	r26
    2490:	bf 93       	push	r27
    2492:	ef 93       	push	r30
    2494:	ff 93       	push	r31
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
	 *	In normal operation, the Timer/Counter Overflow Flag (TOV1) will
	 *	be set in the same timer clock cycle as the TCNT1 becomes zero.
	 */

	/* Checks if the global pointer g_NormalcallBackPtr is not pointing to NULL. */
	if(Timer1_callbacks.g_NormalcallBackPtr != NULL_PTR)
    249e:	80 91 8b 01 	lds	r24, 0x018B
    24a2:	90 91 8c 01 	lds	r25, 0x018C
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	29 f0       	breq	.+10     	; 0x24b4 <__vector_9+0x40>
	{
		/* Call the callback function using pointer to function g_NormalcallBackPtr(); */
		Timer1_callbacks.g_NormalcallBackPtr();
    24aa:	e0 91 8b 01 	lds	r30, 0x018B
    24ae:	f0 91 8c 01 	lds	r31, 0x018C
    24b2:	09 95       	icall
	}
}
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	ff 91       	pop	r31
    24ba:	ef 91       	pop	r30
    24bc:	bf 91       	pop	r27
    24be:	af 91       	pop	r26
    24c0:	9f 91       	pop	r25
    24c2:	8f 91       	pop	r24
    24c4:	7f 91       	pop	r23
    24c6:	6f 91       	pop	r22
    24c8:	5f 91       	pop	r21
    24ca:	4f 91       	pop	r20
    24cc:	3f 91       	pop	r19
    24ce:	2f 91       	pop	r18
    24d0:	0f 90       	pop	r0
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	0f 90       	pop	r0
    24d6:	1f 90       	pop	r1
    24d8:	18 95       	reti

000024da <__vector_7>:

/* ISR that will execute when "Timer/Counter1 Compare Match A" interrupt occurs */
ISR(TIMER1_COMPA_vect)
{
    24da:	1f 92       	push	r1
    24dc:	0f 92       	push	r0
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	0f 92       	push	r0
    24e2:	11 24       	eor	r1, r1
    24e4:	2f 93       	push	r18
    24e6:	3f 93       	push	r19
    24e8:	4f 93       	push	r20
    24ea:	5f 93       	push	r21
    24ec:	6f 93       	push	r22
    24ee:	7f 93       	push	r23
    24f0:	8f 93       	push	r24
    24f2:	9f 93       	push	r25
    24f4:	af 93       	push	r26
    24f6:	bf 93       	push	r27
    24f8:	ef 93       	push	r30
    24fa:	ff 93       	push	r31
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
	 *	An interrupt can be generated at each time the counter value reaches the
	 *	TOP value by using the OCF1A to define the TOP value.
	 */

	/* Checks if the global pointer g_CTCcallBackPtr is not pointing to NULL. */
	if(Timer1_callbacks.g_CTCcallBackPtr != NULL_PTR)
    2504:	80 91 8d 01 	lds	r24, 0x018D
    2508:	90 91 8e 01 	lds	r25, 0x018E
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	29 f0       	breq	.+10     	; 0x251a <__vector_7+0x40>
	{
		/* Call the callback function using pointer to function g_CTCcallBackPtr(); */
		Timer1_callbacks.g_CTCcallBackPtr();
    2510:	e0 91 8d 01 	lds	r30, 0x018D
    2514:	f0 91 8e 01 	lds	r31, 0x018E
    2518:	09 95       	icall
	}
}
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	ff 91       	pop	r31
    2520:	ef 91       	pop	r30
    2522:	bf 91       	pop	r27
    2524:	af 91       	pop	r26
    2526:	9f 91       	pop	r25
    2528:	8f 91       	pop	r24
    252a:	7f 91       	pop	r23
    252c:	6f 91       	pop	r22
    252e:	5f 91       	pop	r21
    2530:	4f 91       	pop	r20
    2532:	3f 91       	pop	r19
    2534:	2f 91       	pop	r18
    2536:	0f 90       	pop	r0
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	0f 90       	pop	r0
    253c:	1f 90       	pop	r1
    253e:	18 95       	reti

00002540 <TIMER1_vStartTimerNormal>:

/**
 *	\see	:	TIMER1_vStartTimerNormal function prototype in timer1.h.
 */
void TIMER1_vStartTimerNormal(Timer1_intervalType interval_in_seconds)
{
    2540:	df 93       	push	r29
    2542:	cf 93       	push	r28
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	2c 97       	sbiw	r28, 0x0c	; 12
    254a:	0f b6       	in	r0, 0x3f	; 63
    254c:	f8 94       	cli
    254e:	de bf       	out	0x3e, r29	; 62
    2550:	0f be       	out	0x3f, r0	; 63
    2552:	cd bf       	out	0x3d, r28	; 61
    2554:	8f 83       	std	Y+7, r24	; 0x07
	/* Configuration struct members:		  {mode , prescaler, initial,  compare} */
	Timer1_ConfigType timer1_configurations = {NORMAL, F_CPU_256, PRELOAD, NOT_CTC};
    2556:	ce 01       	movw	r24, r28
    2558:	01 96       	adiw	r24, 0x01	; 1
    255a:	99 87       	std	Y+9, r25	; 0x09
    255c:	88 87       	std	Y+8, r24	; 0x08
    255e:	ea e7       	ldi	r30, 0x7A	; 122
    2560:	f1 e0       	ldi	r31, 0x01	; 1
    2562:	fb 87       	std	Y+11, r31	; 0x0b
    2564:	ea 87       	std	Y+10, r30	; 0x0a
    2566:	f6 e0       	ldi	r31, 0x06	; 6
    2568:	fc 87       	std	Y+12, r31	; 0x0c
    256a:	ea 85       	ldd	r30, Y+10	; 0x0a
    256c:	fb 85       	ldd	r31, Y+11	; 0x0b
    256e:	00 80       	ld	r0, Z
    2570:	8a 85       	ldd	r24, Y+10	; 0x0a
    2572:	9b 85       	ldd	r25, Y+11	; 0x0b
    2574:	01 96       	adiw	r24, 0x01	; 1
    2576:	9b 87       	std	Y+11, r25	; 0x0b
    2578:	8a 87       	std	Y+10, r24	; 0x0a
    257a:	e8 85       	ldd	r30, Y+8	; 0x08
    257c:	f9 85       	ldd	r31, Y+9	; 0x09
    257e:	00 82       	st	Z, r0
    2580:	88 85       	ldd	r24, Y+8	; 0x08
    2582:	99 85       	ldd	r25, Y+9	; 0x09
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	99 87       	std	Y+9, r25	; 0x09
    2588:	88 87       	std	Y+8, r24	; 0x08
    258a:	9c 85       	ldd	r25, Y+12	; 0x0c
    258c:	91 50       	subi	r25, 0x01	; 1
    258e:	9c 87       	std	Y+12, r25	; 0x0c
    2590:	ec 85       	ldd	r30, Y+12	; 0x0c
    2592:	ee 23       	and	r30, r30
    2594:	51 f7       	brne	.-44     	; 0x256a <TIMER1_vStartTimerNormal+0x2a>

	/* Pass all desired configurations to the Timer1_init function */
	Timer1_init(&timer1_configurations);
    2596:	ce 01       	movw	r24, r28
    2598:	01 96       	adiw	r24, 0x01	; 1
    259a:	0e 94 42 13 	call	0x2684	; 0x2684 <Timer1_init>

	/* Start the timer counting decrementally from the given time interval till zero */
	timer1_counter = interval_in_seconds;
    259e:	8f 81       	ldd	r24, Y+7	; 0x07
    25a0:	80 93 a3 01 	sts	0x01A3, r24

	/* Poll until reaching zero = required interval_in_seconds achieved */
	while(timer1_counter != ZERO);
    25a4:	80 91 a3 01 	lds	r24, 0x01A3
    25a8:	88 23       	and	r24, r24
    25aa:	e1 f7       	brne	.-8      	; 0x25a4 <TIMER1_vStartTimerNormal+0x64>
}
    25ac:	2c 96       	adiw	r28, 0x0c	; 12
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	f8 94       	cli
    25b2:	de bf       	out	0x3e, r29	; 62
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	cd bf       	out	0x3d, r28	; 61
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <TIMER1_vStartTimerCTC>:

/**
 *	\see	:	TIMER1_vStartTimerCTC function prototype in timer1.h.
 */
void TIMER1_vStartTimerCTC(Timer1_intervalType interval_in_seconds)
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	2c 97       	sbiw	r28, 0x0c	; 12
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	8f 83       	std	Y+7, r24	; 0x07
	/* Configuration struct members:		  {mode , prescaler, initial,  compare} */
	Timer1_ConfigType timer1_configurations = {CTC, F_CPU_256, BOTTOM, COMPARE};
    25d4:	ce 01       	movw	r24, r28
    25d6:	01 96       	adiw	r24, 0x01	; 1
    25d8:	99 87       	std	Y+9, r25	; 0x09
    25da:	88 87       	std	Y+8, r24	; 0x08
    25dc:	e0 e8       	ldi	r30, 0x80	; 128
    25de:	f1 e0       	ldi	r31, 0x01	; 1
    25e0:	fb 87       	std	Y+11, r31	; 0x0b
    25e2:	ea 87       	std	Y+10, r30	; 0x0a
    25e4:	f6 e0       	ldi	r31, 0x06	; 6
    25e6:	fc 87       	std	Y+12, r31	; 0x0c
    25e8:	ea 85       	ldd	r30, Y+10	; 0x0a
    25ea:	fb 85       	ldd	r31, Y+11	; 0x0b
    25ec:	00 80       	ld	r0, Z
    25ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    25f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25f2:	01 96       	adiw	r24, 0x01	; 1
    25f4:	9b 87       	std	Y+11, r25	; 0x0b
    25f6:	8a 87       	std	Y+10, r24	; 0x0a
    25f8:	e8 85       	ldd	r30, Y+8	; 0x08
    25fa:	f9 85       	ldd	r31, Y+9	; 0x09
    25fc:	00 82       	st	Z, r0
    25fe:	88 85       	ldd	r24, Y+8	; 0x08
    2600:	99 85       	ldd	r25, Y+9	; 0x09
    2602:	01 96       	adiw	r24, 0x01	; 1
    2604:	99 87       	std	Y+9, r25	; 0x09
    2606:	88 87       	std	Y+8, r24	; 0x08
    2608:	9c 85       	ldd	r25, Y+12	; 0x0c
    260a:	91 50       	subi	r25, 0x01	; 1
    260c:	9c 87       	std	Y+12, r25	; 0x0c
    260e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2610:	ee 23       	and	r30, r30
    2612:	51 f7       	brne	.-44     	; 0x25e8 <TIMER1_vStartTimerCTC+0x2a>

	/* Pass all desired configurations to the Timer1_init function */
	Timer1_init(&timer1_configurations);
    2614:	ce 01       	movw	r24, r28
    2616:	01 96       	adiw	r24, 0x01	; 1
    2618:	0e 94 42 13 	call	0x2684	; 0x2684 <Timer1_init>

	/* Start the timer counting decrementally from the given time interval till zero */
	timer1_counter = interval_in_seconds;
    261c:	8f 81       	ldd	r24, Y+7	; 0x07
    261e:	80 93 a3 01 	sts	0x01A3, r24

	/* Poll until reaching zero = required interval_in_seconds achieved */
	while(timer1_counter != ZERO);
    2622:	80 91 a3 01 	lds	r24, 0x01A3
    2626:	88 23       	and	r24, r24
    2628:	e1 f7       	brne	.-8      	; 0x2622 <TIMER1_vStartTimerCTC+0x64>
}
    262a:	2c 96       	adiw	r28, 0x0c	; 12
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <TIMER1_vStartTimer>:

void TIMER1_vStartTimer(Timer1_intervalType interval_in_seconds)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	00 d0       	rcall	.+0      	; 0x2642 <TIMER1_vStartTimer+0x6>
    2642:	0f 92       	push	r0
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	89 83       	std	Y+1, r24	; 0x01
	switch(g_Timer1_mode_of_operation)
    264a:	80 91 a2 01 	lds	r24, 0x01A2
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	3b 83       	std	Y+3, r19	; 0x03
    2654:	2a 83       	std	Y+2, r18	; 0x02
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	9b 81       	ldd	r25, Y+3	; 0x03
    265a:	00 97       	sbiw	r24, 0x00	; 0
    265c:	31 f0       	breq	.+12     	; 0x266a <TIMER1_vStartTimer+0x2e>
    265e:	2a 81       	ldd	r18, Y+2	; 0x02
    2660:	3b 81       	ldd	r19, Y+3	; 0x03
    2662:	24 30       	cpi	r18, 0x04	; 4
    2664:	31 05       	cpc	r19, r1
    2666:	29 f0       	breq	.+10     	; 0x2672 <TIMER1_vStartTimer+0x36>
    2668:	07 c0       	rjmp	.+14     	; 0x2678 <TIMER1_vStartTimer+0x3c>
	{
		case NORMAL	:
		{
			TIMER1_vStartTimerNormal(interval_in_seconds);
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	0e 94 a0 12 	call	0x2540	; 0x2540 <TIMER1_vStartTimerNormal>
    2670:	03 c0       	rjmp	.+6      	; 0x2678 <TIMER1_vStartTimer+0x3c>
			break;
		}
		case CTC	:
		{
			TIMER1_vStartTimerCTC(interval_in_seconds);
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	0e 94 df 12 	call	0x25be	; 0x25be <TIMER1_vStartTimerCTC>
			break;
		}
	}
}
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	0f 90       	pop	r0
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <Timer1_init>:

/**
 *	\see	:	Timer1_init function prototype in timer1.h.
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	00 d0       	rcall	.+0      	; 0x268a <Timer1_init+0x6>
    268a:	00 d0       	rcall	.+0      	; 0x268c <Timer1_init+0x8>
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
    2690:	9a 83       	std	Y+2, r25	; 0x02
    2692:	89 83       	std	Y+1, r24	; 0x01
	/* Set timer1 initial value to required initial_value */
	TCNT1 = (uint16)(Config_Ptr -> initial_value);
    2694:	ac e4       	ldi	r26, 0x4C	; 76
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e9 81       	ldd	r30, Y+1	; 0x01
    269a:	fa 81       	ldd	r31, Y+2	; 0x02
    269c:	82 81       	ldd	r24, Z+2	; 0x02
    269e:	93 81       	ldd	r25, Z+3	; 0x03
    26a0:	11 96       	adiw	r26, 0x01	; 1
    26a2:	9c 93       	st	X, r25
    26a4:	8e 93       	st	-X, r24

	/* Check the desired mode of operation */
	switch(Config_Ptr -> mode)
    26a6:	e9 81       	ldd	r30, Y+1	; 0x01
    26a8:	fa 81       	ldd	r31, Y+2	; 0x02
    26aa:	80 81       	ld	r24, Z
    26ac:	28 2f       	mov	r18, r24
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	3c 83       	std	Y+4, r19	; 0x04
    26b2:	2b 83       	std	Y+3, r18	; 0x03
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	9c 81       	ldd	r25, Y+4	; 0x04
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	31 f0       	breq	.+12     	; 0x26c8 <Timer1_init+0x44>
    26bc:	2b 81       	ldd	r18, Y+3	; 0x03
    26be:	3c 81       	ldd	r19, Y+4	; 0x04
    26c0:	24 30       	cpi	r18, 0x04	; 4
    26c2:	31 05       	cpc	r19, r1
    26c4:	a9 f0       	breq	.+42     	; 0x26f0 <Timer1_init+0x6c>
    26c6:	3d c0       	rjmp	.+122    	; 0x2742 <Timer1_init+0xbe>
	{
		case NORMAL:
		{
			/* Choose normal Mode WGM11=0 WGM10=0 (Mode Number 0) */
			TCCR1A = (TCCR1A & TCCR1A_NON_WGM_BITS) | (Config_Ptr -> mode);
    26c8:	af e4       	ldi	r26, 0x4F	; 79
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	ef e4       	ldi	r30, 0x4F	; 79
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	98 2f       	mov	r25, r24
    26d4:	9c 7f       	andi	r25, 0xFC	; 252
    26d6:	e9 81       	ldd	r30, Y+1	; 0x01
    26d8:	fa 81       	ldd	r31, Y+2	; 0x02
    26da:	80 81       	ld	r24, Z
    26dc:	89 2b       	or	r24, r25
    26de:	8c 93       	st	X, r24
			/* Enable the overflow interrupts */
			SET_BIT(TIMSK, TOIE1);
    26e0:	a9 e5       	ldi	r26, 0x59	; 89
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	e9 e5       	ldi	r30, 0x59	; 89
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	84 60       	ori	r24, 0x04	; 4
    26ec:	8c 93       	st	X, r24
    26ee:	29 c0       	rjmp	.+82     	; 0x2742 <Timer1_init+0xbe>
			/*
			 *	1.	As a non-PWM mode, COM1A1=1 COM1A0=0 will clear OC1A on compare match.
			 *	2.	FOC1A and FOC1B are only active when the WGM13:0 bits specifies a non-PWM mode.
			 *	3.	Choose CTC Mode WGM12=1 WGM13=0 (Mode Number 4). Here (0x04 << 1) = 0000 1000.
			 */
			TCCR1A = (ENABLE << FOC1B) | (ENABLE << FOC1A) | (ENABLE << COM1A1) ;
    26f0:	ef e4       	ldi	r30, 0x4F	; 79
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	8c e8       	ldi	r24, 0x8C	; 140
    26f6:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & TCCR1B_NON_WGM_BITS) | ((Config_Ptr -> mode) << ONE_BIT);
    26f8:	ae e4       	ldi	r26, 0x4E	; 78
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	ee e4       	ldi	r30, 0x4E	; 78
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	28 2f       	mov	r18, r24
    2704:	27 7e       	andi	r18, 0xE7	; 231
    2706:	e9 81       	ldd	r30, Y+1	; 0x01
    2708:	fa 81       	ldd	r31, Y+2	; 0x02
    270a:	80 81       	ld	r24, Z
    270c:	88 2f       	mov	r24, r24
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	82 2b       	or	r24, r18
    2716:	8c 93       	st	X, r24

			/* Set the compare value to required compare_value */
			OCR1A = (uint16)(Config_Ptr -> compare_value);
    2718:	aa e4       	ldi	r26, 0x4A	; 74
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e9 81       	ldd	r30, Y+1	; 0x01
    271e:	fa 81       	ldd	r31, Y+2	; 0x02
    2720:	84 81       	ldd	r24, Z+4	; 0x04
    2722:	95 81       	ldd	r25, Z+5	; 0x05
    2724:	11 96       	adiw	r26, 0x01	; 1
    2726:	9c 93       	st	X, r25
    2728:	8e 93       	st	-X, r24

			/* Set PD5/OC1A pin as output */
			GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    272a:	83 e0       	ldi	r24, 0x03	; 3
    272c:	65 e0       	ldi	r22, 0x05	; 5
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GPIO_setupPinDirection>

			/* Enable Timer1 Compare A Interrupt */
			SET_BIT(TIMSK, OCIE1A);
    2734:	a9 e5       	ldi	r26, 0x59	; 89
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e9 e5       	ldi	r30, 0x59	; 89
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	80 61       	ori	r24, 0x10	; 16
    2740:	8c 93       	st	X, r24
			break;
		}
	}

	/* Choose the pre-scaler (CS bits) */
	TCCR1B = (TCCR1B & TCCR1B_NON_CS_BITS) | (Config_Ptr -> prescaler);
    2742:	ae e4       	ldi	r26, 0x4E	; 78
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	ee e4       	ldi	r30, 0x4E	; 78
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	98 2f       	mov	r25, r24
    274e:	98 7f       	andi	r25, 0xF8	; 248
    2750:	e9 81       	ldd	r30, Y+1	; 0x01
    2752:	fa 81       	ldd	r31, Y+2	; 0x02
    2754:	81 81       	ldd	r24, Z+1	; 0x01
    2756:	89 2b       	or	r24, r25
    2758:	8c 93       	st	X, r24
}
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	08 95       	ret

00002768 <Timer1_deInit>:

/**
 *	\see	:	Timer1_deInit function prototype in timer1.h.
 */
void Timer1_deInit(void)
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer1 interrupt*/
    TIMSK = 0;
    2770:	e9 e5       	ldi	r30, 0x59	; 89
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	10 82       	st	Z, r1

    /* Stop Timer1 by setting clock source to "No clock source */
    TCCR1B = 0;
    2776:	ee e4       	ldi	r30, 0x4E	; 78
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	10 82       	st	Z, r1

    /* Reset Timer1 count value */
    TCNT1 = 0;
    277c:	ec e4       	ldi	r30, 0x4C	; 76
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	11 82       	std	Z+1, r1	; 0x01
    2782:	10 82       	st	Z, r1

    /* Reset Timer1 control registers to default values */
    TCCR1A = 0;
    2784:	ef e4       	ldi	r30, 0x4F	; 79
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	10 82       	st	Z, r1
    TCCR1B = 0;
    278a:	ee e4       	ldi	r30, 0x4E	; 78
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	10 82       	st	Z, r1

    /* Reset Timer1 output compare registers */
    OCR1A = 0;
    2790:	ea e4       	ldi	r30, 0x4A	; 74
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	11 82       	std	Z+1, r1	; 0x01
    2796:	10 82       	st	Z, r1
    OCR1B = 0;
    2798:	e8 e4       	ldi	r30, 0x48	; 72
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	11 82       	std	Z+1, r1	; 0x01
    279e:	10 82       	st	Z, r1
}
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	08 95       	ret

000027a6 <Timer1_setCallBack>:

/**
 *	\see	:	Timer1_setNormalCallBack function prototype in timer1.h.
 */
void Timer1_setCallBack(const Timer1_CallbackType* TimerCallback)
{
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	00 d0       	rcall	.+0      	; 0x27ac <Timer1_setCallBack+0x6>
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	9a 83       	std	Y+2, r25	; 0x02
    27b2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Assigns the normal callback function pointer from the provided TimerCallback
	 * structure to the g_NormalcallBackPtr member of the Timer1_callbacks structure.
	 */
	Timer1_callbacks.g_NormalcallBackPtr = TimerCallback -> g_NormalcallBackPtr;
    27b4:	e9 81       	ldd	r30, Y+1	; 0x01
    27b6:	fa 81       	ldd	r31, Y+2	; 0x02
    27b8:	80 81       	ld	r24, Z
    27ba:	91 81       	ldd	r25, Z+1	; 0x01
    27bc:	90 93 8c 01 	sts	0x018C, r25
    27c0:	80 93 8b 01 	sts	0x018B, r24

	/*
	 * Assigns the CTC callback function pointer from the provided TimerCallback
	 * structure to the g_CTCcallBackPtr member of the Timer1_callbacks structure.
	 */
	Timer1_callbacks.g_CTCcallBackPtr = TimerCallback -> g_CTCcallBackPtr;
    27c4:	e9 81       	ldd	r30, Y+1	; 0x01
    27c6:	fa 81       	ldd	r31, Y+2	; 0x02
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	90 93 8e 01 	sts	0x018E, r25
    27d0:	80 93 8d 01 	sts	0x018D, r24
}
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <TWI_init>:
 *******************************************************************************/
 
#include "twi.h"

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <TWI_init+0x6>
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	89 83       	std	Y+1, r24	; 0x01
    TWBR = (Config_Ptr -> bit_rate);
    27ec:	20 e2       	ldi	r18, 0x20	; 32
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	e9 81       	ldd	r30, Y+1	; 0x01
    27f2:	fa 81       	ldd	r31, Y+2	; 0x02
    27f4:	81 81       	ldd	r24, Z+1	; 0x01
    27f6:	92 81       	ldd	r25, Z+2	; 0x02
    27f8:	a3 81       	ldd	r26, Z+3	; 0x03
    27fa:	b4 81       	ldd	r27, Z+4	; 0x04
    27fc:	f9 01       	movw	r30, r18
    27fe:	80 83       	st	Z, r24
	TWSR = TWI_BIT_RATE_PRESCALER;
    2800:	e1 e2       	ldi	r30, 0x21	; 33
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	10 82       	st	Z, r1

	/* Set required address and General Call Recognition (GCR) OFF */
    TWAR = ((Config_Ptr -> address) << 1) & TWAR_NON_GCR_BITS;
    2806:	a2 e2       	ldi	r26, 0x22	; 34
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	e9 81       	ldd	r30, Y+1	; 0x01
    280c:	fa 81       	ldd	r31, Y+2	; 0x02
    280e:	80 81       	ld	r24, Z
    2810:	88 2f       	mov	r24, r24
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	88 0f       	add	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	8c 93       	st	X, r24

    /* enable TWI */
    TWCR = (ENABLE << TWEN);
    281a:	e6 e5       	ldi	r30, 0x56	; 86
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	84 e0       	ldi	r24, 0x04	; 4
    2820:	80 83       	st	Z, r24
}
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <TWI_start>:

void TWI_start(void)
{
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (ENABLE << TWINT) | (ENABLE << TWSTA) | (ENABLE << TWEN);
    2834:	e6 e5       	ldi	r30, 0x56	; 86
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	84 ea       	ldi	r24, 0xA4	; 164
    283a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    283c:	e6 e5       	ldi	r30, 0x56	; 86
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	88 23       	and	r24, r24
    2844:	dc f7       	brge	.-10     	; 0x283c <TWI_start+0x10>
}
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <TWI_stop>:

void TWI_stop(void)
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (ENABLE << TWINT) | (ENABLE << TWSTO) | (ENABLE << TWEN);
    2854:	e6 e5       	ldi	r30, 0x56	; 86
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	84 e9       	ldi	r24, 0x94	; 148
    285a:	80 83       	st	Z, r24
}
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	0f 92       	push	r0
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    286e:	e3 e2       	ldi	r30, 0x23	; 35
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (ENABLE << TWINT) | (ENABLE << TWEN);
    2876:	e6 e5       	ldi	r30, 0x56	; 86
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	84 e8       	ldi	r24, 0x84	; 132
    287c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    287e:	e6 e5       	ldi	r30, 0x56	; 86
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	88 23       	and	r24, r24
    2886:	dc f7       	brge	.-10     	; 0x287e <TWI_writeByte+0x1c>
}
    2888:	0f 90       	pop	r0
    288a:	cf 91       	pop	r28
    288c:	df 91       	pop	r29
    288e:	08 95       	ret

00002890 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (ENABLE << TWINT) | (ENABLE << TWEN) | (ENABLE << TWEA);
    2898:	e6 e5       	ldi	r30, 0x56	; 86
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	84 ec       	ldi	r24, 0xC4	; 196
    289e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    28a0:	e6 e5       	ldi	r30, 0x56	; 86
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	88 23       	and	r24, r24
    28a8:	dc f7       	brge	.-10     	; 0x28a0 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    28aa:	e3 e2       	ldi	r30, 0x23	; 35
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
}
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (ENABLE << TWINT) | (ENABLE << TWEN);
    28be:	e6 e5       	ldi	r30, 0x56	; 86
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	84 e8       	ldi	r24, 0x84	; 132
    28c4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    28c6:	e6 e5       	ldi	r30, 0x56	; 86
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	88 23       	and	r24, r24
    28ce:	dc f7       	brge	.-10     	; 0x28c6 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    28d0:	e3 e2       	ldi	r30, 0x23	; 35
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
}
    28d6:	cf 91       	pop	r28
    28d8:	df 91       	pop	r29
    28da:	08 95       	ret

000028dc <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    28dc:	df 93       	push	r29
    28de:	cf 93       	push	r28
    28e0:	0f 92       	push	r0
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & TWSR_STATUS_BITS;
    28e6:	e1 e2       	ldi	r30, 0x21	; 33
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	80 81       	ld	r24, Z
    28ec:	88 7f       	andi	r24, 0xF8	; 248
    28ee:	89 83       	std	Y+1, r24	; 0x01
    return status;
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    28f2:	0f 90       	pop	r0
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <__vector_13>:
/* Holds the address of the callback function */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

/* ISR that will execute when "USART, Rx Complete" interrupt occurs */
ISR(USART_RXC_vect)
{
    28fa:	1f 92       	push	r1
    28fc:	0f 92       	push	r0
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	0f 92       	push	r0
    2902:	11 24       	eor	r1, r1
    2904:	2f 93       	push	r18
    2906:	3f 93       	push	r19
    2908:	4f 93       	push	r20
    290a:	5f 93       	push	r21
    290c:	6f 93       	push	r22
    290e:	7f 93       	push	r23
    2910:	8f 93       	push	r24
    2912:	9f 93       	push	r25
    2914:	af 93       	push	r26
    2916:	bf 93       	push	r27
    2918:	ef 93       	push	r30
    291a:	ff 93       	push	r31
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
	 *  bit is written to one, the Global Interrupt Flag in SREG is written to
	 *  one and the RXC bit in UCSRA is set.
	 */

	/* Checks if the global pointer g_callBackPtr is not pointing to NULL. */
	if(g_callBackPtr != NULL_PTR)
    2924:	80 91 8f 01 	lds	r24, 0x018F
    2928:	90 91 90 01 	lds	r25, 0x0190
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	29 f0       	breq	.+10     	; 0x293a <__vector_13+0x40>
	{
		/* Call the callback function using pointer to function g_callBackPtr(); */
		(*g_callBackPtr)();
    2930:	e0 91 8f 01 	lds	r30, 0x018F
    2934:	f0 91 90 01 	lds	r31, 0x0190
    2938:	09 95       	icall
	}
}
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	ff 91       	pop	r31
    2940:	ef 91       	pop	r30
    2942:	bf 91       	pop	r27
    2944:	af 91       	pop	r26
    2946:	9f 91       	pop	r25
    2948:	8f 91       	pop	r24
    294a:	7f 91       	pop	r23
    294c:	6f 91       	pop	r22
    294e:	5f 91       	pop	r21
    2950:	4f 91       	pop	r20
    2952:	3f 91       	pop	r19
    2954:	2f 91       	pop	r18
    2956:	0f 90       	pop	r0
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	0f 90       	pop	r0
    295c:	1f 90       	pop	r1
    295e:	18 95       	reti

00002960 <UARTRX_setCallBack>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void UARTRX_setCallBack(void(*a_ptr)(void))
{
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	00 d0       	rcall	.+0      	; 0x2966 <UARTRX_setCallBack+0x6>
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
    296a:	9a 83       	std	Y+2, r25	; 0x02
    296c:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	9a 81       	ldd	r25, Y+2	; 0x02
    2972:	90 93 90 01 	sts	0x0190, r25
    2976:	80 93 8f 01 	sts	0x018F, r24
}
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	08 95       	ret

00002984 <UART_Init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_Init(const UART_ConfigType *Config_Ptr)
{
    2984:	df 93       	push	r29
    2986:	cf 93       	push	r28
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
    298c:	2b 97       	sbiw	r28, 0x0b	; 11
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	f8 94       	cli
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	9d 83       	std	Y+5, r25	; 0x05
    299a:	8c 83       	std	Y+4, r24	; 0x04
#ifdef	U2X_MODE
	/* U2X = 1 for double transmission speed */
    UCSRA |= (1 << U2X);
    299c:	ab e2       	ldi	r26, 0x2B	; 43
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	eb e2       	ldi	r30, 0x2B	; 43
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	82 60       	ori	r24, 0x02	; 2
    29a8:	8c 93       	st	X, r24
#endif

    /* Enable receiver, transmitter, and RX complete interrupt */
    UCSRB = (ENABLE << TXEN) | (ENABLE << RXEN) | (ENABLE << RXCIE);
    29aa:	ea e2       	ldi	r30, 0x2A	; 42
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	88 e9       	ldi	r24, 0x98	; 152
    29b0:	80 83       	st	Z, r24

    /* Set frame format: data bits, parity, stop bits */
    uint8 UCSRC_value = 0;
    29b2:	1b 82       	std	Y+3, r1	; 0x03
    UCSRC_value = (ENABLE << URSEL);
    29b4:	80 e8       	ldi	r24, 0x80	; 128
    29b6:	8b 83       	std	Y+3, r24	; 0x03

    switch (Config_Ptr->bit_data)
    29b8:	ec 81       	ldd	r30, Y+4	; 0x04
    29ba:	fd 81       	ldd	r31, Y+5	; 0x05
    29bc:	80 81       	ld	r24, Z
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	3b 87       	std	Y+11, r19	; 0x0b
    29c4:	2a 87       	std	Y+10, r18	; 0x0a
    29c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    29c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    29ca:	82 30       	cpi	r24, 0x02	; 2
    29cc:	91 05       	cpc	r25, r1
    29ce:	f1 f0       	breq	.+60     	; 0x2a0c <UART_Init+0x88>
    29d0:	2a 85       	ldd	r18, Y+10	; 0x0a
    29d2:	3b 85       	ldd	r19, Y+11	; 0x0b
    29d4:	23 30       	cpi	r18, 0x03	; 3
    29d6:	31 05       	cpc	r19, r1
    29d8:	54 f4       	brge	.+20     	; 0x29ee <UART_Init+0x6a>
    29da:	8a 85       	ldd	r24, Y+10	; 0x0a
    29dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	01 f1       	breq	.+64     	; 0x2a22 <UART_Init+0x9e>
    29e2:	2a 85       	ldd	r18, Y+10	; 0x0a
    29e4:	3b 85       	ldd	r19, Y+11	; 0x0b
    29e6:	21 30       	cpi	r18, 0x01	; 1
    29e8:	31 05       	cpc	r19, r1
    29ea:	61 f0       	breq	.+24     	; 0x2a04 <UART_Init+0x80>
    29ec:	1a c0       	rjmp	.+52     	; 0x2a22 <UART_Init+0x9e>
    29ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    29f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    29f2:	83 30       	cpi	r24, 0x03	; 3
    29f4:	91 05       	cpc	r25, r1
    29f6:	71 f0       	breq	.+28     	; 0x2a14 <UART_Init+0x90>
    29f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    29fa:	3b 85       	ldd	r19, Y+11	; 0x0b
    29fc:	27 30       	cpi	r18, 0x07	; 7
    29fe:	31 05       	cpc	r19, r1
    2a00:	69 f0       	breq	.+26     	; 0x2a1c <UART_Init+0x98>
    2a02:	0f c0       	rjmp	.+30     	; 0x2a22 <UART_Init+0x9e>
        {
        	break;
        }
        case DATA_6_BIT	:
        {
            UCSRC_value |= (ENABLE << UCSZ0);
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	82 60       	ori	r24, 0x02	; 2
    2a08:	8b 83       	std	Y+3, r24	; 0x03
    2a0a:	0b c0       	rjmp	.+22     	; 0x2a22 <UART_Init+0x9e>
            break;
        }
        case DATA_7_BIT	:
        {
        	UCSRC_value |= (ENABLE << UCSZ1);
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	84 60       	ori	r24, 0x04	; 4
    2a10:	8b 83       	std	Y+3, r24	; 0x03
    2a12:	07 c0       	rjmp	.+14     	; 0x2a22 <UART_Init+0x9e>
            break;
        }

        case DATA_8_BIT	:
        {
            UCSRC_value |= (ENABLE << UCSZ0) | (ENABLE << UCSZ1);
    2a14:	8b 81       	ldd	r24, Y+3	; 0x03
    2a16:	86 60       	ori	r24, 0x06	; 6
    2a18:	8b 83       	std	Y+3, r24	; 0x03
    2a1a:	03 c0       	rjmp	.+6      	; 0x2a22 <UART_Init+0x9e>
            break;
        }

        case DATA_9_BIT	:
        {
            UCSRC_value |= (ENABLE << UCSZ0) | (ENABLE << UCSZ1) | (ENABLE << UCSZ2);
    2a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1e:	86 60       	ori	r24, 0x06	; 6
    2a20:	8b 83       	std	Y+3, r24	; 0x03
            break;
        }
    }

    switch (Config_Ptr->parity)
    2a22:	ec 81       	ldd	r30, Y+4	; 0x04
    2a24:	fd 81       	ldd	r31, Y+5	; 0x05
    2a26:	81 81       	ldd	r24, Z+1	; 0x01
    2a28:	28 2f       	mov	r18, r24
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	39 87       	std	Y+9, r19	; 0x09
    2a2e:	28 87       	std	Y+8, r18	; 0x08
    2a30:	88 85       	ldd	r24, Y+8	; 0x08
    2a32:	99 85       	ldd	r25, Y+9	; 0x09
    2a34:	82 30       	cpi	r24, 0x02	; 2
    2a36:	91 05       	cpc	r25, r1
    2a38:	31 f0       	breq	.+12     	; 0x2a46 <UART_Init+0xc2>
    2a3a:	28 85       	ldd	r18, Y+8	; 0x08
    2a3c:	39 85       	ldd	r19, Y+9	; 0x09
    2a3e:	23 30       	cpi	r18, 0x03	; 3
    2a40:	31 05       	cpc	r19, r1
    2a42:	29 f0       	breq	.+10     	; 0x2a4e <UART_Init+0xca>
    2a44:	07 c0       	rjmp	.+14     	; 0x2a54 <UART_Init+0xd0>
		{
			break;
		}
        case EVEN_PARITY:
        {
           	UCSRC_value |= (ENABLE << UPM1);
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	80 62       	ori	r24, 0x20	; 32
    2a4a:	8b 83       	std	Y+3, r24	; 0x03
    2a4c:	03 c0       	rjmp	.+6      	; 0x2a54 <UART_Init+0xd0>
           	break;
        }
        case ODD_PARITY	:
        {
        	UCSRC_value |= (ENABLE << UPM1) | (ENABLE << UPM0);
    2a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a50:	80 63       	ori	r24, 0x30	; 48
    2a52:	8b 83       	std	Y+3, r24	; 0x03
        	break;
        }
    }

    switch (Config_Ptr->stop_bit)
    2a54:	ec 81       	ldd	r30, Y+4	; 0x04
    2a56:	fd 81       	ldd	r31, Y+5	; 0x05
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	3f 83       	std	Y+7, r19	; 0x07
    2a60:	2e 83       	std	Y+6, r18	; 0x06
    2a62:	8e 81       	ldd	r24, Y+6	; 0x06
    2a64:	9f 81       	ldd	r25, Y+7	; 0x07
    2a66:	00 97       	sbiw	r24, 0x00	; 0
    2a68:	41 f0       	breq	.+16     	; 0x2a7a <UART_Init+0xf6>
    2a6a:	2e 81       	ldd	r18, Y+6	; 0x06
    2a6c:	3f 81       	ldd	r19, Y+7	; 0x07
    2a6e:	21 30       	cpi	r18, 0x01	; 1
    2a70:	31 05       	cpc	r19, r1
    2a72:	19 f4       	brne	.+6      	; 0x2a7a <UART_Init+0xf6>
        {
            break;
        }
        case STOP_BIT_2	:
        {
            UCSRC_value |= (ENABLE << USBS);
    2a74:	8b 81       	ldd	r24, Y+3	; 0x03
    2a76:	88 60       	ori	r24, 0x08	; 8
    2a78:	8b 83       	std	Y+3, r24	; 0x03
            break;
        }
    }

    UCSRC = UCSRC_value;
    2a7a:	e0 e4       	ldi	r30, 0x40	; 64
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a80:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	 uint16 ubrr_value = (uint16_t)(((F_CPU / ((Config_Ptr->baud_rate) * BITS_PER_UART_FRAME))) - 1);
    2a82:	ec 81       	ldd	r30, Y+4	; 0x04
    2a84:	fd 81       	ldd	r31, Y+5	; 0x05
    2a86:	83 81       	ldd	r24, Z+3	; 0x03
    2a88:	94 81       	ldd	r25, Z+4	; 0x04
    2a8a:	a5 81       	ldd	r26, Z+5	; 0x05
    2a8c:	b6 81       	ldd	r27, Z+6	; 0x06
    2a8e:	88 0f       	add	r24, r24
    2a90:	99 1f       	adc	r25, r25
    2a92:	aa 1f       	adc	r26, r26
    2a94:	bb 1f       	adc	r27, r27
    2a96:	88 0f       	add	r24, r24
    2a98:	99 1f       	adc	r25, r25
    2a9a:	aa 1f       	adc	r26, r26
    2a9c:	bb 1f       	adc	r27, r27
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	aa 1f       	adc	r26, r26
    2aa4:	bb 1f       	adc	r27, r27
    2aa6:	9c 01       	movw	r18, r24
    2aa8:	ad 01       	movw	r20, r26
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	92 e1       	ldi	r25, 0x12	; 18
    2aae:	aa e7       	ldi	r26, 0x7A	; 122
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	bc 01       	movw	r22, r24
    2ab4:	cd 01       	movw	r24, r26
    2ab6:	0e 94 55 16 	call	0x2caa	; 0x2caa <__udivmodsi4>
    2aba:	da 01       	movw	r26, r20
    2abc:	c9 01       	movw	r24, r18
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	9a 83       	std	Y+2, r25	; 0x02
    2ac2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (uint8)(ubrr_value>>8);
    2ac4:	e0 e4       	ldi	r30, 0x40	; 64
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	9a 81       	ldd	r25, Y+2	; 0x02
    2acc:	89 2f       	mov	r24, r25
    2ace:	99 27       	eor	r25, r25
    2ad0:	80 83       	st	Z, r24
	UBRRL = (uint8)ubrr_value;
    2ad2:	e9 e2       	ldi	r30, 0x29	; 41
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	80 83       	st	Z, r24
}
    2ada:	2b 96       	adiw	r28, 0x0b	; 11
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	0f 92       	push	r0
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    2af6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2af8:	eb e2       	ldi	r30, 0x2B	; 43
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	88 2f       	mov	r24, r24
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	80 72       	andi	r24, 0x20	; 32
    2b04:	90 70       	andi	r25, 0x00	; 0
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	b9 f3       	breq	.-18     	; 0x2af8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2b0a:	ec e2       	ldi	r30, 0x2C	; 44
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2b12:	0f 90       	pop	r0
    2b14:	cf 91       	pop	r28
    2b16:	df 91       	pop	r29
    2b18:	08 95       	ret

00002b1a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2b1a:	df 93       	push	r29
    2b1c:	cf 93       	push	r28
    2b1e:	cd b7       	in	r28, 0x3d	; 61
    2b20:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2b22:	eb e2       	ldi	r30, 0x2B	; 43
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	88 23       	and	r24, r24
    2b2a:	dc f7       	brge	.-10     	; 0x2b22 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2b2c:	ec e2       	ldi	r30, 0x2C	; 44
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
}
    2b32:	cf 91       	pop	r28
    2b34:	df 91       	pop	r29
    2b36:	08 95       	ret

00002b38 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2b38:	df 93       	push	r29
    2b3a:	cf 93       	push	r28
    2b3c:	00 d0       	rcall	.+0      	; 0x2b3e <UART_sendString+0x6>
    2b3e:	0f 92       	push	r0
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	9b 83       	std	Y+3, r25	; 0x03
    2b46:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b48:	19 82       	std	Y+1, r1	; 0x01
    2b4a:	0e c0       	rjmp	.+28     	; 0x2b68 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	28 2f       	mov	r18, r24
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	8a 81       	ldd	r24, Y+2	; 0x02
    2b54:	9b 81       	ldd	r25, Y+3	; 0x03
    2b56:	fc 01       	movw	r30, r24
    2b58:	e2 0f       	add	r30, r18
    2b5a:	f3 1f       	adc	r31, r19
    2b5c:	80 81       	ld	r24, Z
    2b5e:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
		i++;
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	8f 5f       	subi	r24, 0xFF	; 255
    2b66:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	28 2f       	mov	r18, r24
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b70:	9b 81       	ldd	r25, Y+3	; 0x03
    2b72:	fc 01       	movw	r30, r24
    2b74:	e2 0f       	add	r30, r18
    2b76:	f3 1f       	adc	r31, r19
    2b78:	80 81       	ld	r24, Z
    2b7a:	88 23       	and	r24, r24
    2b7c:	39 f7       	brne	.-50     	; 0x2b4c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2b8a:	0f 93       	push	r16
    2b8c:	1f 93       	push	r17
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	00 d0       	rcall	.+0      	; 0x2b94 <UART_receiveString+0xa>
    2b94:	0f 92       	push	r0
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	9b 83       	std	Y+3, r25	; 0x03
    2b9c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b9e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	28 2f       	mov	r18, r24
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    2baa:	8c 01       	movw	r16, r24
    2bac:	02 0f       	add	r16, r18
    2bae:	13 1f       	adc	r17, r19
    2bb0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <UART_recieveByte>
    2bb4:	f8 01       	movw	r30, r16
    2bb6:	80 83       	st	Z, r24
    2bb8:	0f c0       	rjmp	.+30     	; 0x2bd8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	8f 5f       	subi	r24, 0xFF	; 255
    2bbe:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	28 2f       	mov	r18, r24
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bca:	8c 01       	movw	r16, r24
    2bcc:	02 0f       	add	r16, r18
    2bce:	13 1f       	adc	r17, r19
    2bd0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <UART_recieveByte>
    2bd4:	f8 01       	movw	r30, r16
    2bd6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	28 2f       	mov	r18, r24
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	9b 81       	ldd	r25, Y+3	; 0x03
    2be2:	fc 01       	movw	r30, r24
    2be4:	e2 0f       	add	r30, r18
    2be6:	f3 1f       	adc	r31, r19
    2be8:	80 81       	ld	r24, Z
    2bea:	83 32       	cpi	r24, 0x23	; 35
    2bec:	31 f7       	brne	.-52     	; 0x2bba <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	28 2f       	mov	r18, r24
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	e2 0f       	add	r30, r18
    2bfc:	f3 1f       	adc	r31, r19
    2bfe:	10 82       	st	Z, r1
}
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	1f 91       	pop	r17
    2c0c:	0f 91       	pop	r16
    2c0e:	08 95       	ret

00002c10 <UART_sendGolabalFrame>:
/*
 * Description :
 * Functional responsible for send multiple bytes to another UART device.
 */
void UART_sendGolabalFrame(const uint8_t *frame_TX, uint8_t number_of_bytes)
{
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <UART_sendGolabalFrame+0x6>
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <UART_sendGolabalFrame+0x8>
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	9b 83       	std	Y+3, r25	; 0x03
    2c1e:	8a 83       	std	Y+2, r24	; 0x02
    2c20:	6c 83       	std	Y+4, r22	; 0x04
	uint8 byte_index;
	// Iterate through each byte in the data array
	for (byte_index = 0 ; byte_index < number_of_bytes ; byte_index++)
    2c22:	19 82       	std	Y+1, r1	; 0x01
    2c24:	0e c0       	rjmp	.+28     	; 0x2c42 <UART_sendGolabalFrame+0x32>
	{
		// Send the current byte
		UART_sendByte(frame_TX[byte_index]);
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	28 2f       	mov	r18, r24
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c30:	fc 01       	movw	r30, r24
    2c32:	e2 0f       	add	r30, r18
    2c34:	f3 1f       	adc	r31, r19
    2c36:	80 81       	ld	r24, Z
    2c38:	0e 94 76 15 	call	0x2aec	; 0x2aec <UART_sendByte>
 */
void UART_sendGolabalFrame(const uint8_t *frame_TX, uint8_t number_of_bytes)
{
	uint8 byte_index;
	// Iterate through each byte in the data array
	for (byte_index = 0 ; byte_index < number_of_bytes ; byte_index++)
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	8f 5f       	subi	r24, 0xFF	; 255
    2c40:	89 83       	std	Y+1, r24	; 0x01
    2c42:	99 81       	ldd	r25, Y+1	; 0x01
    2c44:	8c 81       	ldd	r24, Y+4	; 0x04
    2c46:	98 17       	cp	r25, r24
    2c48:	70 f3       	brcs	.-36     	; 0x2c26 <UART_sendGolabalFrame+0x16>
	{
		// Send the current byte
		UART_sendByte(frame_TX[byte_index]);
	}
}
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	cf 91       	pop	r28
    2c54:	df 91       	pop	r29
    2c56:	08 95       	ret

00002c58 <UART_receiveGlobalFrame>:
/*
 * Description :
 * Functional responsible for receive multiple bytes from another UART device.
 */
void UART_receiveGlobalFrame(uint8_t *frame_RX, uint8_t number_of_bytes)
{
    2c58:	0f 93       	push	r16
    2c5a:	1f 93       	push	r17
    2c5c:	df 93       	push	r29
    2c5e:	cf 93       	push	r28
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <UART_receiveGlobalFrame+0xa>
    2c62:	00 d0       	rcall	.+0      	; 0x2c64 <UART_receiveGlobalFrame+0xc>
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
    2c68:	9b 83       	std	Y+3, r25	; 0x03
    2c6a:	8a 83       	std	Y+2, r24	; 0x02
    2c6c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 byte_index;
	// Iterate through each byte to be received
	for (byte_index = 0 ; byte_index < number_of_bytes ; byte_index++)
    2c6e:	19 82       	std	Y+1, r1	; 0x01
    2c70:	0f c0       	rjmp	.+30     	; 0x2c90 <UART_receiveGlobalFrame+0x38>
	{
		// Receive the byte and store it in the buffer
		frame_RX[byte_index] = UART_recieveByte();
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	28 2f       	mov	r18, r24
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7c:	8c 01       	movw	r16, r24
    2c7e:	02 0f       	add	r16, r18
    2c80:	13 1f       	adc	r17, r19
    2c82:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <UART_recieveByte>
    2c86:	f8 01       	movw	r30, r16
    2c88:	80 83       	st	Z, r24
 */
void UART_receiveGlobalFrame(uint8_t *frame_RX, uint8_t number_of_bytes)
{
	uint8 byte_index;
	// Iterate through each byte to be received
	for (byte_index = 0 ; byte_index < number_of_bytes ; byte_index++)
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	8f 5f       	subi	r24, 0xFF	; 255
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    2c90:	99 81       	ldd	r25, Y+1	; 0x01
    2c92:	8c 81       	ldd	r24, Y+4	; 0x04
    2c94:	98 17       	cp	r25, r24
    2c96:	68 f3       	brcs	.-38     	; 0x2c72 <UART_receiveGlobalFrame+0x1a>
	{
		// Receive the byte and store it in the buffer
		frame_RX[byte_index] = UART_recieveByte();
	}
}
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	08 95       	ret

00002caa <__udivmodsi4>:
    2caa:	a1 e2       	ldi	r26, 0x21	; 33
    2cac:	1a 2e       	mov	r1, r26
    2cae:	aa 1b       	sub	r26, r26
    2cb0:	bb 1b       	sub	r27, r27
    2cb2:	fd 01       	movw	r30, r26
    2cb4:	0d c0       	rjmp	.+26     	; 0x2cd0 <__udivmodsi4_ep>

00002cb6 <__udivmodsi4_loop>:
    2cb6:	aa 1f       	adc	r26, r26
    2cb8:	bb 1f       	adc	r27, r27
    2cba:	ee 1f       	adc	r30, r30
    2cbc:	ff 1f       	adc	r31, r31
    2cbe:	a2 17       	cp	r26, r18
    2cc0:	b3 07       	cpc	r27, r19
    2cc2:	e4 07       	cpc	r30, r20
    2cc4:	f5 07       	cpc	r31, r21
    2cc6:	20 f0       	brcs	.+8      	; 0x2cd0 <__udivmodsi4_ep>
    2cc8:	a2 1b       	sub	r26, r18
    2cca:	b3 0b       	sbc	r27, r19
    2ccc:	e4 0b       	sbc	r30, r20
    2cce:	f5 0b       	sbc	r31, r21

00002cd0 <__udivmodsi4_ep>:
    2cd0:	66 1f       	adc	r22, r22
    2cd2:	77 1f       	adc	r23, r23
    2cd4:	88 1f       	adc	r24, r24
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	1a 94       	dec	r1
    2cda:	69 f7       	brne	.-38     	; 0x2cb6 <__udivmodsi4_loop>
    2cdc:	60 95       	com	r22
    2cde:	70 95       	com	r23
    2ce0:	80 95       	com	r24
    2ce2:	90 95       	com	r25
    2ce4:	9b 01       	movw	r18, r22
    2ce6:	ac 01       	movw	r20, r24
    2ce8:	bd 01       	movw	r22, r26
    2cea:	cf 01       	movw	r24, r30
    2cec:	08 95       	ret

00002cee <__prologue_saves__>:
    2cee:	2f 92       	push	r2
    2cf0:	3f 92       	push	r3
    2cf2:	4f 92       	push	r4
    2cf4:	5f 92       	push	r5
    2cf6:	6f 92       	push	r6
    2cf8:	7f 92       	push	r7
    2cfa:	8f 92       	push	r8
    2cfc:	9f 92       	push	r9
    2cfe:	af 92       	push	r10
    2d00:	bf 92       	push	r11
    2d02:	cf 92       	push	r12
    2d04:	df 92       	push	r13
    2d06:	ef 92       	push	r14
    2d08:	ff 92       	push	r15
    2d0a:	0f 93       	push	r16
    2d0c:	1f 93       	push	r17
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
    2d16:	ca 1b       	sub	r28, r26
    2d18:	db 0b       	sbc	r29, r27
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	cd bf       	out	0x3d, r28	; 61
    2d24:	09 94       	ijmp

00002d26 <__epilogue_restores__>:
    2d26:	2a 88       	ldd	r2, Y+18	; 0x12
    2d28:	39 88       	ldd	r3, Y+17	; 0x11
    2d2a:	48 88       	ldd	r4, Y+16	; 0x10
    2d2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d30:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d32:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d34:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d36:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d38:	b9 84       	ldd	r11, Y+9	; 0x09
    2d3a:	c8 84       	ldd	r12, Y+8	; 0x08
    2d3c:	df 80       	ldd	r13, Y+7	; 0x07
    2d3e:	ee 80       	ldd	r14, Y+6	; 0x06
    2d40:	fd 80       	ldd	r15, Y+5	; 0x05
    2d42:	0c 81       	ldd	r16, Y+4	; 0x04
    2d44:	1b 81       	ldd	r17, Y+3	; 0x03
    2d46:	aa 81       	ldd	r26, Y+2	; 0x02
    2d48:	b9 81       	ldd	r27, Y+1	; 0x01
    2d4a:	ce 0f       	add	r28, r30
    2d4c:	d1 1d       	adc	r29, r1
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	ed 01       	movw	r28, r26
    2d5a:	08 95       	ret

00002d5c <_exit>:
    2d5c:	f8 94       	cli

00002d5e <__stop_program>:
    2d5e:	ff cf       	rjmp	.-2      	; 0x2d5e <__stop_program>
